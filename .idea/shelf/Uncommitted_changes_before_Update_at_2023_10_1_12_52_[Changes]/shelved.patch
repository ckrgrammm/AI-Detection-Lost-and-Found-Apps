Index: app/src/main/res/navigation/shopping_nav_graph.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/shopping_nav_graph\"\r\n    app:startDestination=\"@id/homeFragment\">\r\n\r\n    <fragment\r\n        android:id=\"@+id/addMaterialFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.AddMaterialFragment\"\r\n        android:label=\"Add Material\">\r\n    </fragment>\r\n\r\n\r\n\r\n    <fragment\r\n        android:id=\"@+id/homeFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.HomeFragment\"\r\n        android:label=\"fragment_home\"\r\n        tools:layout=\"@layout/fragment_home\">\r\n\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_addMaterialFragment\"\r\n            app:destination=\"@id/addMaterialFragment\" />\r\n\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_searchFragment\"\r\n            app:destination=\"@id/searchFragment\"\r\n            app:popUpTo=\"@id/homeFragment\" />\r\n        <argument\r\n            android:name=\"position\"\r\n            app:argType=\"integer\"\r\n            android:defaultValue=\"0\" />\r\n\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_materialDetailsFragment\"\r\n            app:destination=\"@id/materialDetailsFragment\"\r\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\r\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\r\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\r\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\r\n    </fragment>\r\n\r\n\r\n    <fragment\r\n        android:id=\"@+id/materialDetailsFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.MaterialPreviewFragment\"\r\n        tools:layout=\"@layout/fragment_product_preview\">\r\n        <argument\r\n            android:name=\"material\"\r\n            app:argType=\"com.example.kleine.model.Material\"\r\n            app:nullable=\"true\" />\r\n    </fragment>\r\n\r\n\r\n    <fragment\r\n        android:id=\"@+id/searchFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.SearchFragment\"\r\n        android:label=\"fragment_search\"\r\n        tools:layout=\"@layout/fragment_search\">\r\n\r\n        <action\r\n            android:id=\"@+id/action_searchFragment_to_homeFragment\"\r\n            app:destination=\"@id/homeFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/profileFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.ProfileFragment\"\r\n        android:label=\"fragment_profile\"\r\n        tools:layout=\"@layout/fragment_profile\">\r\n\r\n\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_billingFragment\"\r\n            app:destination=\"@id/billingFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_editUserInformation\"\r\n            app:destination=\"@id/editUserInformation\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_allOrdersFragment\"\r\n            app:destination=\"@id/allOrdersFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_languageFragment\"\r\n            app:destination=\"@id/languageFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_viewPartnershipFragment\"\r\n            app:destination=\"@id/viewPartnershipFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_helpFragment\"\r\n            app:destination=\"@id/helpFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_joinPartnerFragment\"\r\n            app:destination=\"@id/joinPartnerFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_adminDashboardFragment\"\r\n            app:destination=\"@id/adminDashboardFragment\"\r\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\r\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\r\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\r\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_passedQuizzesFragment\"\r\n            app:destination=\"@id/passedQuizzesFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_rewardFragment\"\r\n            app:destination=\"@id/rewardFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/cartFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.CartFragment\"\r\n        android:label=\"fragment_cart\"\r\n        tools:layout=\"@layout/fragment_cart\">\r\n\r\n        <action\r\n            android:id=\"@+id/action_cartFragment_to_billingFragment\"\r\n            app:destination=\"@id/billingFragment\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/billingFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.BillingFragment\"\r\n        android:label=\"fragment_billing\"\r\n        tools:layout=\"@layout/fragment_billing\">\r\n        <action\r\n            android:id=\"@+id/action_billingFragment_to_addressFragment\"\r\n            app:destination=\"@id/addressFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\" />\r\n        <argument\r\n            android:name=\"clickFlag\"\r\n            app:argType=\"string\" />\r\n        <argument\r\n            android:name=\"price\"\r\n            android:defaultValue=\"null\"\r\n            app:argType=\"string\"\r\n            app:nullable=\"true\" />\r\n        <argument\r\n            android:name=\"products\"\r\n            android:defaultValue=\"@null\"\r\n            app:argType=\"com.example.kleine.model.CartProductsList\"\r\n            app:nullable=\"true\" />\r\n        <action\r\n            android:id=\"@+id/action_billingFragment_to_orderCompletion\"\r\n            app:destination=\"@id/orderCompletion\"\r\n            app:popUpTo=\"@id/billingFragment\"\r\n            app:popUpToInclusive=\"true\" />\r\n        <action\r\n            android:id=\"@+id/action_billingFragment_to_rewardFragment\"\r\n            app:destination=\"@id/rewardFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/addressFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.AddressFragment\"\r\n        android:label=\"fragment_address\"\r\n        tools:layout=\"@layout/fragment_address\">\r\n\r\n        <argument\r\n            android:name=\"address\"\r\n            android:defaultValue=\"@null\"\r\n            app:argType=\"com.example.kleine.model.Address\"\r\n            app:nullable=\"true\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/orderCompletion\"\r\n        android:name=\"com.example.kleine.fragments.shopping.OrderCompletion\"\r\n        android:label=\"fragment_order_completion\"\r\n        tools:layout=\"@layout/fragment_order_completion\">\r\n        <argument\r\n            android:name=\"order_completion_flag\"\r\n            app:argType=\"string\" />\r\n        <argument\r\n            android:name=\"orderNumber\"\r\n            android:defaultValue=\"null\"\r\n            app:argType=\"string\"\r\n            app:nullable=\"true\" />\r\n        <action\r\n            android:id=\"@+id/action_orderCompletion_to_orderDetails\"\r\n            app:destination=\"@id/orderDetails\" />\r\n        <argument\r\n            android:name=\"order\"\r\n            app:argType=\"com.example.kleine.model.Order\"\r\n            app:nullable=\"true\"\r\n            android:defaultValue=\"@null\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/editUserInformation\"\r\n        android:name=\"com.example.kleine.fragments.settings.EditUserInformationFragment\"\r\n        android:label=\"fragment_edit_user_information\"\r\n        tools:layout=\"@layout/fragment_edit_user_information\">\r\n        <argument\r\n            android:name=\"user\"\r\n            app:argType=\"com.example.kleine.model.User\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/allOrdersFragment\"\r\n        android:name=\"com.example.kleine.fragments.settings.AllOrdersFragment\"\r\n        android:label=\"fragment_all_orders\"\r\n        tools:layout=\"@layout/fragment_all_orders\" >\r\n\r\n        <action\r\n            android:id=\"@+id/action_allOrdersFragment_to_orderDetails\"\r\n            app:destination=\"@id/orderDetails\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\">\r\n            <argument\r\n                android:name=\"documentId\"\r\n                app:argType=\"string\"\r\n                app:nullable=\"false\" />\r\n        </action>\r\n\r\n        <action\r\n            android:id=\"@+id/action_allOrdersFragment_to_materialDetailsFragment\"\r\n            app:destination=\"@id/materialDetailsFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\" />\r\n\r\n\r\n\r\n\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/orderDetails\"\r\n        android:name=\"com.example.kleine.fragments.settings.OrderDetails\"\r\n        android:label=\"fragment_order_details\"\r\n        tools:layout=\"@layout/fragment_order_details\" >\r\n\r\n        <argument\r\n            android:name=\"material\"\r\n            app:argType=\"com.example.kleine.model.Material\" />\r\n\r\n        <argument\r\n            android:name=\"courseDocument\"\r\n            app:argType=\"com.example.kleine.model.CourseDocument\" />\r\n        <action\r\n            android:id=\"@+id/action_orderDetails_to_quizFragment\"\r\n            app:destination=\"@id/quizFragment\" >\r\n            <argument\r\n                android:name=\"materialDocId\"\r\n                app:argType=\"string\" />\r\n        </action>\r\n\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/languageFragment\"\r\n        android:name=\"com.example.kleine.fragments.settings.LanguageFragment\"\r\n        android:label=\"fragment_language\"\r\n        tools:layout=\"@layout/fragment_language\" />\r\n    <fragment\r\n        android:id=\"@+id/viewPartnershipFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.ViewPartnershipFragment\"\r\n        android:label=\"fragment_view_partnership\"\r\n        tools:layout=\"@layout/fragment_view_partnership\">\r\n        <action\r\n            android:id=\"@+id/action_viewPartnershipFragment_to_partnershipViewMaterialFragment\"\r\n            app:destination=\"@id/partnershipViewMaterialFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_viewPartnershipFragment_to_updatePartnershipFragment\"\r\n            app:destination=\"@id/updatePartnershipFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/helpFragment\"\r\n        android:name=\"com.example.kleine.fragments.settings.HelpFragment\"\r\n        android:label=\"HelpFragment\"\r\n        tools:layout=\"@layout/fragment_help\"/>\r\n    <fragment\r\n        android:id=\"@+id/partnershipViewMaterialFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialFragment\"\r\n        android:label=\"fragment_partnership_view_material\"\r\n        tools:layout=\"@layout/fragment_partnership_view_material\" >\r\n        <action\r\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_partnershipViewMaterialDetailFragment\"\r\n            app:destination=\"@id/partnershipViewMaterialDetailFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\">\r\n            <argument\r\n                android:name=\"documentId\"\r\n                app:argType=\"string\"\r\n                app:nullable=\"false\" />\r\n        </action>\r\n        <action\r\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_setsFragment\"\r\n            app:destination=\"@id/setsFragment\" />\r\n\r\n        <action\r\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_editMaterialFragment\"\r\n            app:destination=\"@id/editMaterialFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/partnershipViewMaterialDetailFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialDetailFragment\"\r\n        android:label=\"fragment_partnership_view_material_detail\"\r\n        tools:layout=\"@layout/fragment_partnership_view_material_detail\" >\r\n        <action\r\n            android:id=\"@+id/action_partnershipViewMaterialDetailFragment_to_replyCommentFragment\"\r\n            app:destination=\"@id/replyCommentFragment\"\r\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\r\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\r\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\r\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\">\r\n            <argument\r\n                android:name=\"documentId\"\r\n                app:argType=\"string\"\r\n                app:nullable=\"false\" />\r\n        </action>\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/replyCommentFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.ReplyCommentFragment\"\r\n        android:label=\"fragment_reply_comment\"\r\n        tools:layout=\"@layout/fragment_reply_comment\" />\r\n    <fragment\r\n        android:id=\"@+id/joinPartnerFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.JoinPartnerFragment\"\r\n        android:label=\"fragment_join__partner_\"\r\n        tools:layout=\"@layout/fragment_join__partner_\" />\r\n    <fragment\r\n        android:id=\"@+id/adminDashboardFragment\"\r\n        android:name=\"com.example.kleine.fragments.admin.AdminDashboardFragment\"\r\n        android:label=\"fragment_admin_dashboard\"\r\n        tools:layout=\"@layout/fragment_admin_dashboard\" >\r\n        <action\r\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewPartnershipFragment\"\r\n            app:destination=\"@id/adminViewPartnershipFragment\"\r\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\r\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\r\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\r\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\r\n        <action\r\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewRewardFragment\"\r\n            app:destination=\"@id/adminViewRewardFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/adminViewPartnershipFragment\"\r\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipFragment\"\r\n        android:label=\"fragment_admin_view_partnership\"\r\n        tools:layout=\"@layout/fragment_admin_view_partnership\" >\r\n        <action\r\n            android:id=\"@+id/action_adminViewPartnershipFragment_to_adminViewPartnershipRequestFragment\"\r\n            app:destination=\"@id/adminViewPartnershipRequestFragment\" />\r\n    </fragment>\r\n\r\n\r\n    <fragment\r\n        android:id=\"@+id/adminViewPartnershipRequestFragment\"\r\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipRequestFragment\"\r\n        android:label=\"fragment_admin_view_partnership_request\"\r\n        tools:layout=\"@layout/fragment_admin_view_partnership_request\" />\r\n    <fragment\r\n        android:id=\"@+id/updatePartnershipFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.UpdatePartnershipFragment\"\r\n        android:label=\"UpdatePartnershipFragment\"\r\n        tools:layout=\"@layout/fragment_update_partnership\"/>\r\n\r\n<!--    quiz-->\r\n    <fragment\r\n        android:id=\"@+id/setsFragment\"\r\n        android:name=\"com.example.kleine.fragments.quiz.SetsFragment\"\r\n        android:label=\"SetsFragment\"\r\n        tools:layout=\"@layout/fragment_sets\" >\r\n        <action\r\n            android:id=\"@+id/action_setsFragment_to_questionFragment\"\r\n            app:destination=\"@id/questionFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/questionFragment\"\r\n        android:name=\"com.example.kleine.fragments.quiz.QuestionFragment\"\r\n        android:label=\"QuestionFragment\"\r\n        tools:layout=\"@layout/fragment_question\" >\r\n        <action\r\n            android:id=\"@+id/action_questionFragment_to_addUpdateQuestionFragment\"\r\n            app:destination=\"@id/addUpdateQuestionFragment\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/editMaterialFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.EditMaterialFragment\"\r\n        android:label=\"Edit Material\"\r\n        tools:layout=\"@layout/edit_material\">\r\n        <argument\r\n            android:name=\"materialId\"\r\n            app:argType=\"string\"\r\n            app:nullable=\"false\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/addUpdateQuestionFragment\"\r\n        android:name=\"com.example.kleine.fragments.quiz.AddUpdateQuestionFragment\"\r\n        android:label=\"AddUpdateQuestionFragment\"\r\n        tools:layout=\"@layout/fragment_add_update_question\" />\r\n    <fragment\r\n        android:id=\"@+id/quizFragment\"\r\n        android:name=\"com.example.kleine.fragments.quiz.QuizFragment\"\r\n        android:label=\"QuizFragment\"\r\n        tools:layout=\"@layout/fragment_quiz\" >\r\n        <action\r\n            android:id=\"@+id/action_quizFragment_to_playFragment\"\r\n            app:destination=\"@id/playFragment\" >\r\n            <argument\r\n                android:name=\"materialDocId\"\r\n                app:argType=\"string\"\r\n                app:nullable=\"false\" />\r\n            <argument\r\n                android:name=\"randomSetId\"\r\n                app:argType=\"string\"\r\n                app:nullable=\"false\" />\r\n        </action>\r\n        <action\r\n            android:id=\"@+id/action_quizFragment_to_orderDetails\"\r\n            app:destination=\"@id/orderDetails\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/playFragment\"\r\n        android:name=\"com.example.kleine.fragments.quiz.PlayFragment\"\r\n        android:label=\"PlayFragment\"\r\n        tools:layout=\"@layout/fragment_play\" >\r\n        <action\r\n            android:id=\"@+id/action_playFragment_to_resultFragment\"\r\n            app:destination=\"@id/resultFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_playFragment_to_quizFragment\"\r\n            app:destination=\"@id/quizFragment\" />\r\n        <argument\r\n            android:name=\"materialDocId\"\r\n            app:argType=\"string\"/>\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/resultFragment\"\r\n        android:name=\"com.example.kleine.fragments.quiz.ResultFragment\"\r\n        android:label=\"ResultFragment\"\r\n        tools:layout=\"@layout/fragment_result\" >\r\n        <action\r\n            android:id=\"@+id/action_resultFragment_to_quizFragment\"\r\n            app:destination=\"@id/quizFragment\">\r\n            <argument\r\n                android:name=\"materialDocId\"\r\n                app:argType=\"string\"\r\n                app:nullable=\"true\" />\r\n        </action>\r\n        <action\r\n            android:id=\"@+id/action_resultFragment_to_orderDetails\"\r\n            app:destination=\"@id/orderDetails\" />\r\n    </fragment>\r\n\r\n\r\n    <fragment\r\n        android:id=\"@+id/passedQuizzesFragment\"\r\n        android:name=\"com.example.kleine.fragments.quiz.PassedQuizzesFragment\"\r\n        android:label=\"PassedQuizzesFragment\"\r\n        tools:layout=\"@layout/fragment_passed_quizzes\" />\r\n    <!--    end quiz-->\r\n\r\n<!--    reward-->\r\n    <fragment\r\n        android:id=\"@+id/adminViewRewardFragment\"\r\n        android:name=\"com.example.kleine.fragments.admin.AdminViewRewardFragment\"\r\n        android:label=\"AdminViewRewardFragment\"\r\n        tools:layout=\"@layout/fragment_admin_view_reward\">\r\n        <action\r\n            android:id=\"@+id/action_adminViewRewardFragment_to_adminAddRewardFragment\"\r\n            app:destination=\"@id/adminAddRewardFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_adminViewRewardFragment_to_adminUpdateRewardFragment\"\r\n            app:destination=\"@id/adminUpdateRewardFragment\" >\r\n            <argument\r\n            android:name=\"rewardName\"\r\n            app:argType=\"string\" />\r\n        </action>\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/adminAddRewardFragment\"\r\n        android:name=\"com.example.kleine.fragments.admin.AdminAddRewardFragment\"\r\n        android:label=\"AdminAddRewardFragment\"\r\n        tools:layout=\"@layout/fragment_admin_add_reward\"/>\r\n    <fragment\r\n        android:id=\"@+id/adminUpdateRewardFragment\"\r\n        android:name=\"com.example.kleine.fragments.admin.AdminUpdateRewardFragment\"\r\n        android:label=\"AdminUpdateRewardFragment\"\r\n        tools:layout=\"@layout/fragment_admin_update_reward\"/>\r\n    <fragment\r\n        android:id=\"@+id/rewardFragment\"\r\n        android:name=\"com.example.kleine.fragments.reward.RewardFragment\"\r\n        android:label=\"RewardFragment\"\r\n        tools:layout=\"@layout/fragment_reward\">\r\n        <action\r\n            android:id=\"@+id/action_rewardFragment_to_billingFragment\"\r\n            app:destination=\"@id/billingFragment\" />\r\n    </fragment>\r\n<!--    end reward-->\r\n</navigation>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/navigation/shopping_nav_graph.xml b/app/src/main/res/navigation/shopping_nav_graph.xml
--- a/app/src/main/res/navigation/shopping_nav_graph.xml	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/res/navigation/shopping_nav_graph.xml	(date 1696133739674)
@@ -528,6 +528,9 @@
         <action
             android:id="@+id/action_rewardFragment_to_billingFragment"
             app:destination="@id/billingFragment" />
+        <action
+            android:id="@+id/action_rewardFragment_to_profileFragment"
+            app:destination="@id/profileFragment" />
     </fragment>
 <!--    end reward-->
 </navigation>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_reward.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <data>\r\n\r\n    </data>\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/white\">\r\n\r\n        <com.google.android.material.tabs.TabLayout\r\n            android:id=\"@+id/tabLayout\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:tabMode=\"fixed\" />\r\n\r\n        <androidx.viewpager2.widget.ViewPager2\r\n            android:id=\"@+id/viewPager\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"0dp\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/tabLayout\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\" />\r\n\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n</layout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_reward.xml b/app/src/main/res/layout/fragment_reward.xml
--- a/app/src/main/res/layout/fragment_reward.xml	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/res/layout/fragment_reward.xml	(date 1696135751017)
@@ -11,12 +11,38 @@
         android:layout_height="match_parent"
         android:background="@color/white">
 
+        <!-- Toolbar with Close Button -->
+        <androidx.appcompat.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="0dp"
+            android:layout_height="?attr/actionBarSize"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintTop_toTopOf="parent"
+            app:contentInsetStart="0dp"
+            app:contentInsetEnd="0dp"
+            app:contentInsetLeft="0dp"
+            app:contentInsetRight="0dp"
+            android:background="@color/white"
+            android:elevation="4dp">
+
+            <ImageView
+                android:id="@+id/closeButton"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginStart="16dp"
+                android:layout_gravity="start|center_vertical"
+                android:src="@drawable/ic_close"
+                app:tint="@color/black"/>
+        </androidx.appcompat.widget.Toolbar>
+
         <com.google.android.material.tabs.TabLayout
             android:id="@+id/tabLayout"
-            android:layout_width="match_parent"
+            android:layout_width="0dp"
             android:layout_height="wrap_content"
-            app:layout_constraintTop_toTopOf="parent"
             app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintTop_toBottomOf="@+id/toolbar"
             app:tabMode="fixed" />
 
         <androidx.viewpager2.widget.ViewPager2
Index: app/src/main/java/com/example/kleine/fragments/reward/RewardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.reward\r\n\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.viewpager2.adapter.FragmentStateAdapter\r\nimport com.example.kleine.R\r\nimport com.example.kleine.databinding.FragmentRewardBinding\r\nimport com.example.kleine.model.Address\r\nimport com.google.android.material.tabs.TabLayoutMediator\r\n\r\n// TODO: Rename parameter arguments, choose names that match\r\n// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\r\nprivate const val ARG_PARAM1 = \"param1\"\r\nprivate const val ARG_PARAM2 = \"param2\"\r\n\r\n/**\r\n * A simple [Fragment] subclass.\r\n * Use the [ResultFragment.newInstance] factory method to\r\n * create an instance of this fragment.\r\n */\r\nclass RewardFragment : Fragment() {\r\n\r\n    private lateinit var binding: FragmentRewardBinding\r\n    private val selectedAddress: Address? by lazy {\r\n        arguments?.getParcelable(\"address\")\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_reward, container, false)\r\n\r\n        // Setup ViewPager2 with TabLayout\r\n        val adapter = ViewPagerAdapter(this)\r\n        binding.viewPager.adapter = adapter\r\n\r\n        TabLayoutMediator(binding.tabLayout, binding.viewPager) { tab, position ->\r\n            tab.text = when (position) {\r\n                0 -> \"Redeem\"\r\n                else -> \"Reward History\"\r\n            }\r\n        }.attach()\r\n\r\n        return binding.root\r\n    }\r\n\r\n    inner class ViewPagerAdapter(fragment: Fragment) : FragmentStateAdapter(fragment) {\r\n        override fun getItemCount(): Int = 2\r\n\r\n        override fun createFragment(position: Int): Fragment {\r\n            return when (position) {\r\n                0 -> {\r\n                    val redeemRewardFragment = RedeemRewardFragment()\r\n                    selectedAddress?.let {\r\n                        val bundle = Bundle()\r\n                        bundle.putParcelable(\"address\", it)\r\n                        redeemRewardFragment.arguments = bundle\r\n                    }\r\n                    redeemRewardFragment\r\n                }\r\n                else -> RewardHistoryFragment() // This is the new Fragment for reward history\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/reward/RewardFragment.kt b/app/src/main/java/com/example/kleine/fragments/reward/RewardFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/reward/RewardFragment.kt	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/java/com/example/kleine/fragments/reward/RewardFragment.kt	(date 1696133739831)
@@ -6,6 +6,7 @@
 import android.view.View
 import android.view.ViewGroup
 import androidx.databinding.DataBindingUtil
+import androidx.navigation.fragment.findNavController
 import androidx.viewpager2.adapter.FragmentStateAdapter
 import com.example.kleine.R
 import com.example.kleine.databinding.FragmentRewardBinding
@@ -46,6 +47,11 @@
             }
         }.attach()
 
+        binding.closeButton.setOnClickListener {
+            // Handle the back navigation to profile fragment.
+            findNavController().navigate(R.id.action_rewardFragment_to_profileFragment) // or findNavController().popBackStack()
+        }
+
         return binding.root
     }
 
Index: app/src/main/java/com/example/kleine/viewmodel/reward/RewardHistoryViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.viewmodel.reward\r\n\r\nimport android.app.Application\r\nimport android.content.Context\r\nimport android.content.IntentFilter\r\nimport android.net.ConnectivityManager\r\nimport androidx.lifecycle.AndroidViewModel\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.kleine.database.RewardHistoryDao\r\nimport com.example.kleine.resource.NetworkReceiver\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport kotlinx.coroutines.launch\r\n\r\nclass RewardHistoryViewModel(\r\n    private val rewardHistoryDao: RewardHistoryDao,\r\n    private val appContext: Application // Pass Application context to ViewModel\r\n) : AndroidViewModel(appContext) {\r\n    val rewardHistory = MutableLiveData<List<Map<String, Any>>>()\r\n    private val firestore = FirebaseFirestore.getInstance()\r\n    private val userId = FirebaseAuth.getInstance().currentUser?.uid\r\n    private var isNetworkAvailable: Boolean = false\r\n\r\n    private val networkReceiver = NetworkReceiver(\r\n        onNetworkAvailable = {\r\n            isNetworkAvailable = true\r\n            loadRewardHistory() // Reload history when network becomes available\r\n        },\r\n        onNetworkUnavailable = {\r\n            isNetworkAvailable = false\r\n            loadRewardHistoryFromRoom() // Load history from Room when network is unavailable\r\n        }\r\n    )\r\n\r\n    init {\r\n        // Register your NetworkReceiver here\r\n        val intentFilter = IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)\r\n        appContext.registerReceiver(networkReceiver, intentFilter)\r\n\r\n        // Manually check network availability before initial load\r\n        val connectivityManager = appContext.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n        isNetworkAvailable = connectivityManager.activeNetworkInfo?.isConnectedOrConnecting == true\r\n\r\n        loadRewardHistory()\r\n    }\r\n\r\n\r\n    private fun loadRewardHistory() {\r\n        userId?.let {\r\n            if (isNetworkAvailable) {\r\n                val rewardHistoryCollection = firestore.collection(\"users\").document(it).collection(\"rewardHistory\")\r\n                rewardHistoryCollection.addSnapshotListener { snapshot, exception ->\r\n                    if (exception != null || snapshot == null) {\r\n                        return@addSnapshotListener\r\n                    }\r\n\r\n                    val historyList = mutableListOf<Map<String, Any>>()\r\n                    for (document in snapshot.documents) {\r\n                        historyList.add(document.data ?: mapOf())\r\n                    }\r\n                    rewardHistory.value = historyList\r\n                    // You can also save the retrieved data to Room here for offline access\r\n                }\r\n            } else {\r\n                loadRewardHistoryFromRoom()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun loadRewardHistoryFromRoom() {\r\n        viewModelScope.launch {\r\n            userId?.let { id ->\r\n                val historyList = rewardHistoryDao.getAllRewardHistory(id)\r\n                rewardHistory.value = historyList.map { rewardHistory ->\r\n                    mapOf(\r\n                        \"redeemedDate\" to rewardHistory.redeemedDate,\r\n                        \"rewardName\" to rewardHistory.rewardName,\r\n                        \"rewardDetails\" to rewardHistory.rewardDetails\r\n                    )\r\n                }\r\n            } ?: run {\r\n                // Handle the case where userId is null\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    override fun onCleared() {\r\n        super.onCleared()\r\n        appContext.unregisterReceiver(networkReceiver)\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/viewmodel/reward/RewardHistoryViewModel.kt b/app/src/main/java/com/example/kleine/viewmodel/reward/RewardHistoryViewModel.kt
--- a/app/src/main/java/com/example/kleine/viewmodel/reward/RewardHistoryViewModel.kt	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/java/com/example/kleine/viewmodel/reward/RewardHistoryViewModel.kt	(date 1696130928230)
@@ -12,6 +12,7 @@
 import com.example.kleine.resource.NetworkReceiver
 import com.google.firebase.auth.FirebaseAuth
 import com.google.firebase.firestore.FirebaseFirestore
+import com.google.firebase.firestore.Query
 import kotlinx.coroutines.launch
 
 class RewardHistoryViewModel(
@@ -51,7 +52,9 @@
         userId?.let {
             if (isNetworkAvailable) {
                 val rewardHistoryCollection = firestore.collection("users").document(it).collection("rewardHistory")
-                rewardHistoryCollection.addSnapshotListener { snapshot, exception ->
+                rewardHistoryCollection
+                    .orderBy("redeemedDate", Query.Direction.DESCENDING)
+                    .addSnapshotListener { snapshot, exception ->
                     if (exception != null || snapshot == null) {
                         return@addSnapshotListener
                     }
Index: app/src/main/java/com/example/kleine/adapters/recyclerview/RewardHistoryAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.adapters.recyclerview\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.kleine.databinding.RewardHistoryItemBinding\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Locale\r\n\r\nclass RewardHistoryAdapter(\r\n    private val rewardHistory: List<Map<String, Any>>\r\n) : RecyclerView.Adapter<RewardHistoryAdapter.RewardHistoryViewHolder>() {\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RewardHistoryViewHolder {\r\n        val inflater = LayoutInflater.from(parent.context)\r\n        val binding = RewardHistoryItemBinding.inflate(inflater, parent, false)\r\n        return RewardHistoryViewHolder(binding)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: RewardHistoryViewHolder, position: Int) {\r\n        holder.bind(rewardHistory[position])\r\n    }\r\n\r\n    override fun getItemCount() = rewardHistory.size\r\n\r\n    class RewardHistoryViewHolder(private val binding: RewardHistoryItemBinding) : RecyclerView.ViewHolder(binding.root) {\r\n        fun bind(history: Map<String, Any>) {\r\n            binding.textViewRewardName.text = history[\"rewardName\"] as? String\r\n            binding.textViewRewardDetails.text = history[\"rewardDetails\"] as? String\r\n\r\n            // Get the Timestamp from Firestore and convert it to Date\r\n            val timestamp = history[\"redeemedDate\"] as? com.google.firebase.Timestamp\r\n            val date = timestamp?.toDate()\r\n\r\n            // Format and display the redeemed date appropriately\r\n            val sdf = SimpleDateFormat(\"dd-MM-yyyy\", Locale.getDefault())\r\n            val formattedDate = date?.let { sdf.format(it) }\r\n            binding.textViewRewardDate.text = formattedDate\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/adapters/recyclerview/RewardHistoryAdapter.kt b/app/src/main/java/com/example/kleine/adapters/recyclerview/RewardHistoryAdapter.kt
--- a/app/src/main/java/com/example/kleine/adapters/recyclerview/RewardHistoryAdapter.kt	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/java/com/example/kleine/adapters/recyclerview/RewardHistoryAdapter.kt	(date 1696130717083)
@@ -5,6 +5,7 @@
 import androidx.recyclerview.widget.RecyclerView
 import com.example.kleine.databinding.RewardHistoryItemBinding
 import java.text.SimpleDateFormat
+import java.util.Date
 import java.util.Locale
 
 class RewardHistoryAdapter(
@@ -28,14 +29,22 @@
             binding.textViewRewardName.text = history["rewardName"] as? String
             binding.textViewRewardDetails.text = history["rewardDetails"] as? String
 
-            // Get the Timestamp from Firestore and convert it to Date
-            val timestamp = history["redeemedDate"] as? com.google.firebase.Timestamp
-            val date = timestamp?.toDate()
-
             // Format and display the redeemed date appropriately
             val sdf = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())
-            val formattedDate = date?.let { sdf.format(it) }
-            binding.textViewRewardDate.text = formattedDate
+
+            // Check for Firestore Timestamp
+            val timestamp = history["redeemedDate"] as? com.google.firebase.Timestamp
+            val date = timestamp?.toDate()
+            if (date != null) {
+                binding.textViewRewardDate.text = sdf.format(date)
+            } else {
+                // Check for RoomDB Timestamp (in milliseconds)
+                val millis = history["redeemedDate"] as? Long
+                if (millis != null) {
+                    val roomDate = Date(millis)
+                    binding.textViewRewardDate.text = sdf.format(roomDate)
+                }
+            }
         }
     }
 }
Index: app/src/main/java/com/example/kleine/fragments/admin/AdminViewRewardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.admin\r\n\r\nimport android.app.AlertDialog\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.Menu\r\nimport android.view.MenuInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.SearchView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.Toolbar\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.kleine.R\r\nimport com.example.kleine.adapters.recyclerview.RewardAdapter\r\nimport com.example.kleine.database.HelpDatabase\r\nimport com.example.kleine.database.Reward\r\nimport com.example.kleine.databinding.FragmentAdminViewRewardBinding\r\nimport com.example.kleine.viewmodel.admin.AdminViewRewardViewModel\r\nimport com.example.kleine.viewmodel.admin.AdminViewRewardViewModelFactory\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport java.util.Locale\r\n\r\nclass AdminViewRewardFragment : Fragment() {\r\n\r\n    private lateinit var binding: FragmentAdminViewRewardBinding\r\n    private lateinit var viewModel: AdminViewRewardViewModel\r\n    private lateinit var adapter: RewardAdapter\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_admin_view_reward, container, false)\r\n        val toolbar: Toolbar = binding.toolbar\r\n        (activity as AppCompatActivity).setSupportActionBar(toolbar)\r\n        setHasOptionsMenu(true)\r\n        val appContext = requireContext().applicationContext\r\n        val rewardDao = HelpDatabase.getDatabase(requireContext()).rewardDao()\r\n        val factory = AdminViewRewardViewModelFactory(appContext, rewardDao)\r\n        viewModel = ViewModelProvider(this, factory).get(AdminViewRewardViewModel::class.java)\r\n        binding.lifecycleOwner = viewLifecycleOwner\r\n        // Set LayoutManager for the RecyclerView\r\n        binding.rv.layoutManager = LinearLayoutManager(context)\r\n        adapter = RewardAdapter(mutableListOf()).apply {\r\n            onEditButtonClick = { rewardName ->\r\n                val action = AdminViewRewardFragmentDirections.actionAdminViewRewardFragmentToAdminUpdateRewardFragment(rewardName)\r\n                findNavController().navigate(action)\r\n            }\r\n            onDeleteButtonClick = { rewardName ->\r\n                showDeleteConfirmationDialog(rewardName)\r\n            }\r\n        }\r\n        binding.rv.adapter = adapter\r\n\r\n        viewModel.rewards.observe(viewLifecycleOwner) { rewards ->\r\n            adapter.updateData(rewards)\r\n        }\r\n\r\n        viewModel.deleteResult.observe(viewLifecycleOwner) { success ->\r\n            if (success) {\r\n                Toast.makeText(context, \"Reward successfully deleted\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                Toast.makeText(context, \"Failed to delete reward\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n\r\n        binding.floatingActionButton.setOnClickListener {\r\n            findNavController().navigate(R.id.action_adminViewRewardFragment_to_adminAddRewardFragment)\r\n        }\r\n\r\n        return binding.root\r\n    }\r\n\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n        Log.d(\"Menu\", \"onCreateOptionsMenu is called\")\r\n        inflater.inflate(R.menu.search, menu)\r\n        val searchItem = menu.findItem(R.id.search)\r\n        val searchView = searchItem.actionView as SearchView\r\n\r\n        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n            override fun onQueryTextSubmit(query: String?): Boolean {\r\n                // Handle query submission\r\n                query?.let {\r\n                    searchInFirestore(it)\r\n                }\r\n                return true\r\n            }\r\n\r\n            override fun onQueryTextChange(newText: String?): Boolean {\r\n                // Handle query text change\r\n                newText?.let {\r\n                    if (it.isEmpty()) {\r\n                        fetchAllRecords() // fetch and display all records\r\n                    } else {\r\n                        searchInFirestore(it) // perform the search based on input\r\n                    }\r\n                }\r\n                return true\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    private fun fetchAllRecords() {\r\n        val rewardsCollection = FirebaseFirestore.getInstance().collection(\"Rewards\")\r\n        rewardsCollection.get().addOnSuccessListener { snapshot ->\r\n            val rewardList = mutableListOf<Reward>()\r\n            for (document in snapshot.documents) {\r\n                val reward = document.toObject(Reward::class.java)\r\n                if (reward != null) {\r\n                    rewardList.add(reward)\r\n                }\r\n            }\r\n            viewModel.rewards.value = rewardList\r\n        }\r\n    }\r\n\r\n\r\n    private fun searchInFirestore(query: String) {\r\n        val rewardsCollection = FirebaseFirestore.getInstance().collection(\"Rewards\")\r\n        val lowerBound = query.toLowerCase(Locale.getDefault())\r\n        val upperBound = lowerBound + '\\uf8ff'\r\n        rewardsCollection.whereGreaterThanOrEqualTo(\"rewardName\", lowerBound)\r\n            .whereLessThanOrEqualTo(\"rewardName\", upperBound)\r\n            .get()\r\n            .addOnSuccessListener { snapshot ->\r\n                val rewardList = mutableListOf<Reward>()\r\n                for (document in snapshot.documents) {\r\n                    val reward = document.toObject(Reward::class.java)\r\n                    if (reward != null) {\r\n                        rewardList.add(reward)\r\n                    }\r\n                }\r\n                viewModel.rewards.value = rewardList\r\n            }\r\n    }\r\n\r\n\r\n    private fun showDeleteConfirmationDialog(documentId: String) {\r\n        AlertDialog.Builder(requireContext())\r\n            .setTitle(\"Delete Reward\")\r\n            .setMessage(\"Are you sure you want to delete this reward?\")\r\n            .setPositiveButton(\"Yes\") { _, _ ->\r\n                viewModel.deleteReward(documentId)\r\n            }\r\n            .setNegativeButton(\"No\", null)\r\n            .show()\r\n    }\r\n\r\n//    override fun onResume() {\r\n//        super.onResume()\r\n//        viewModel.loadDataBasedOnConnection()\r\n//    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/admin/AdminViewRewardFragment.kt b/app/src/main/java/com/example/kleine/fragments/admin/AdminViewRewardFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/admin/AdminViewRewardFragment.kt	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/java/com/example/kleine/fragments/admin/AdminViewRewardFragment.kt	(date 1696125648211)
@@ -67,7 +67,7 @@
             if (success) {
                 Toast.makeText(context, "Reward successfully deleted", Toast.LENGTH_SHORT).show()
             } else {
-                Toast.makeText(context, "Failed to delete reward", Toast.LENGTH_SHORT).show()
+                Toast.makeText(context, "Failed to delete reward! Pls check your connection", Toast.LENGTH_SHORT).show()
             }
         }
 
Index: app/src/main/java/com/example/kleine/fragments/admin/AdminUpdateRewardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.admin\r\n\r\nimport android.app.Activity\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.Toast\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.bumptech.glide.Glide\r\nimport com.example.kleine.R\r\nimport com.example.kleine.database.HelpDatabase\r\nimport com.example.kleine.databinding.FragmentAdminUpdateRewardBinding\r\nimport com.example.kleine.viewmodel.admin.AdminUpdateRewardViewModel\r\nimport com.example.kleine.viewmodel.admin.AdminUpdateRewardViewModelFactory\r\n\r\nclass AdminUpdateRewardFragment : Fragment() {\r\n\r\n    companion object {\r\n        private const val REQUEST_CODE_SELECT_IMAGE = 1234\r\n    }\r\n\r\n    private lateinit var binding: FragmentAdminUpdateRewardBinding\r\n    private lateinit var viewModel: AdminUpdateRewardViewModel\r\n    private var selectedImageUri: Uri? = null\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_admin_update_reward, container, false)\r\n        val appContext = requireContext().applicationContext\r\n        val rewardDao = HelpDatabase.getDatabase(requireContext()).rewardDao()\r\n        val factory = AdminUpdateRewardViewModelFactory(appContext, rewardDao)\r\n        viewModel = ViewModelProvider(this, factory).get(AdminUpdateRewardViewModel::class.java)\r\n        binding.adminUpdateRewardViewModel = viewModel\r\n        binding.lifecycleOwner = viewLifecycleOwner\r\n\r\n        val oldRewardName = arguments?.getString(\"rewardName\")\r\n        viewModel.loadRewardDetails(oldRewardName)\r\n\r\n        viewModel.imageUrl.observe(viewLifecycleOwner, Observer { url ->\r\n            url?.let {\r\n                val imageView: ImageView = binding.imgRewardPreview\r\n                Glide.with(this@AdminUpdateRewardFragment)\r\n                    .load(it)\r\n                    .into(imageView)\r\n            }\r\n        })\r\n\r\n        binding.imgRewardPreview.setOnClickListener {\r\n            val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)\r\n            startActivityForResult(intent, REQUEST_CODE_SELECT_IMAGE)\r\n        }\r\n\r\n        binding.btnUpdate.setOnClickListener {\r\n            val rewardName = binding.txtRewardName.text.toString().trim()\r\n            val rewardDescription = binding.txtRewardDescription.text.toString().trim()\r\n            val rewardPoints = binding.txtRewardPoints.text.toString().toIntOrNull()\r\n            val redeemLimit = binding.txtRedeemLimit.text.toString().toIntOrNull()\r\n\r\n            when {\r\n                selectedImageUri == null && viewModel.imageUrl.value.isNullOrEmpty() -> {\r\n                    Toast.makeText(context, \"Please select an image!\", Toast.LENGTH_SHORT).show()\r\n                    // Preventing submission by returning early\r\n                    return@setOnClickListener\r\n                }\r\n                rewardName.isEmpty() -> {\r\n                    Toast.makeText(context, \"Reward name cannot be empty!\", Toast.LENGTH_SHORT).show()\r\n                    binding.txtRewardName.requestFocus()\r\n                    // Preventing submission by returning early\r\n                    return@setOnClickListener\r\n                }\r\n                rewardDescription.isEmpty() -> {\r\n                    Toast.makeText(context, \"Reward description cannot be empty!\", Toast.LENGTH_SHORT).show()\r\n                    binding.txtRewardDescription.requestFocus()\r\n                    // Preventing submission by returning early\r\n                    return@setOnClickListener\r\n                }\r\n                rewardPoints == null || rewardPoints <= 0 -> {\r\n                    Toast.makeText(context, \"Reward points must be greater than zero!\", Toast.LENGTH_SHORT).show()\r\n                    binding.txtRewardPoints.requestFocus()\r\n                    // Preventing submission by returning early\r\n                    return@setOnClickListener\r\n                }\r\n                redeemLimit == null || redeemLimit <= 0 -> {\r\n                    Toast.makeText(context, \"Redeem limit must be greater than zero!\", Toast.LENGTH_SHORT).show()\r\n                    binding.txtRedeemLimit.requestFocus()\r\n                    // Preventing submission by returning early\r\n                    return@setOnClickListener\r\n                }\r\n                else -> {\r\n                    viewModel.checkRewardNameExists(oldRewardName, rewardName) { exists ->\r\n                        if (exists) {\r\n                            Toast.makeText(context, \"Reward name already exists!\", Toast.LENGTH_SHORT).show()\r\n                            binding.txtRewardName.requestFocus()\r\n                        } else {\r\n                            // All validations passed, proceeding with the submission\r\n                            viewModel.updateRewardDetailsWithImage(oldRewardName, selectedImageUri)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        viewModel.updateResult.observe(viewLifecycleOwner, Observer { result ->\r\n            if (result) {\r\n                Toast.makeText(context, \"Reward updated successfully!\", Toast.LENGTH_SHORT).show()\r\n                // Navigate back to AdminViewRewardFragment\r\n                findNavController().navigateUp()\r\n            }\r\n        })\r\n\r\n        return binding.root\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == REQUEST_CODE_SELECT_IMAGE && resultCode == Activity.RESULT_OK && data != null) {\r\n            selectedImageUri = data.data\r\n            selectedImageUri?.let {\r\n                binding.imgRewardPreview.setImageURI(it)\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/admin/AdminUpdateRewardFragment.kt b/app/src/main/java/com/example/kleine/fragments/admin/AdminUpdateRewardFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/admin/AdminUpdateRewardFragment.kt	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/java/com/example/kleine/fragments/admin/AdminUpdateRewardFragment.kt	(date 1696102870559)
@@ -56,6 +56,15 @@
             }
         })
 
+        viewModel.imageBytes.observe(viewLifecycleOwner, Observer { url ->
+            url?.let {
+                val imageView: ImageView = binding.imgRewardPreview
+                Glide.with(this@AdminUpdateRewardFragment)
+                    .load(it)
+                    .into(imageView)
+            }
+        })
+
         binding.imgRewardPreview.setOnClickListener {
             val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
             startActivityForResult(intent, REQUEST_CODE_SELECT_IMAGE)
@@ -68,7 +77,7 @@
             val redeemLimit = binding.txtRedeemLimit.text.toString().toIntOrNull()
 
             when {
-                selectedImageUri == null && viewModel.imageUrl.value.isNullOrEmpty() -> {
+                selectedImageUri == null && viewModel.imageUrl.value.isNullOrEmpty() && viewModel.imageBytes.value?.isEmpty() ?: true -> {
                     Toast.makeText(context, "Please select an image!", Toast.LENGTH_SHORT).show()
                     // Preventing submission by returning early
                     return@setOnClickListener
Index: app/src/main/java/com/example/kleine/viewmodel/quiz/PassedQuizzesViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.viewmodel.quiz\r\n\r\nimport android.app.Application\r\nimport android.content.Context\r\nimport android.content.IntentFilter\r\nimport android.net.ConnectivityManager\r\nimport android.util.Log\r\nimport androidx.lifecycle.AndroidViewModel\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.kleine.database.QuizHistoryDao\r\nimport com.example.kleine.model.PassedQuiz\r\nimport com.example.kleine.resource.NetworkReceiver\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport kotlinx.coroutines.Deferred\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.async\r\nimport kotlinx.coroutines.awaitAll\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.tasks.await\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Date\r\nimport java.util.Locale\r\n\r\nclass PassedQuizzesViewModel(\r\n    private val quizHistoryDao: QuizHistoryDao,\r\n    private val appContext: Application // Pass Application context to ViewModel\r\n) : AndroidViewModel(appContext) {\r\n\r\n    private val firestore = FirebaseFirestore.getInstance()\r\n    private val auth = FirebaseAuth.getInstance()\r\n\r\n    private val _passedQuizzes = MutableLiveData<List<PassedQuiz>>()\r\n    val passedQuizzes: LiveData<List<PassedQuiz>> = _passedQuizzes\r\n\r\n    private var isNetworkAvailable: Boolean = false\r\n\r\n    private val networkReceiver = NetworkReceiver(\r\n        onNetworkAvailable = {\r\n            isNetworkAvailable = true\r\n            loadPassedQuizzes() // Reload quizzes when network becomes available\r\n        },\r\n        onNetworkUnavailable = {\r\n            isNetworkAvailable = false\r\n            loadPassedQuizzesFromRoom() // Load quizzes from Room when network is unavailable\r\n        }\r\n    )\r\n\r\n    init {\r\n        // Register NetworkReceiver here\r\n        val intentFilter = IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)\r\n        appContext.registerReceiver(networkReceiver, intentFilter)\r\n\r\n        // Manually check network availability before initial load\r\n        val connectivityManager = appContext.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n        isNetworkAvailable = connectivityManager.activeNetworkInfo?.isConnectedOrConnecting == true\r\n\r\n        // Initial load\r\n        loadPassedQuizzes()\r\n    }\r\n\r\n    private fun loadPassedQuizzes() {\r\n        if (isNetworkAvailable) {\r\n            val userId = auth.currentUser?.uid ?: return\r\n            val userDocument = firestore.collection(\"users\").document(userId)\r\n\r\n            userDocument.collection(\"quizHistory\").get().addOnSuccessListener { querySnapshot ->\r\n                val deferreds = mutableListOf<Deferred<PassedQuiz?>>()\r\n\r\n                for (document in querySnapshot.documents) {\r\n                    val timestamp = document.getTimestamp(\"date\")\r\n                    val date = timestamp?.toDate()?.toString() ?: \"\"\r\n                    val materialId = document.getString(\"materialId\") ?: \"\"\r\n                    val setId = document.getString(\"setId\") ?: \"\"\r\n                    val score = document.getString(\"score\") ?: \"\"\r\n\r\n                    val deferred = CoroutineScope(Dispatchers.IO).async {\r\n                        try {\r\n                            val materialSnapshot = firestore.collection(\"Materials\").document(materialId).get().await()\r\n                            val materialName = materialSnapshot.getString(\"name\") ?: \"Material Name Not Found\"\r\n                            val setSnapshot = firestore.collection(\"Materials\").document(materialId).collection(\"Sets\").document(setId).get().await()\r\n                            val setName = setSnapshot.getString(\"setName\") ?: \"Set Name Not Found\"\r\n\r\n                            PassedQuiz(\r\n                                userDocumentId = document.id,\r\n                                materialName = materialName,\r\n                                date = date,\r\n                                setName = setName,\r\n                                score = score\r\n                            )\r\n                        } catch (e: Exception) {\r\n                            Log.e(\"PassedQuizzesViewModel\", \"Error fetching material or set name\", e)\r\n                            null\r\n                        }\r\n                    }\r\n                    deferreds.add(deferred)\r\n                }\r\n\r\n                CoroutineScope(Dispatchers.Main).launch {\r\n                    val results = deferreds.awaitAll()\r\n                    _passedQuizzes.value = results.filterNotNull()\r\n                }\r\n            }.addOnFailureListener { exception ->\r\n                Log.e(\"PassedQuizzesViewModel\", \"Error fetching quiz history\", exception)\r\n            }\r\n\r\n        } else {\r\n            loadPassedQuizzesFromRoom()\r\n        }\r\n\r\n    }\r\n\r\n    private fun loadPassedQuizzesFromRoom() {\r\n        viewModelScope.launch {\r\n            // Load quiz history from Room Database\r\n            val userId = auth.currentUser?.uid ?: return@launch\r\n            val historyList = quizHistoryDao.getAllQuizHistory(userId)\r\n\r\n            // Map to your PassedQuiz model and set value to _passedQuizzes\r\n            val passedQuizzesList = historyList.map { quizHistory ->\r\n                // Convert Long type date to dd-MM-yyyy format\r\n                val dateFormat = SimpleDateFormat(\"dd-MM-yyyy\", Locale.getDefault())\r\n                val date = dateFormat.format(Date(quizHistory.date))\r\n\r\n                PassedQuiz(\r\n                    userDocumentId = quizHistory.id.toString(), // Assuming QuizHistory has an id field, adjust accordingly\r\n                    materialName = quizHistory.materialName,\r\n                    setName = quizHistory.setName,\r\n                    score = quizHistory.score,\r\n                    date = date\r\n                )\r\n            }\r\n            _passedQuizzes.value = passedQuizzesList\r\n        }\r\n    }\r\n\r\n    override fun onCleared() {\r\n        super.onCleared()\r\n        appContext.unregisterReceiver(networkReceiver)\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/viewmodel/quiz/PassedQuizzesViewModel.kt b/app/src/main/java/com/example/kleine/viewmodel/quiz/PassedQuizzesViewModel.kt
--- a/app/src/main/java/com/example/kleine/viewmodel/quiz/PassedQuizzesViewModel.kt	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/java/com/example/kleine/viewmodel/quiz/PassedQuizzesViewModel.kt	(date 1696131780768)
@@ -101,7 +101,8 @@
 
                 CoroutineScope(Dispatchers.Main).launch {
                     val results = deferreds.awaitAll()
-                    _passedQuizzes.value = results.filterNotNull()
+                    val sortedResults = results.filterNotNull().sortedByDescending { it.date }
+                    _passedQuizzes.value = sortedResults
                 }
             }.addOnFailureListener { exception ->
                 Log.e("PassedQuizzesViewModel", "Error fetching quiz history", exception)
Index: app/src/main/java/com/example/kleine/database/RewardDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.database\r\n\r\nimport androidx.room.Dao\r\nimport androidx.room.Insert\r\nimport androidx.room.Query\r\nimport androidx.room.Update\r\n\r\n@Dao\r\ninterface RewardDao {\r\n\r\n    @Insert\r\n    suspend fun insert(reward: Reward): Long\r\n\r\n    @Update\r\n    suspend fun update(reward: Reward)\r\n\r\n    @Query(\"SELECT * FROM reward WHERE rewardName = :name\")\r\n    suspend fun getRewardByName(name: String): Reward?\r\n\r\n    @Query(\"SELECT * FROM reward\")\r\n    suspend fun getAllRewards(): List<Reward>\r\n\r\n    @Query(\"SELECT COUNT(*) FROM reward WHERE rewardName = :rewardName\")\r\n    suspend fun countByName(rewardName: String): Int\r\n\r\n    @Query(\"SELECT COUNT(*) FROM reward WHERE rewardName = :newRewardName AND rewardName != :currentRewardName\")\r\n    suspend fun countByNameExcludingCurrent(newRewardName: String, currentRewardName: String): Int\r\n\r\n    @Query(\"SELECT * FROM reward WHERE isAdded = :isAdded\")\r\n    suspend fun getUnsyncedRewards(isAdded: Int): List<Reward>\r\n\r\n\r\n    // Add other queries or operations as needed.\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/database/RewardDao.kt b/app/src/main/java/com/example/kleine/database/RewardDao.kt
--- a/app/src/main/java/com/example/kleine/database/RewardDao.kt	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/java/com/example/kleine/database/RewardDao.kt	(date 1696128239644)
@@ -17,7 +17,7 @@
     @Query("SELECT * FROM reward WHERE rewardName = :name")
     suspend fun getRewardByName(name: String): Reward?
 
-    @Query("SELECT * FROM reward")
+    @Query("SELECT * FROM reward WHERE isDeleted = 0")
     suspend fun getAllRewards(): List<Reward>
 
     @Query("SELECT COUNT(*) FROM reward WHERE rewardName = :rewardName")
@@ -29,6 +29,11 @@
     @Query("SELECT * FROM reward WHERE isAdded = :isAdded")
     suspend fun getUnsyncedRewards(isAdded: Int): List<Reward>
 
+    @Query("SELECT * FROM reward WHERE isUpdated = :isUpdated")
+    suspend fun getModifiedRewards(isUpdated: Int): List<Reward>
+
+    @Query("UPDATE reward SET redeemedCount = redeemedCount + 1 WHERE rewardName = :rewardName")
+    suspend fun incrementRedeemedCount(rewardName: String)
 
     // Add other queries or operations as needed.
 }
Index: app/src/main/java/com/example/kleine/adapters/recyclerview/PassedQuizzesAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.adapters.recyclerview\r\n\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.kleine.R\r\nimport com.example.kleine.model.PassedQuiz\r\n\r\nclass PassedQuizzesAdapter(private var quizzes: MutableList<PassedQuiz> = mutableListOf()) :\r\n    RecyclerView.Adapter<PassedQuizzesAdapter.ViewHolder>() {\r\n\r\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val materialNameTextView: TextView = itemView.findViewById(R.id.tv_material_name)\r\n        val dateTextView: TextView = itemView.findViewById(R.id.tv_date)\r\n        val setNameTextView: TextView = itemView.findViewById(R.id.tv_set_name)\r\n        val scoreTextView: TextView = itemView.findViewById(R.id.tv_score)\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.passed_quiz_item, parent, false)\r\n        return ViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val quiz = quizzes[position]\r\n        holder.materialNameTextView.text = quiz.materialName\r\n        holder.dateTextView.text = quiz.date\r\n        holder.setNameTextView.text = quiz.setName\r\n        holder.scoreTextView.text = quiz.score\r\n    }\r\n\r\n    override fun getItemCount() = quizzes.size\r\n\r\n    fun updateQuizzes(newQuizzes: List<PassedQuiz>) {\r\n        quizzes.clear()\r\n        quizzes.addAll(newQuizzes)\r\n        notifyDataSetChanged()\r\n    }\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/adapters/recyclerview/PassedQuizzesAdapter.kt b/app/src/main/java/com/example/kleine/adapters/recyclerview/PassedQuizzesAdapter.kt
--- a/app/src/main/java/com/example/kleine/adapters/recyclerview/PassedQuizzesAdapter.kt	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/java/com/example/kleine/adapters/recyclerview/PassedQuizzesAdapter.kt	(date 1696133212014)
@@ -1,6 +1,7 @@
 package com.example.kleine.adapters.recyclerview
 
 
+import android.util.Log
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
@@ -8,6 +9,10 @@
 import androidx.recyclerview.widget.RecyclerView
 import com.example.kleine.R
 import com.example.kleine.model.PassedQuiz
+import java.text.ParseException
+import java.text.SimpleDateFormat
+import java.util.Date
+import java.util.Locale
 
 class PassedQuizzesAdapter(private var quizzes: MutableList<PassedQuiz> = mutableListOf()) :
     RecyclerView.Adapter<PassedQuizzesAdapter.ViewHolder>() {
@@ -27,11 +32,34 @@
     override fun onBindViewHolder(holder: ViewHolder, position: Int) {
         val quiz = quizzes[position]
         holder.materialNameTextView.text = quiz.materialName
-        holder.dateTextView.text = quiz.date
+        holder.dateTextView.text = formatDate(quiz.date)
         holder.setNameTextView.text = quiz.setName
         holder.scoreTextView.text = quiz.score
     }
 
+    private fun formatDate(dateStr: String): String? {
+        val sdf = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())
+
+        // Pattern to match "Sun Sep 24 18:06:24 GMT 2023"
+        val firestoreSDF = SimpleDateFormat("EEE MMM dd HH:mm:ss 'GMT' yyyy", Locale.ENGLISH)
+
+        val formattedDate = try {
+            val dateLong = dateStr.toLong()
+            sdf.format(Date(dateLong))
+        } catch (e: NumberFormatException) {
+            try {
+                val firestoreDate = firestoreSDF.parse(dateStr)
+                if (firestoreDate != null) sdf.format(firestoreDate) else null
+            } catch (ex: ParseException) {
+                null
+            }
+        }
+
+        // Log the results
+        Log.d("PassedQuizzesAdapter", "Original date: $dateStr, Formatted date: $formattedDate")
+        return formattedDate
+    }
+
     override fun getItemCount() = quizzes.size
 
     fun updateQuizzes(newQuizzes: List<PassedQuiz>) {
Index: app/src/main/java/com/example/kleine/viewmodel/admin/AdminUpdateRewardViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.viewmodel.admin\r\n\r\nimport android.content.Context\r\nimport android.content.IntentFilter\r\nimport android.net.ConnectivityManager\r\nimport android.net.Uri\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.kleine.database.RewardDao\r\nimport com.example.kleine.resource.NetworkReceiver\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport kotlinx.coroutines.launch\r\n\r\nclass AdminUpdateRewardViewModel(private val appContext: Context, private val rewardDao: RewardDao) : ViewModel(){\r\n    val rewardName = MutableLiveData<String>()\r\n    val rewardDescription = MutableLiveData<String>()\r\n    val rewardPoints = MutableLiveData<String>()\r\n    val redeemLimit = MutableLiveData<String>()\r\n    val imageUrl = MutableLiveData<String>()\r\n\r\n    private val db = FirebaseFirestore.getInstance()\r\n    val firebaseStorage = FirebaseStorage.getInstance()\r\n    val updateResult = MutableLiveData<Boolean>()\r\n\r\n    private var isNetworkAvailable: Boolean = false\r\n\r\n    private val networkReceiver = NetworkReceiver(\r\n        onNetworkAvailable = {\r\n            isNetworkAvailable = true\r\n        },\r\n        onNetworkUnavailable = {\r\n            isNetworkAvailable = false\r\n        }\r\n    )\r\n\r\n    init {\r\n        // Register your NetworkReceiver here\r\n        val intentFilter = IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)\r\n        appContext.registerReceiver(networkReceiver, intentFilter)\r\n\r\n        // Manually check network availability before initial load\r\n        val connectivityManager = appContext.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n        isNetworkAvailable = connectivityManager.activeNetworkInfo?.isConnectedOrConnecting == true\r\n\r\n\r\n    }\r\n\r\n    fun loadRewardDetails(rewardName: String?) {\r\n        rewardName?.let {\r\n            db.collection(\"Rewards\")\r\n                .whereEqualTo(\"rewardName\", it)\r\n                .limit(1)  // Limiting to one document since reward names should be unique\r\n                .get()\r\n                .addOnSuccessListener { documents ->\r\n                    if (documents.documents.isNotEmpty()) {\r\n                        val document = documents.documents[0]\r\n                        this.rewardName.value = document.getString(\"rewardName\")\r\n                        rewardDescription.value = document.getString(\"rewardDescription\")\r\n                        rewardPoints.value = document.getLong(\"rewardPoints\")?.toString()\r\n                        redeemLimit.value = document.getLong(\"redeemLimit\")?.toString()\r\n                        imageUrl.value = document.getString(\"imageUrl\")\r\n                    } else {\r\n                        // Handle the case where no document with the given reward name exists\r\n                    }\r\n                }\r\n                .addOnFailureListener { exception ->\r\n                    // Handle any errors here\r\n                }\r\n        }\r\n    }\r\n\r\n\r\n    fun updateRewardDetailsWithImage(rewardName: String?, selectedImageUri: Uri?) {\r\n        if (selectedImageUri != null) {\r\n            // Create a reference to the location in Firebase Storage where you want to upload the image\r\n            val storageRef = firebaseStorage.reference.child(\"rewards/${System.currentTimeMillis()}.jpg\")\r\n\r\n            // Upload the image to Firebase Storage\r\n            val uploadTask = storageRef.putFile(selectedImageUri)\r\n\r\n            // After uploading, get the download URL of the uploaded image\r\n            uploadTask.continueWithTask { task ->\r\n                if (!task.isSuccessful) {\r\n                    task.exception?.let {\r\n                        throw it\r\n                    }\r\n                }\r\n                storageRef.downloadUrl\r\n            }.addOnCompleteListener { task ->\r\n                if (task.isSuccessful) {\r\n                    // Set the imageUrl to the download URL of the uploaded image\r\n                    imageUrl.value = task.result.toString()\r\n\r\n                    // Update the Firestore document with the new details including the new imageUrl\r\n                    updateRewardDetails(rewardName)\r\n                } else {\r\n                    // Handle failure in image upload\r\n                }\r\n            }\r\n        } else {\r\n            // If no new image was selected, simply update the Firestore document with the existing details\r\n            updateRewardDetails(rewardName)\r\n        }\r\n    }\r\n\r\n    private fun updateRewardDetails(currentRewardName: String?) {\r\n        currentRewardName?.let {\r\n            val updatedData = hashMapOf(\r\n                \"rewardName\" to rewardName.value,\r\n                \"rewardDescription\" to rewardDescription.value,\r\n                \"rewardPoints\" to rewardPoints.value?.toInt(),\r\n                \"redeemLimit\" to redeemLimit.value?.toInt(),\r\n                \"imageUrl\" to imageUrl.value\r\n            )\r\n\r\n            db.collection(\"Rewards\")\r\n                .whereEqualTo(\"rewardName\", it)\r\n                .limit(1)  // Limiting to one document since reward names should be unique\r\n                .get()\r\n                .addOnSuccessListener { documents ->\r\n                    if (documents.documents.isNotEmpty()) {\r\n                        val document = documents.documents[0]\r\n                        document.reference.update(updatedData as Map<String, Any>)\r\n                            .addOnSuccessListener {\r\n                                updateResult.postValue(true)\r\n                            }\r\n                            .addOnFailureListener {\r\n                                updateResult.postValue(false)\r\n                            }\r\n                    } else {\r\n                        // Handle the case where no document with the given reward name exists\r\n                    }\r\n                }\r\n                .addOnFailureListener { exception ->\r\n                    // Handle any errors here\r\n                }\r\n        }\r\n    }\r\n\r\n\r\n    fun checkRewardNameExists(currentRewardName: String?, newRewardName: String, callback: (Boolean) -> Unit) {\r\n        if(isNetworkAvailable){\r\n            db.collection(\"Rewards\")\r\n                .get()\r\n                .addOnSuccessListener { documents ->\r\n                    val existingNames = documents.mapNotNull { it.getString(\"rewardName\") }.filter { it != currentRewardName }\r\n                    callback(newRewardName in existingNames)\r\n                }\r\n                .addOnFailureListener {\r\n                    updateResult.postValue(false)\r\n                }\r\n        } else {\r\n            // If no connection, check using Room DB\r\n            viewModelScope.launch {\r\n                val count = if (currentRewardName != null) {\r\n                    rewardDao.countByNameExcludingCurrent(newRewardName, currentRewardName)\r\n                } else {\r\n                    rewardDao.countByName(newRewardName)\r\n                }\r\n                callback(count > 0) // If count > 0, the reward name exists in Room DB, else it doesn't\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    override fun onCleared() {\r\n        super.onCleared()\r\n        appContext.unregisterReceiver(networkReceiver)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/viewmodel/admin/AdminUpdateRewardViewModel.kt b/app/src/main/java/com/example/kleine/viewmodel/admin/AdminUpdateRewardViewModel.kt
--- a/app/src/main/java/com/example/kleine/viewmodel/admin/AdminUpdateRewardViewModel.kt	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/java/com/example/kleine/viewmodel/admin/AdminUpdateRewardViewModel.kt	(date 1696125057604)
@@ -7,6 +7,7 @@
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
+import com.example.kleine.database.Reward
 import com.example.kleine.database.RewardDao
 import com.example.kleine.resource.NetworkReceiver
 import com.google.firebase.firestore.FirebaseFirestore
@@ -19,6 +20,7 @@
     val rewardPoints = MutableLiveData<String>()
     val redeemLimit = MutableLiveData<String>()
     val imageUrl = MutableLiveData<String>()
+    val imageBytes = MutableLiveData<ByteArray?>()
 
     private val db = FirebaseFirestore.getInstance()
     val firebaseStorage = FirebaseStorage.getInstance()
@@ -48,6 +50,14 @@
     }
 
     fun loadRewardDetails(rewardName: String?) {
+        if (isNetworkAvailable) {
+            loadRewardFromFirebase(rewardName)
+        } else {
+            loadRewardFromRoom(rewardName)
+        }
+    }
+
+    private fun loadRewardFromFirebase(rewardName: String?) {
         rewardName?.let {
             db.collection("Rewards")
                 .whereEqualTo("rewardName", it)
@@ -71,37 +81,101 @@
         }
     }
 
+    private fun loadRewardFromRoom(rewardName: String?) {
+        viewModelScope.launch {
+            rewardName?.let { name ->
+                val reward = rewardDao.getRewardByName(name)
+                reward?.let {
+                    this@AdminUpdateRewardViewModel.rewardName.value = it.rewardName
+                    rewardDescription.value = it.rewardDescription
+                    rewardPoints.value = it.rewardPoints.toString()
+                    redeemLimit.value = it.redeemLimit.toString()
+                    imageBytes.value = it.imageBytes
+                }
+            }
+        }
+    }
 
     fun updateRewardDetailsWithImage(rewardName: String?, selectedImageUri: Uri?) {
+        if (isNetworkAvailable) {
+            // If connected, handle the update in Firestore and then in Room
+            handleFirebaseUpdate(rewardName, selectedImageUri)
+        } else {
+            // If not connected, handle the update only in Room with appropriate flags
+            handleLocalUpdate(rewardName, selectedImageUri)
+        }
+    }
+
+    private fun handleFirebaseUpdate(rewardName: String?, selectedImageUri: Uri?) {
         if (selectedImageUri != null) {
-            // Create a reference to the location in Firebase Storage where you want to upload the image
-            val storageRef = firebaseStorage.reference.child("rewards/${System.currentTimeMillis()}.jpg")
-
-            // Upload the image to Firebase Storage
-            val uploadTask = storageRef.putFile(selectedImageUri)
-
-            // After uploading, get the download URL of the uploaded image
-            uploadTask.continueWithTask { task ->
-                if (!task.isSuccessful) {
-                    task.exception?.let {
-                        throw it
-                    }
-                }
-                storageRef.downloadUrl
-            }.addOnCompleteListener { task ->
-                if (task.isSuccessful) {
-                    // Set the imageUrl to the download URL of the uploaded image
-                    imageUrl.value = task.result.toString()
-
-                    // Update the Firestore document with the new details including the new imageUrl
-                    updateRewardDetails(rewardName)
-                } else {
-                    // Handle failure in image upload
+            val byteArray = uriToByteArray(appContext, selectedImageUri)
+
+            if (byteArray != null) {
+                val storageRef = firebaseStorage.reference.child("rewards/${System.currentTimeMillis()}.jpg")
+                storageRef.putBytes(byteArray).addOnSuccessListener {
+                    storageRef.downloadUrl.addOnSuccessListener { uri ->
+                        imageUrl.value = uri.toString()
+                        updateRewardDetails(rewardName)
+                        // Save updated data to Room DB with isUpdated = 0 since it's updated in Firestore
+                        saveRewardToLocalDB(byteArray, rewardName, isAdded = 0, isUpdated = 0)
+                    }
                 }
             }
         } else {
-            // If no new image was selected, simply update the Firestore document with the existing details
             updateRewardDetails(rewardName)
+            // Save updated data to Room DB without an image and with isUpdated = 0 since it's updated in Firestore
+            saveRewardToLocalDB(null, rewardName, isAdded = 0, isUpdated = 0)
+        }
+    }
+
+    private fun handleLocalUpdate(rewardName: String?, selectedImageUri: Uri?) {
+        val byteArray = selectedImageUri?.let { uriToByteArray(appContext, it) }
+
+        viewModelScope.launch {
+            rewardName?.let { name ->  // Use 'let' to handle the nullable rewardName
+                val currentReward = rewardDao.getRewardByName(name)
+                if (currentReward?.isAdded == 1) {
+                    // If the reward was added offline and not yet synced, don't mark it as updated.
+                    saveRewardToLocalDB(byteArray, name, isAdded = 1, isUpdated = 0)
+                } else {
+                    // If the reward was not added offline, mark it as updated.
+                    saveRewardToLocalDB(byteArray, name, isAdded = 0, isUpdated = 1)
+                }
+            }
+        }
+    }
+
+
+    private fun saveRewardToLocalDB(imageBytes: ByteArray?, rewardName: String?, isAdded: Int, isUpdated: Int) {
+        viewModelScope.launch {
+            rewardName?.let { name -> // Use 'let' to handle the nullable rewardName
+                val existingReward = rewardDao.getRewardByName(name)
+                val imageToSave = imageBytes ?: existingReward?.imageBytes
+                val imageUrlToSave = if (!isNetworkAvailable && imageBytes != null) "changed" else existingReward?.imageUrl
+
+                val reward = Reward(
+                    rewardName = name,
+                    imageBytes = imageToSave,
+                    imageUrl = imageUrlToSave,
+                    rewardDescription = rewardDescription.value ?: "",  // Provide default value in case of null
+                    redeemLimit = redeemLimit.value?.toInt() ?: 0,
+                    rewardPoints = rewardPoints.value?.toInt() ?: 0,
+                    isAdded = isAdded,
+                    isUpdated = isUpdated,
+                )
+
+                rewardDao.update(reward)
+                updateResult.postValue(true)
+
+            }
+        }
+    }
+
+
+
+    fun uriToByteArray(context: Context, imageUri: Uri): ByteArray? {
+        return context.contentResolver.openInputStream(imageUri)?.use {
+            it.readBytes()
         }
     }
 
Index: app/src/main/java/com/example/kleine/viewmodel/admin/AdminViewRewardViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.viewmodel.admin\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.net.ConnectivityManager\r\nimport android.net.Uri\r\nimport android.util.Log\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.kleine.database.Reward\r\nimport com.example.kleine.database.RewardDao\r\nimport com.example.kleine.resource.NetworkReceiver\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport kotlinx.coroutines.launch\r\n\r\nclass AdminViewRewardViewModel(private val appContext: Context, private val rewardDao: RewardDao) : ViewModel() {\r\n    val firebaseStorage = FirebaseStorage.getInstance()\r\n    val rewards = MutableLiveData<List<Reward>>()\r\n    val deleteResult = MutableLiveData<Boolean>()\r\n\r\n    private var isNetworkAvailable: Boolean = false\r\n\r\n    private val networkReceiver = NetworkReceiver(\r\n        onNetworkAvailable = {\r\n            isNetworkAvailable = true\r\n            loadDataBasedOnConnection()\r\n        },\r\n        onNetworkUnavailable = {\r\n            isNetworkAvailable = false\r\n            loadDataBasedOnConnection()\r\n        }\r\n    )\r\n\r\n    init {\r\n        // Register your NetworkReceiver here\r\n        val intentFilter = IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)\r\n        appContext.registerReceiver(networkReceiver, intentFilter)\r\n\r\n        // Manually check network availability before initial load\r\n        val connectivityManager = appContext.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n        isNetworkAvailable = connectivityManager.activeNetworkInfo?.isConnectedOrConnecting == true\r\n\r\n    }\r\n\r\n     fun loadDataBasedOnConnection() {\r\n        if (isNetworkAvailable) {\r\n            syncLocalDataToFirestore() // Sync data from Room to Firestore, if needed\r\n            fetchRewardsFromFirestore() // Fetch data from Firestore\r\n        } else {\r\n            fetchRewardsFromLocalDB() // Fetch data from Room when offline\r\n        }\r\n    }\r\n\r\n    private fun syncLocalDataToFirestore() {\r\n        viewModelScope.launch {\r\n            val unsyncedRewards = rewardDao.getUnsyncedRewards(1) // Assuming isAdded = 1 denotes unsynced data\r\n            val rewardsCollection = FirebaseFirestore.getInstance().collection(\"Rewards\")\r\n\r\n            for (reward in unsyncedRewards) {\r\n                // If the reward has an image in ByteArray format\r\n                if (reward.imageBytes != null) {\r\n                    val imageRef = firebaseStorage.reference.child(\"rewards/${System.currentTimeMillis()}.jpg\")\r\n\r\n                    imageRef.putBytes(reward.imageBytes!!).addOnSuccessListener {\r\n                        imageRef.downloadUrl.addOnSuccessListener { uri ->\r\n                            val newImageUrl = uri.toString()\r\n\r\n                            // Create a new reward object without imageBytes but with new imageUrl\r\n                            // Create a new data map to represent the reward for Firestore\r\n                            val firestoreReward = hashMapOf(\r\n                                \"rewardName\" to reward.rewardName,\r\n                                \"imageUrl\" to newImageUrl,\r\n                                \"redeemLimit\" to reward.redeemLimit,\r\n                                \"redeemedCount\" to reward.redeemedCount,\r\n                                \"rewardDescription\" to reward.rewardDescription,\r\n                                \"rewardPoints\" to reward.rewardPoints,\r\n                            )\r\n\r\n                            rewardsCollection.add(firestoreReward).addOnSuccessListener {\r\n                                // Once added successfully, mark the reward as synced in Room\r\n                                reward.isAdded = 0\r\n                                viewModelScope.launch {\r\n                                    rewardDao.update(reward)\r\n                                }\r\n                            }\r\n                        }\r\n                    }.addOnFailureListener { exception ->\r\n                        // Handle failure in image uploading\r\n                        val errorMsg = \"Error uploading image: ${exception.message}\"\r\n                        Log.e(\"AdminViewRewardVM\", errorMsg)\r\n                    }\r\n                } else {\r\n                    // If there's no image to upload, directly add the reward to Firestore\r\n                    rewardsCollection.add(reward).addOnSuccessListener {\r\n                        // Once added successfully, mark the reward as synced in Room\r\n                        reward.isAdded = 0\r\n                        viewModelScope.launch {\r\n                            rewardDao.update(reward)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun fetchRewardsFromFirestore() {\r\n        val rewardsCollection = FirebaseFirestore.getInstance().collection(\"Rewards\")\r\n        rewardsCollection.addSnapshotListener { snapshot, exception ->\r\n            if (exception != null || snapshot == null) {\r\n                return@addSnapshotListener\r\n            }\r\n\r\n            val rewardList = mutableListOf<Reward>()\r\n            for (document in snapshot.documents) {\r\n                val reward = document.toObject(Reward::class.java)\r\n                if (reward != null) {\r\n                    rewardList.add(reward)\r\n                }\r\n            }\r\n\r\n            rewards.value = rewardList\r\n        }\r\n    }\r\n\r\n    private fun fetchRewardsFromLocalDB() {\r\n        viewModelScope.launch {\r\n            val localRewards = rewardDao.getAllRewards()\r\n            rewards.value = localRewards\r\n        }\r\n    }\r\n\r\n    fun deleteReward(rewardName: String) {\r\n        val rewardsCollection = FirebaseFirestore.getInstance().collection(\"Rewards\")\r\n\r\n        // Query to find the document that has the rewardName\r\n        rewardsCollection.whereEqualTo(\"rewardName\", rewardName)\r\n            .get()\r\n            .addOnSuccessListener { querySnapshot ->\r\n                // Check if a document with that rewardName was found\r\n                if (!querySnapshot.isEmpty) {\r\n                    // Get the first (and should be the only) document that matches the query\r\n                    val document = querySnapshot.documents[0]\r\n\r\n                    // Delete the found document\r\n                    document.reference\r\n                        .delete()\r\n                        .addOnSuccessListener {\r\n                            // Log success\r\n                            deleteResult.value = true\r\n                        }\r\n                        .addOnFailureListener { e ->\r\n                            // Handle failure\r\n                            deleteResult.value = false\r\n                        }\r\n                } else {\r\n                    // No document with that rewardName found\r\n                    deleteResult.value = false\r\n                }\r\n            }\r\n            .addOnFailureListener { e ->\r\n                // Handle failure\r\n                deleteResult.value = false\r\n            }\r\n    }\r\n\r\n\r\n    override fun onCleared() {\r\n        super.onCleared()\r\n        appContext.unregisterReceiver(networkReceiver)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/viewmodel/admin/AdminViewRewardViewModel.kt b/app/src/main/java/com/example/kleine/viewmodel/admin/AdminViewRewardViewModel.kt
--- a/app/src/main/java/com/example/kleine/viewmodel/admin/AdminViewRewardViewModel.kt	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/java/com/example/kleine/viewmodel/admin/AdminViewRewardViewModel.kt	(date 1696125895937)
@@ -12,6 +12,7 @@
 import com.example.kleine.database.Reward
 import com.example.kleine.database.RewardDao
 import com.example.kleine.resource.NetworkReceiver
+import com.google.firebase.firestore.CollectionReference
 import com.google.firebase.firestore.FirebaseFirestore
 import com.google.firebase.storage.FirebaseStorage
 import kotlinx.coroutines.launch
@@ -55,6 +56,14 @@
     }
 
     private fun syncLocalDataToFirestore() {
+        viewModelScope.launch {
+            syncNewRewardsToFirestore()
+            updateFirestoreForModifiedRewards()
+        }
+    }
+
+
+    private fun syncNewRewardsToFirestore() {
         viewModelScope.launch {
             val unsyncedRewards = rewardDao.getUnsyncedRewards(1) // Assuming isAdded = 1 denotes unsynced data
             val rewardsCollection = FirebaseFirestore.getInstance().collection("Rewards")
@@ -106,6 +115,69 @@
         }
     }
 
+    private fun updateFirestoreForModifiedRewards() {
+        viewModelScope.launch {
+            val modifiedRewards = rewardDao.getModifiedRewards(1) // Assuming isUpdated = 1 denotes modified data
+            val rewardsCollection = FirebaseFirestore.getInstance().collection("Rewards")
+
+            for (reward in modifiedRewards) {
+                if (reward.imageUrl == "changed" && reward.imageBytes != null) {
+                    // Update the image on Firestore
+                    val imageRef = firebaseStorage.reference.child("rewards/${System.currentTimeMillis()}.jpg")
+
+                    imageRef.putBytes(reward.imageBytes!!).addOnSuccessListener {
+                        imageRef.downloadUrl.addOnSuccessListener { uri ->
+                            val newImageUrl = uri.toString()
+
+                            // Create a new data map to represent the reward for Firestore
+                            val firestoreReward = hashMapOf(
+                                "rewardName" to reward.rewardName,
+                                "imageUrl" to newImageUrl,
+                                "redeemLimit" to reward.redeemLimit,
+                                "redeemedCount" to reward.redeemedCount,
+                                "rewardDescription" to reward.rewardDescription,
+                                "rewardPoints" to reward.rewardPoints,
+                            )
+
+                            updateFirestoreAndResetImageUrl(rewardsCollection, reward, firestoreReward as HashMap<String, Any?>)
+                        }
+                    }.addOnFailureListener { exception ->
+                        val errorMsg = "Error uploading image: ${exception.message}"
+                        Log.e("AdminViewRewardVM", errorMsg)
+                    }
+                } else {
+                    // Don't update the image on Firestore, but other data can be updated
+                    val firestoreReward = hashMapOf(
+                        "rewardName" to reward.rewardName,
+                        "redeemLimit" to reward.redeemLimit,
+                        "redeemedCount" to reward.redeemedCount,
+                        "rewardDescription" to reward.rewardDescription,
+                        "rewardPoints" to reward.rewardPoints,
+                    )
+
+                    updateFirestoreAndResetImageUrl(rewardsCollection, reward, firestoreReward as HashMap<String, Any?>)
+                }
+            }
+        }
+    }
+
+    private fun updateFirestoreAndResetImageUrl(rewardsCollection: CollectionReference, reward: Reward, firestoreReward: HashMap<String, Any?>) {
+        rewardsCollection.whereEqualTo("rewardName", reward.rewardName)
+            .get()
+            .addOnSuccessListener { querySnapshot ->
+                if (!querySnapshot.isEmpty) {
+                    val document = querySnapshot.documents[0]
+                    document.reference.update(firestoreReward as Map<String, Any>).addOnSuccessListener {
+                        // Once updated successfully, mark the reward as not modified and imageUrl to null in Room
+                        reward.isUpdated = 0
+                        reward.imageUrl = null
+                        viewModelScope.launch {
+                            rewardDao.update(reward)
+                        }
+                    }
+                }
+            }
+    }
 
     private fun fetchRewardsFromFirestore() {
         val rewardsCollection = FirebaseFirestore.getInstance().collection("Rewards")
@@ -134,37 +206,51 @@
     }
 
     fun deleteReward(rewardName: String) {
-        val rewardsCollection = FirebaseFirestore.getInstance().collection("Rewards")
+        if(isNetworkAvailable){
+            val rewardsCollection = FirebaseFirestore.getInstance().collection("Rewards")
 
-        // Query to find the document that has the rewardName
-        rewardsCollection.whereEqualTo("rewardName", rewardName)
-            .get()
-            .addOnSuccessListener { querySnapshot ->
-                // Check if a document with that rewardName was found
-                if (!querySnapshot.isEmpty) {
-                    // Get the first (and should be the only) document that matches the query
-                    val document = querySnapshot.documents[0]
+            // Query to find the document that has the rewardName
+            rewardsCollection.whereEqualTo("rewardName", rewardName)
+                .get()
+                .addOnSuccessListener { querySnapshot ->
+                    // Check if a document with that rewardName was found
+                    if (!querySnapshot.isEmpty) {
+                        // Get the first (and should be the only) document that matches the query
+                        val document = querySnapshot.documents[0]
 
-                    // Delete the found document
-                    document.reference
-                        .delete()
-                        .addOnSuccessListener {
-                            // Log success
-                            deleteResult.value = true
-                        }
-                        .addOnFailureListener { e ->
-                            // Handle failure
-                            deleteResult.value = false
-                        }
-                } else {
-                    // No document with that rewardName found
-                    deleteResult.value = false
-                }
-            }
-            .addOnFailureListener { e ->
-                // Handle failure
-                deleteResult.value = false
-            }
+                        // Delete the found document
+                        document.reference
+                            .delete()
+                            .addOnSuccessListener {
+                                // Log success
+                                deleteResult.value = true
+
+                                // Mark reward as deleted in RoomDB
+                                viewModelScope.launch {
+                                    val existingReward = rewardDao.getRewardByName(rewardName)
+                                    if(existingReward != null) {
+                                        existingReward.isDeleted = 1
+                                        rewardDao.update(existingReward)
+                                    }
+                                }
+                            }
+                            .addOnFailureListener { e ->
+                                // Handle failure
+                                deleteResult.value = false
+                            }
+                    } else {
+                        // No document with that rewardName found
+                        deleteResult.value = false
+                    }
+                }
+                .addOnFailureListener { e ->
+                    // Handle failure
+                    deleteResult.value = false
+                }
+        } else {
+            deleteResult.value = false
+        }
+
     }
 
 
Index: app/src/main/java/com/example/kleine/viewmodel/reward/RedeemRewardViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.viewmodel.reward\r\n\r\nimport android.app.Application\r\nimport android.util.Log\r\nimport androidx.lifecycle.AndroidViewModel\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.kleine.database.HelpDatabase\r\nimport com.example.kleine.database.RewardHistory\r\nimport com.example.kleine.model.Reward\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.FieldValue\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.firestore.FirebaseFirestoreException\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\n\r\nclass RedeemRewardViewModel(application: Application) : AndroidViewModel(application) {\r\n    val rewards = MutableLiveData<List<Reward>>()\r\n    val userPoints = MutableLiveData<Int>()\r\n    val redemptionSuccessful = MutableLiveData<Boolean>()\r\n    val noEnoughPoints = MutableLiveData<Boolean>()\r\n\r\n    private val firestore = FirebaseFirestore.getInstance()\r\n    private val userId = FirebaseAuth.getInstance().currentUser?.uid\r\n\r\n    init {\r\n        loadRewards()\r\n        loadUserPoints()\r\n    }\r\n\r\n     fun loadRewards() {\r\n        val rewardsCollection = firestore.collection(\"Rewards\")\r\n\r\n        rewardsCollection.addSnapshotListener { snapshot, exception ->\r\n            if (exception != null || snapshot == null) {\r\n                // Handle the error\r\n                return@addSnapshotListener\r\n            }\r\n\r\n            val rewardList = mutableListOf<Reward>()\r\n            for (document in snapshot.documents) {\r\n                val reward = document.toObject(Reward::class.java)\r\n                if (reward != null && reward.redeemedCount < reward.redeemLimit) {\r\n                    reward.documentId = document.id // Set the documentId field\r\n                    rewardList.add(reward)\r\n                }\r\n            }\r\n\r\n            rewards.value = rewardList\r\n        }\r\n    }\r\n\r\n    private fun loadUserPoints() {\r\n        userId?.let {\r\n            val userDocument = firestore.collection(\"users\").document(it)\r\n\r\n            userDocument.addSnapshotListener { snapshot, exception ->\r\n                if (exception != null || snapshot == null) {\r\n                    // Handle the error\r\n                    return@addSnapshotListener\r\n                }\r\n\r\n                val points = snapshot.getLong(\"points\")?.toInt() ?: 0\r\n                userPoints.value = points\r\n            }\r\n        }\r\n    }\r\n\r\n    fun redeemReward(selectedReward: Reward) {\r\n        val userId = FirebaseAuth.getInstance().currentUser?.uid ?: return\r\n        val userDocument = firestore.collection(\"users\").document(userId)\r\n\r\n        firestore.runTransaction { transaction ->\r\n            // 1. First perform all read operations\r\n            val userSnapshot = transaction.get(userDocument)\r\n            val points = userSnapshot.getLong(\"points\")?.toInt() ?: 0\r\n\r\n            if (points < selectedReward.rewardPoints) {\r\n                // Not enough points, return or throw an exception\r\n                throw FirebaseFirestoreException(\"Not enough points\", FirebaseFirestoreException.Code.ABORTED)\r\n            }\r\n\r\n            val rewardDocument = firestore.collection(\"Rewards\").document(selectedReward.documentId)\r\n            val redeemedCount = transaction.get(rewardDocument).getLong(\"redeemedCount\")?.toInt() ?: 0\r\n\r\n            // 2. Then perform all write operations\r\n            transaction.update(userDocument, \"points\", points - selectedReward.rewardPoints)\r\n            transaction.update(rewardDocument, \"redeemedCount\", redeemedCount + 1)\r\n\r\n            // Insert reward history into Room\r\n            val rewardHistory = RewardHistory(\r\n                userDocId = userId,\r\n                redeemedDate = System.currentTimeMillis(), // Current timestamp\r\n                rewardName = selectedReward.rewardName,\r\n                rewardDetails = selectedReward.rewardDescription\r\n            )\r\n            insertRewardHistory(rewardHistory)\r\n\r\n            val historyData = mapOf(\r\n                \"rewardName\" to selectedReward.rewardName,\r\n                \"redeemedDate\" to FieldValue.serverTimestamp(),\r\n                \"rewardDetails\" to selectedReward.rewardDescription\r\n            )\r\n            transaction.set(userDocument.collection(\"rewardHistory\").document(), historyData)\r\n        }.addOnSuccessListener {\r\n            // Handle success\r\n            redemptionSuccessful.value = true\r\n        }.addOnFailureListener { exception ->\r\n            // Handle failure\r\n            Log.e(\"RedeemReward\", \"Redemption Failed\", exception)\r\n            if (exception is FirebaseFirestoreException && exception.code == FirebaseFirestoreException.Code.ABORTED) {\r\n                noEnoughPoints.value = true\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun insertRewardHistory(rewardHistory: RewardHistory) {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            val dao = HelpDatabase.getDatabase(getApplication()).rewardHistoryDao()\r\n            dao.insertRewardHistory(rewardHistory)\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/viewmodel/reward/RedeemRewardViewModel.kt b/app/src/main/java/com/example/kleine/viewmodel/reward/RedeemRewardViewModel.kt
--- a/app/src/main/java/com/example/kleine/viewmodel/reward/RedeemRewardViewModel.kt	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/java/com/example/kleine/viewmodel/reward/RedeemRewardViewModel.kt	(date 1696128427317)
@@ -106,6 +106,9 @@
         }.addOnSuccessListener {
             // Handle success
             redemptionSuccessful.value = true
+
+            // Update redeemed count in Room database
+            updateRedeemedCountInRoom(selectedReward.rewardName)
         }.addOnFailureListener { exception ->
             // Handle failure
             Log.e("RedeemReward", "Redemption Failed", exception)
@@ -115,6 +118,14 @@
         }
     }
 
+    private fun updateRedeemedCountInRoom(rewardName: String) {
+        viewModelScope.launch(Dispatchers.IO) {
+            val dao = HelpDatabase.getDatabase(getApplication()).rewardDao()
+            dao.incrementRedeemedCount(rewardName)
+        }
+    }
+
+
     private fun insertRewardHistory(rewardHistory: RewardHistory) {
         viewModelScope.launch(Dispatchers.IO) {
             val dao = HelpDatabase.getDatabase(getApplication()).rewardHistoryDao()
Index: app/src/main/java/com/example/kleine/fragments/reward/RedeemRewardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.reward\r\n\r\nimport android.content.Context\r\nimport android.content.IntentFilter\r\nimport android.net.ConnectivityManager\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.example.kleine.R\r\nimport com.example.kleine.adapters.recyclerview.RedeemRewardAdapter\r\nimport com.example.kleine.databinding.FragmentRedeemRewardBinding\r\nimport com.example.kleine.model.Address\r\nimport com.example.kleine.model.Reward\r\nimport com.example.kleine.resource.NetworkReceiver\r\nimport com.example.kleine.util.Constants.Companion.UPDATE_ADDRESS_FLAG\r\nimport com.example.kleine.viewmodel.reward.RedeemRewardViewModel\r\n\r\n// TODO: Rename parameter arguments, choose names that match\r\n// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\r\nprivate const val ARG_PARAM1 = \"param1\"\r\nprivate const val ARG_PARAM2 = \"param2\"\r\n\r\n/**\r\n * A simple [Fragment] subclass.\r\n * Use the [RedeemRewardFragment.newInstance] factory method to\r\n * create an instance of this fragment.\r\n */\r\nclass RedeemRewardFragment : Fragment() {\r\n    private lateinit var binding: FragmentRedeemRewardBinding\r\n    private lateinit var viewModel: RedeemRewardViewModel\r\n    private var isNetworkAvailable: Boolean = false\r\n    private var tryAgainButtonClicked = false\r\n\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_redeem_reward, container,false)\r\n\r\n        viewModel = ViewModelProvider(this).get(RedeemRewardViewModel::class.java)\r\n\r\n        // This is used so that the binding can observe LiveData updates\r\n        binding.lifecycleOwner = viewLifecycleOwner\r\n\r\n        val selectedAddress: Address? = arguments?.getParcelable(\"address\")\r\n        selectedAddress?.let {\r\n            binding.addressTextView.text = it.addressTitle + \" \" + it.street + \" \" + it.city + \" \" + it.state\r\n        }\r\n\r\n\r\n        // Initialize adapter with an empty list and set it to RecyclerView\r\n        val adapter = RedeemRewardAdapter(emptyList()) { selectedReward ->\r\n            handleRedemption(selectedReward)\r\n        }\r\n        binding.voucherRecyclerView.adapter = adapter\r\n\r\n        viewModel.rewards.observe(viewLifecycleOwner, Observer { rewards ->\r\n            if (isNetworkAvailable) {\r\n                val adapter = RedeemRewardAdapter(rewards) { selectedReward ->\r\n                    handleRedemption(selectedReward)\r\n                }\r\n                binding.voucherRecyclerView.adapter = adapter\r\n                binding.voucherRecyclerView.visibility = View.VISIBLE\r\n                binding.textViewTotalPoints.visibility = View.VISIBLE\r\n                binding.labelShippingVoucherTextView.visibility = View.VISIBLE\r\n                binding.addressBar.visibility = View.VISIBLE\r\n                binding.noInternetLayout.visibility = View.GONE\r\n            } else {\r\n                binding.voucherRecyclerView.visibility = View.GONE\r\n                binding.textViewTotalPoints.visibility = View.GONE\r\n                binding.labelShippingVoucherTextView.visibility = View.GONE\r\n                binding.addressBar.visibility = View.GONE\r\n                binding.noInternetLayout.visibility = View.VISIBLE\r\n            }\r\n        })\r\n\r\n        binding.tryAgainButton.setOnClickListener {\r\n            tryAgainButtonClicked = true\r\n            checkAndUpdateNetworkAvailability()\r\n            viewModel.loadRewards()\r\n        }\r\n\r\n        viewModel.userPoints.observe(viewLifecycleOwner, Observer { points ->\r\n            binding.textViewTotalPoints.text = getString(R.string.total_points, points)\r\n        })\r\n\r\n        viewModel.redemptionSuccessful.observe(viewLifecycleOwner, Observer { isSuccessful ->\r\n            if (isSuccessful) {\r\n                Toast.makeText(context, \"Reward redeemed successfully!\", Toast.LENGTH_SHORT).show()\r\n                viewModel.redemptionSuccessful.value = false // Reset the value to prevent showing the Toast again on configuration changes\r\n            }\r\n        })\r\n\r\n        viewModel.noEnoughPoints.observe(viewLifecycleOwner, Observer { isSuccessful ->\r\n            if (isSuccessful) {\r\n                Toast.makeText(context, \"No Enough Points!\", Toast.LENGTH_SHORT).show()\r\n                viewModel.noEnoughPoints.value = false // Reset the value to prevent showing the Toast again on configuration changes\r\n            }\r\n        })\r\n\r\n        binding.addressBar.setOnClickListener {\r\n            val bundle = Bundle()\r\n            bundle.putString(\"clickFlag\", UPDATE_ADDRESS_FLAG)\r\n            findNavController().navigate(R.id.action_rewardFragment_to_billingFragment, bundle)\r\n        }\r\n\r\n        return binding.root\r\n    }\r\n\r\n    private fun handleRedemption(selectedReward: Reward) {\r\n        // Check network availability before redeeming\r\n        checkAndUpdateNetworkAvailability()\r\n\r\n        if (!isNetworkAvailable) {\r\n//            Toast.makeText(context, \"No internet connection. Please try again.\", Toast.LENGTH_SHORT).show()\r\n            // Inflate the layout for the dialog\r\n            val inflater = layoutInflater\r\n            val dialogView = inflater.inflate(R.layout.no_internet_dialog, null)\r\n\r\n            // Create the AlertDialog\r\n            val alertDialog = AlertDialog.Builder(requireContext())\r\n                .setView(dialogView)\r\n                .create()\r\n\r\n            // Set up the click listener for the \"OK\" button in the dialog\r\n            val btnOk = dialogView.findViewById<Button>(R.id.btn_ok)\r\n            btnOk.setOnClickListener {\r\n                alertDialog.dismiss()\r\n            }\r\n\r\n            alertDialog.show()\r\n            return\r\n        }\r\n\r\n        val userPoints = viewModel.userPoints.value ?: 0\r\n        if (userPoints >= selectedReward.rewardPoints) {\r\n            viewModel.redeemReward(selectedReward)\r\n        } else {\r\n            Toast.makeText(context, \"You do not have enough points to redeem this reward.\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n\r\n    private fun updateLayoutVisibility() {\r\n        if (isNetworkAvailable) {\r\n            binding.voucherRecyclerView.visibility = View.VISIBLE\r\n            binding.textViewTotalPoints.visibility = View.VISIBLE\r\n            binding.labelShippingVoucherTextView.visibility = View.VISIBLE\r\n            binding.addressBar.visibility = View.VISIBLE\r\n            binding.noInternetLayout.visibility = View.GONE\r\n        } else {\r\n            binding.voucherRecyclerView.visibility = View.GONE\r\n            binding.textViewTotalPoints.visibility = View.GONE\r\n            binding.labelShippingVoucherTextView.visibility = View.GONE\r\n            binding.addressBar.visibility = View.GONE\r\n            binding.noInternetLayout.visibility = View.VISIBLE\r\n        }\r\n    }\r\n\r\n    private fun checkAndUpdateNetworkAvailability() {\r\n        val connectivityManager = context?.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n        val activeNetwork = connectivityManager.activeNetworkInfo\r\n\r\n        isNetworkAvailable = activeNetwork?.isConnectedOrConnecting == true\r\n        if (tryAgainButtonClicked) {\r\n            updateLayoutVisibility()\r\n            tryAgainButtonClicked = false\r\n        }\r\n    }\r\n\r\n    // Receiver callbacks\r\n    private val networkReceiver = NetworkReceiver(\r\n        onNetworkAvailable = {\r\n            // Update isNetworkAvailable but don't call updateLayoutVisibility() directly.\r\n            isNetworkAvailable = true\r\n        },\r\n        onNetworkUnavailable = {\r\n            // Update isNetworkAvailable but don't call updateLayoutVisibility() directly.\r\n            isNetworkAvailable = false\r\n        }\r\n    )\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        val filter = IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)\r\n        requireContext().registerReceiver(networkReceiver, filter)\r\n        checkAndUpdateNetworkAvailability()\r\n        updateLayoutVisibility()\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        requireContext().unregisterReceiver(networkReceiver)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/reward/RedeemRewardFragment.kt b/app/src/main/java/com/example/kleine/fragments/reward/RedeemRewardFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/reward/RedeemRewardFragment.kt	(revision 24327a553a911da5adbf2ebe235612d5277b8938)
+++ b/app/src/main/java/com/example/kleine/fragments/reward/RedeemRewardFragment.kt	(date 1696129300987)
@@ -141,7 +141,11 @@
 
         val userPoints = viewModel.userPoints.value ?: 0
         if (userPoints >= selectedReward.rewardPoints) {
-            viewModel.redeemReward(selectedReward)
+            if (binding.addressTextView.text == "Select Address"){
+                Toast.makeText(context, "Please select address", Toast.LENGTH_SHORT).show()
+            } else {
+                viewModel.redeemReward(selectedReward)
+            }
         } else {
             Toast.makeText(context, "You do not have enough points to redeem this reward.", Toast.LENGTH_SHORT).show()
         }
