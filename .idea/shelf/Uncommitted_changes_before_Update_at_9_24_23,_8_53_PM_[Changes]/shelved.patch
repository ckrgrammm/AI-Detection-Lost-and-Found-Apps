Index: app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.adapters.recyclerview\n\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.navigation.NavDirections\nimport androidx.navigation.findNavController\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.R\nimport com.example.kleine.databinding.ProductLayoutRowBinding\nimport com.example.kleine.model.Material\nimport com.google.firebase.storage.FirebaseStorage\n\nclass MaterialAdapter : RecyclerView.Adapter<MaterialAdapter.MaterialViewHolder>() {\n\n    var onItemClick: ((Material) -> Unit)? = null\n\n    inner class MaterialViewHolder(val binding: ProductLayoutRowBinding) : RecyclerView.ViewHolder(binding.root) {\n        init {\n            itemView.setOnClickListener {\n                val material = differ.currentList[adapterPosition]\n                val actionId = R.id.action_homeFragment_to_materialDetailsFragment\n                it.findNavController().navigate(actionId)\n            }\n        }\n    }\n\n    private val diffCallback = object : DiffUtil.ItemCallback<Material>() {\n        override fun areItemsTheSame(oldItem: Material, newItem: Material): Boolean {\n            return oldItem == newItem\n        }\n\n        override fun areContentsTheSame(oldItem: Material, newItem: Material): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallback)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MaterialViewHolder {\n        Log.d(\"MaterialAdapter\", \"onCreateViewHolder called\")\n        return MaterialViewHolder(\n            ProductLayoutRowBinding.inflate(\n                LayoutInflater.from(parent.context),\n                parent,\n                false\n            )\n        )\n    }\n\n\n    override fun onBindViewHolder(holder: MaterialViewHolder, position: Int) {\n        Log.d(\"MaterialAdapter\", \"onBindViewHolder called for position $position\")\n\n        val material = differ.currentList[position]\n        holder.binding.apply {\n            productModel = material\n\n            val storage = FirebaseStorage.getInstance()\n            val storageRef = storage.reference\n\n            if (material.imageUrl.isNotEmpty()) {\n                val pathToImage = \"materialImages/${material.imageUrl}\"\n                Log.d(\"MaterialAdapter\", \"Dynamic Path to image: $pathToImage\")\n                Log.d(\"MaterialAdapter\", \"Material image URL: ${material.imageUrl}\")\n\n                val pathReference = storageRef.child(pathToImage)\n\n                pathReference.downloadUrl.addOnSuccessListener { uri ->\n                    Log.d(\"MaterialAdapter\", \"Successfully fetched URI: $uri\")\n                    Glide.with(holder.itemView).load(uri).into(imageView)\n                }.addOnFailureListener { exception ->\n                    Log.e(\"MaterialAdapter\", \"Failed to load image\", exception)\n                    imageView.setImageResource(R.drawable.default_book_logo)\n                }\n            } else {\n                imageView.setImageResource(R.drawable.default_book_logo)\n            }\n        }\n    }\n\n\n\n\n    override fun getItemCount(): Int {\n        val count = differ.currentList.size\n        Log.d(\"MaterialAdapter\", \"Item count: $count\")\n        return count\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt b/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt
--- a/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt	(date 1695546116735)
@@ -2,6 +2,7 @@
 
 import android.util.Log
 import android.view.LayoutInflater
+import android.view.View
 import android.view.ViewGroup
 import androidx.navigation.NavDirections
 import androidx.navigation.findNavController
@@ -11,6 +12,7 @@
 import com.bumptech.glide.Glide
 import com.example.kleine.R
 import com.example.kleine.databinding.ProductLayoutRowBinding
+import com.example.kleine.fragments.shopping.HomeFragmentDirections
 import com.example.kleine.model.Material
 import com.google.firebase.storage.FirebaseStorage
 
@@ -19,13 +21,7 @@
     var onItemClick: ((Material) -> Unit)? = null
 
     inner class MaterialViewHolder(val binding: ProductLayoutRowBinding) : RecyclerView.ViewHolder(binding.root) {
-        init {
-            itemView.setOnClickListener {
-                val material = differ.currentList[adapterPosition]
-                val actionId = R.id.action_homeFragment_to_materialDetailsFragment
-                it.findNavController().navigate(actionId)
-            }
-        }
+
     }
 
     private val diffCallback = object : DiffUtil.ItemCallback<Material>() {
@@ -38,6 +34,7 @@
         }
     }
 
+
     val differ = AsyncListDiffer(this, diffCallback)
 
     override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MaterialViewHolder {
@@ -51,6 +48,16 @@
         )
     }
 
+    // Define a helper function for debounced clicks
+    fun View.setDebouncedOnClickListener(debounceTime: Long = 500L, onClick: (view: View) -> Unit) {
+        var lastClickTime = 0L
+        this.setOnClickListener {
+            if (System.currentTimeMillis() - lastClickTime >= debounceTime) {
+                onClick(it)
+                lastClickTime = System.currentTimeMillis()
+            }
+        }
+    }
 
     override fun onBindViewHolder(holder: MaterialViewHolder, position: Int) {
         Log.d("MaterialAdapter", "onBindViewHolder called for position $position")
@@ -67,6 +74,7 @@
                 Log.d("MaterialAdapter", "Dynamic Path to image: $pathToImage")
                 Log.d("MaterialAdapter", "Material image URL: ${material.imageUrl}")
 
+
                 val pathReference = storageRef.child(pathToImage)
 
                 pathReference.downloadUrl.addOnSuccessListener { uri ->
@@ -77,13 +85,16 @@
                     imageView.setImageResource(R.drawable.default_book_logo)
                 }
             } else {
-                imageView.setImageResource(R.drawable.default_book_logo)
+                Log.e("MaterialAdapter", "Failed to load image because of empty")
             }
         }
+        // Set an onClick listener for the item
+        holder.itemView.setDebouncedOnClickListener {
+            Log.d("MaterialAdapter", "Navigating with Material ID: ${material.id}")
+            val action = HomeFragmentDirections.actionHomeFragmentToMaterialDetailsFragment(material)
+            it.findNavController().navigate(action)
+        }
     }
-
-
-
 
     override fun getItemCount(): Int {
         val count = differ.currentList.size
Index: app/src/main/java/com/example/kleine/model/Material.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.model\n\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.parcelize.Parcelize\n\n@Parcelize\n@Entity(tableName = \"material\")\ndata class Material(\n    @PrimaryKey(autoGenerate = true) // ID as auto increment\n    val desc: String = \"\",\n    val name: String = \"\", // Course name\n    val pass: Int = 0, // Number of students who passed this course/subject\n    val rating: Float = 0f, // Rating (1 - 5)\n    val requirement: String = \"\", // Requirement (e.g., Free)\n    val status: String = \"\", // Status (Available/Unavailable)\n    val view: Int = 0, // Number of students who viewed this course/subject\n    val imageUrl: String = \"\", // URL for the course banner\n    val enroll: Int = 0, // Number of students enrolled in this course/subject\n    val partnershipsID: String? = null  // partnership ID\n\n): Parcelable\n\n@Parcelize\ndata class MaterialData(\n    var id: String = \"\",\n    var name: String = \"\",\n    var desc: String = \"\",\n    var requirement: String = \"\",\n    var rating: Double = 0.0,\n    var imageUrl: String = \"\"\n): Parcelable {\n    constructor() : this(\"\", \"\", \"\", \"\", 0.0, \"\")\n}\n\n@Parcelize\ndata class MaterialEngageData(\n    val name: String = \"\",\n    val view: Long = 0,\n    val enroll: Long = 0,\n    val graduate: Long = 0,\n    val imageUrl: String = \"\"\n): Parcelable {\n    constructor() : this(\"\", 0,0,0,\"\")\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/model/Material.kt b/app/src/main/java/com/example/kleine/model/Material.kt
--- a/app/src/main/java/com/example/kleine/model/Material.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/model/Material.kt	(date 1695546116727)
@@ -8,7 +8,8 @@
 @Parcelize
 @Entity(tableName = "material")
 data class Material(
-    @PrimaryKey(autoGenerate = true) // ID as auto increment
+//    @PrimaryKey(autoGenerate = true) // ID as auto increment
+    var id: String = "",
     val desc: String = "",
     val name: String = "", // Course name
     val pass: Int = 0, // Number of students who passed this course/subject
@@ -16,9 +17,9 @@
     val requirement: String = "", // Requirement (e.g., Free)
     val status: String = "", // Status (Available/Unavailable)
     val view: Int = 0, // Number of students who viewed this course/subject
-    val imageUrl: String = "", // URL for the course banner
+    var imageUrl: String = "", // URL for the course banner
     val enroll: Int = 0, // Number of students enrolled in this course/subject
-    val partnershipsID: String? = null  // partnership ID
+    val partnershipsID: String = ""  // User's document ID
 
 ): Parcelable
 
@@ -43,4 +44,10 @@
     val imageUrl: String = ""
 ): Parcelable {
     constructor() : this("", 0,0,0,"")
-}
\ No newline at end of file
+}
+
+@Parcelize
+data class CourseDocument(
+    val documentUrl: String=""
+    // Add other fields as needed
+):Parcelable
\ No newline at end of file
Index: app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.shopping\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport com.example.kleine.databinding.FragmentProductPreviewBinding\nimport com.example.kleine.model.Material\n\nclass MaterialPreviewFragment : Fragment() {\n    private var _binding: FragmentProductPreviewBinding? = null\n    private val binding get() = _binding!!\n    private var material: Material? = null\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        _binding = FragmentProductPreviewBinding.inflate(inflater, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        // Retrieve the passed argument\n        material = arguments?.getParcelable(\"material\")\n\n        // Check if the material is not null\n        if (material != null) {\n            // Bind the material data to the views using data binding\n            binding.productModel = material\n        } else {\n            // Handle the case where material is null\n            // For instance, you can show a message to the user or navigate back\n            fragmentManager?.popBackStack()\n\n        }\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt	(date 1695546116720)
@@ -1,18 +1,35 @@
 package com.example.kleine.fragments.shopping
 
 import android.os.Bundle
+import android.util.Log
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
+import android.widget.Toast
 import androidx.fragment.app.Fragment
+import androidx.navigation.Navigation.findNavController
+import androidx.navigation.fragment.findNavController
+import androidx.viewpager2.widget.ViewPager2
+import com.example.kleine.R
+import com.example.kleine.adapters.viewpager.ViewPager2Images
 import com.example.kleine.databinding.FragmentProductPreviewBinding
+import com.example.kleine.model.Enrollment
 import com.example.kleine.model.Material
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.FirebaseFirestore
+
 
 class MaterialPreviewFragment : Fragment() {
     private var _binding: FragmentProductPreviewBinding? = null
     private val binding get() = _binding!!
     private var material: Material? = null
 
+    private val viewPagerAdapter = ViewPager2Images()
+
+    private val firebaseAuth: FirebaseAuth = FirebaseAuth.getInstance()
+    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()
+
+
     override fun onCreateView(
         inflater: LayoutInflater, container: ViewGroup?,
         savedInstanceState: Bundle?
@@ -23,21 +40,77 @@
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
+        onEnrollClick()
+
+
+        // Set up the ViewPager2
+        binding.viewpager2Images.adapter = viewPagerAdapter
 
         // Retrieve the passed argument
         material = arguments?.getParcelable("material")
 
-        // Check if the material is not null
-        if (material != null) {
-            // Bind the material data to the views using data binding
-            binding.productModel = material
-        } else {
-            // Handle the case where material is null
-            // For instance, you can show a message to the user or navigate back
-            fragmentManager?.popBackStack()
+        material?.let { mat ->
+            binding.productModel = mat
+
+            // Convert the single imageUrl into a list and submit to the adapter
+            viewPagerAdapter.differ.submitList(listOf(mat.imageUrl))
 
+        } ?: run {
+            Log.e("MaterialPreviewFragment", "Material is null!")
         }
+
+        // Assuming you have one image per material for now
+        // If there are multiple images, then update this value accordingly
+        // binding.circleIndicator.indicatorItemCount = 1
+        // Update: Commented the above line as it might not be available based on the library version.
+
+        binding.viewpager2Images.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {
+            override fun onPageSelected(position: Int) {
+                super.onPageSelected(position)
+                // Update the CircleIndicator's selected position
+                // You might need to check if such a method is available in your library version
+                // binding.circleIndicator.setSelection(position)
+                // Update: Commented the above line as it might not be available based on the library version.
+            }
+        })
     }
+
+
+
+    private fun onEnrollClick() {
+        binding.btnEnroll.setOnClickListener {
+            Log.d("MaterialPreviewFragment", "Button Clicked")
+
+            // Get the current user ID
+            val userId = firebaseAuth.currentUser?.uid ?: run {
+                Toast.makeText(context, "User not logged in!", Toast.LENGTH_SHORT).show()
+                return@setOnClickListener
+            }
+
+            // Get the selected material ID
+            val materialId = material?.id ?: run {
+                Toast.makeText(context, "Material ID is null!", Toast.LENGTH_SHORT).show()
+                return@setOnClickListener
+            }
+
+            // Create a new Enrollment object
+            val enrollment = Enrollment(userId = userId, materialId = materialId)
+
+            // Save the enrollment to Firebase Firestore
+            firestore.collection("enrollments").add(enrollment)
+                .addOnSuccessListener {
+                    Toast.makeText(context, "Successfully enrolled in the course!", Toast.LENGTH_SHORT).show()
+
+                    // Navigate back to HomeFragment
+                    findNavController().navigateUp()
+                }
+                .addOnFailureListener { exception ->
+                    Log.w("MaterialPreviewFragment", "Error adding document", exception)
+                    Toast.makeText(context, "Error enrolling in the course!", Toast.LENGTH_SHORT).show()
+                }
+        }
+    }
+
 
     override fun onDestroyView() {
         super.onDestroyView()
Index: app/src/main/java/com/example/kleine/fragments/shopping/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.shopping\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport androidx.navigation.fragment.findNavController\nimport androidx.navigation.fragment.navArgs\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.MaterialAdapter\nimport com.example.kleine.adapters.viewpager.HomeViewpagerAdapter\nimport com.example.kleine.databinding.FragmentHomeBinding\n\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport com.google.android.material.snackbar.Snackbar\nimport com.google.android.material.tabs.TabLayoutMediator\nimport com.google.firebase.firestore.QuerySnapshot\nimport com.example.kleine.model.Material\nimport com.example.kleine.resource.Resource\n\n\n\nclass HomeFragment : Fragment() {\n    val TAG = \"HomeFragment\"\n    private lateinit var viewModel: ShoppingViewModel\n    private lateinit var binding: FragmentHomeBinding\n\n\n    private lateinit var materialList: List<Material>\n    private lateinit var materialAdapter: MaterialAdapter\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n    }\n    \n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentHomeBinding.inflate(layoutInflater, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n\n        binding.frameAdd.setOnClickListener {\n//            findNavController().navigate(R.id.action_homeFragment_to_joinPartnerFragment)\n        }\n\n        binding.fragmeMicrohpone.setOnClickListener {\n            val snackBar = requireActivity().findViewById<CoordinatorLayout>(R.id.snackBar_coordinator)\n            Snackbar.make(snackBar,resources.getText(R.string.g_coming_soon),Snackbar.LENGTH_SHORT).show()\n        }\n\n\n\n        // Initialize RecyclerView and Adapter\n        materialAdapter = MaterialAdapter()  // No arguments here\n        binding.productListRecycler.adapter = materialAdapter\n        binding.productListRecycler.layoutManager = LinearLayoutManager(context)\n\n        // Fetch materials from ViewModel and observe LiveData\n        viewModel.getMaterials()  // This will update LiveData in ViewModel\n\n        viewModel.materialsLiveData.observe(viewLifecycleOwner) { resource ->\n            when (resource.status) {\n                Resource.Status.SUCCESS -> {\n                    Log.d(TAG, \"Fetched materials successfully. Item count: ${resource.data?.size}\")\n                    materialAdapter.differ.submitList(resource.data)\n                }\n\n                Resource.Status.ERROR -> {\n                    Log.e(TAG, \"Error fetching materials: ${resource.message}\")\n                }\n\n                Resource.Status.LOADING -> {\n                    Log.d(TAG, \"Loading materials\")\n                }\n            }\n        }\n\n    }\n\n\n\n\n\n    override fun onResume() {\n        super.onResume()\n        val bottomNavigation =\n            requireActivity().findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNavigation.visibility = View.VISIBLE\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/HomeFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/HomeFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/shopping/HomeFragment.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/fragments/shopping/HomeFragment.kt	(date 1695542094997)
@@ -30,9 +30,6 @@
     val TAG = "HomeFragment"
     private lateinit var viewModel: ShoppingViewModel
     private lateinit var binding: FragmentHomeBinding
-
-
-    private lateinit var materialList: List<Material>
     private lateinit var materialAdapter: MaterialAdapter
 
 
@@ -56,7 +53,7 @@
 
 
         binding.frameAdd.setOnClickListener {
-//            findNavController().navigate(R.id.action_homeFragment_to_joinPartnerFragment)
+            findNavController().navigate(R.id.action_homeFragment_to_addMaterialFragment)
         }
 
         binding.fragmeMicrohpone.setOnClickListener {
@@ -64,8 +61,6 @@
             Snackbar.make(snackBar,resources.getText(R.string.g_coming_soon),Snackbar.LENGTH_SHORT).show()
         }
 
-
-
         // Initialize RecyclerView and Adapter
         materialAdapter = MaterialAdapter()  // No arguments here
         binding.productListRecycler.adapter = materialAdapter
@@ -92,8 +87,17 @@
         }
 
     }
-
-
+    private fun onItemClick() {
+        materialAdapter.onItemClick = { material ->
+            if (material != null) {
+                val bundle = Bundle()
+                bundle.putParcelable("material", material)
+                findNavController().navigate(R.id.action_allOrdersFragment_to_materialDetailsFragment, bundle)
+            } else {
+                Log.e(TAG, "Material object is null")
+            }
+        }
+    }
 
 
 
Index: app/src/main/java/com/example/kleine/viewmodel/material/MaterialViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.viewmodel.material\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.kleine.model.MaterialData\nimport com.example.kleine.model.MaterialEngageData\nimport com.google.firebase.firestore.FirebaseFirestore\n\nclass MaterialViewModel : ViewModel() {\n    val materialEngageData = MutableLiveData<MaterialEngageData?>()\n    private val _materialList = MutableLiveData<List<MaterialData>>()\n    val materialList: LiveData<List<MaterialData>> = _materialList\n\n    fun fetchMaterialsData() {\n        val db = FirebaseFirestore.getInstance()\n        db.collection(\"Materials\")\n            .get()\n            .addOnSuccessListener { result ->\n                val tempList = ArrayList<MaterialData>()\n                for (document in result) {\n                    val id = document.id\n                    val materialName = document.getString(\"name\") ?: \"\"\n                    val description = document.getString(\"desc\") ?: \"\"\n                    val requirement = document.getString(\"requirement\") ?: \"\"\n                    val rating = document.getDouble(\"rating\") ?: 0.0\n                    val imageUrl = document.getString(\"imageUrl\") ?: \"\"\n                    tempList.add(MaterialData(id, materialName, description, requirement, rating, imageUrl))\n                }\n                _materialList.value = tempList\n            }\n    }\n    fun fetchMaterialsEngageData(documentId: String) {\n        val db = FirebaseFirestore.getInstance()\n        db.collection(\"Materials\").document(documentId)\n            .get()\n            .addOnSuccessListener { document ->\n                if (document != null) {\n                    val materialOverview = MaterialEngageData(\n                        document.getString(\"name\") ?: \"\",\n                        document.getLong(\"view\") ?: 0,\n                        document.getLong(\"enroll\") ?: 0,\n                        document.getLong(\"graduate\") ?: 0,\n                        document.getString(\"imageUrl\") ?: \"\"\n                    )\n                    materialEngageData.postValue(materialOverview)\n                }\n            }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/viewmodel/material/MaterialViewModel.kt b/app/src/main/java/com/example/kleine/viewmodel/material/MaterialViewModel.kt
--- a/app/src/main/java/com/example/kleine/viewmodel/material/MaterialViewModel.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/viewmodel/material/MaterialViewModel.kt	(date 1695559701077)
@@ -1,17 +1,27 @@
 package com.example.kleine.viewmodel.material
 
+import android.net.Uri
+import android.util.Log
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.ViewModel
+import com.example.kleine.model.CourseDocument
+import com.example.kleine.model.Material
 import com.example.kleine.model.MaterialData
 import com.example.kleine.model.MaterialEngageData
+import com.google.android.gms.tasks.Task
+import com.google.android.gms.tasks.Tasks
 import com.google.firebase.firestore.FirebaseFirestore
+import com.google.firebase.storage.FirebaseStorage
 
 class MaterialViewModel : ViewModel() {
     val materialEngageData = MutableLiveData<MaterialEngageData?>()
     private val _materialList = MutableLiveData<List<MaterialData>>()
     val materialList: LiveData<List<MaterialData>> = _materialList
 
+    private val storageRef = FirebaseStorage.getInstance().reference
+    private val db = FirebaseFirestore.getInstance()
+
     fun fetchMaterialsData() {
         val db = FirebaseFirestore.getInstance()
         db.collection("Materials")
@@ -46,6 +56,51 @@
                     materialEngageData.postValue(materialOverview)
                 }
             }
+
     }
+
+    fun addMaterial(material: Material, imageUri: Uri?, documentUri: Uri?) {
+        val materialRef = db.collection("Materials").document()
+
+        material.id = materialRef.id
+
+        val uploadTasks = mutableListOf<Task<*>>()
+
+        imageUri?.let { uri ->
+            val imageRef = storageRef.child("images/${material.id}")
+            uploadTasks.add(imageRef.putFile(uri).continueWithTask {
+                imageRef.downloadUrl
+            }.addOnSuccessListener { url ->
+                material.imageUrl = url.toString()
+            })
+        }
+
+        documentUri?.let { uri ->
+            val docRef = storageRef.child("documents/${material.id}")
+            uploadTasks.add(docRef.putFile(uri).continueWithTask {
+                docRef.downloadUrl
+            }.addOnSuccessListener { url ->
+                // Add the document URL to a Course object and save it to the "Courses" sub-collection
+                val course = CourseDocument(documentUrl = url.toString())
+                materialRef.collection("Courses").add(course)
+                    .addOnSuccessListener {
+                        Log.d("MaterialViewModel", "Document successfully added to Courses sub-collection")
+                    }
+                    .addOnFailureListener { e ->
+                        Log.e("MaterialViewModel", "Error adding document to Courses sub-collection", e)
+                    }
+            })
+        }
+
+
+        Tasks.whenAllSuccess<Any>(uploadTasks).addOnSuccessListener {
+            materialRef.set(material)
+        }.addOnFailureListener { e ->
+            Log.e("MaterialViewModel", "Error adding material", e)
+        }
+    }
+
+
+
 
 }
Index: app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ /dev/null	(revision c61773b51209c21dc6e07059e191e17480cada23)
@@ -1,212 +0,0 @@
-package com.example.kleine.fragments.shopping
-
-import android.annotation.SuppressLint
-import android.graphics.Paint
-import android.os.Bundle
-import android.util.Log
-import androidx.fragment.app.Fragment
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.Toast
-import androidx.lifecycle.Observer
-import androidx.navigation.fragment.navArgs
-import androidx.recyclerview.widget.LinearLayoutManager
-import com.example.kleine.R
-import com.example.kleine.SpacingDecorator.HorizantalSpacingItemDecorator
-import com.example.kleine.activities.ShoppingActivity
-import com.example.kleine.adapters.recyclerview.ColorsAndSizesAdapter
-import com.example.kleine.adapters.viewpager.ViewPager2Images
-import com.example.kleine.databinding.FragmentProductPreviewBinding
-import com.example.kleine.model.CartProduct
-import com.example.kleine.model.Product
-import com.example.kleine.resource.Resource
-import com.example.kleine.util.Constants.Companion.COLORS
-import com.example.kleine.util.Constants.Companion.COLORS_TYPE
-import com.example.kleine.util.Constants.Companion.IMAGES
-import com.example.kleine.util.Constants.Companion.PRODUCT_FLAG
-import com.example.kleine.util.Constants.Companion.SIZES
-import com.example.kleine.util.Constants.Companion.SIZES_TYPE
-import com.example.kleine.viewmodel.shopping.ShoppingViewModel
-import com.google.android.material.bottomnavigation.BottomNavigationView
-import io.github.vejei.viewpagerindicator.indicator.CircleIndicator
-
-class ProductPreviewFragment : Fragment() {
-
-    val args by navArgs<MaterialPreviewFragmentArgs>()
-    val TAG = "ProductPreviewFragment"
-
-    private lateinit var binding: FragmentProductPreviewBinding
-    private lateinit var colorsAdapter: ColorsAndSizesAdapter
-    private lateinit var sizesAdapter: ColorsAndSizesAdapter
-    private lateinit var viewPagerAdapter: ViewPager2Images
-    private lateinit var viewModel: ShoppingViewModel
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        colorsAdapter = ColorsAndSizesAdapter(COLORS_TYPE)
-        sizesAdapter = ColorsAndSizesAdapter(SIZES_TYPE)
-        viewPagerAdapter = ViewPager2Images()
-        viewModel = (activity as ShoppingActivity).viewModel
-    }
-
-    override fun onCreateView(
-        inflater: LayoutInflater, container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-
-        binding = FragmentProductPreviewBinding.inflate(inflater)
-        return binding.root
-    }
-
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        val bottomNavigation =
-            requireActivity().findViewById<BottomNavigationView>(R.id.bottom_navigation)
-        bottomNavigation.visibility = View.GONE
-
-        val product = args.material
-
-        setupViewpager()
-
-
-
-//        setProductInformation(product)
-
-        onImageCloseClick()
-        onBtnAddToCartClick()
-
-        observeAddToCart()
-
-        onColorClick()
-        onSizeClick()
-    }
-
-    private var selectedSize: String = ""
-    private fun onSizeClick() {
-        sizesAdapter.onItemClick = { size ->
-            selectedSize = size
-            binding.tvSizeError.visibility = View.INVISIBLE
-
-        }
-    }
-
-    private var selectedColor: String = ""
-    private fun onColorClick() {
-        colorsAdapter.onItemClick = { color ->
-            selectedColor = color
-            binding.tvColorError.visibility = View.INVISIBLE
-        }
-    }
-
-
-    private fun observeAddToCart() {
-        viewModel.addToCart.observe(viewLifecycleOwner, Observer { response ->
-            val btn = binding.btnAddToCart
-            when (response) {
-                is Resource.Loading -> {
-                    startLoading()
-                    return@Observer
-                }
-
-                is Resource.Success -> {
-                    stopLoading()
-                    viewModel.addToCart.value = null
-                    return@Observer
-                }
-
-                is Resource.Error -> {
-                    Toast.makeText(activity, "Oops! error occurred", Toast.LENGTH_SHORT).show()
-                    viewModel.addToCart.value = null
-                    Log.e(TAG, response.message.toString())
-                }
-            }
-        })
-    }
-
-    private fun stopLoading() {
-        binding.apply {
-            btnAddToCart.visibility = View.VISIBLE
-            progressbar.visibility = View.INVISIBLE
-        }
-    }
-
-    private fun startLoading() {
-        binding.apply {
-            btnAddToCart.visibility = View.INVISIBLE
-            progressbar.visibility = View.VISIBLE
-        }
-    }
-
-
-    private fun onBtnAddToCartClick() {
-        binding.btnAddToCart.apply {
-            setOnClickListener {
-                if (selectedColor.isEmpty()) {
-                    binding.tvColorError.visibility = View.VISIBLE
-                    return@setOnClickListener
-                }
-                if (selectedSize.isEmpty()) {
-                    binding.tvSizeError.visibility = View.VISIBLE
-                    return@setOnClickListener
-                }
-
-
-                setBackgroundResource(R.color.g_black)
-            }
-        }
-    }
-
-
-    private fun onImageCloseClick() {
-        binding.imgClose.setOnClickListener {
-            activity?.onBackPressed()
-        }
-    }
-
-//    @SuppressLint("SetTextI18n")
-//    private fun setProductInformation(product: Product) {
-//        val imagesList = product.images!![IMAGES] as List<String>
-//        val colors = product.colors!![COLORS] as List<String>
-//        val sizes = product.sizes!![SIZES] as List<String>
-//        binding.apply {
-//            viewPagerAdapter.differ.submitList(imagesList)
-//            if (colors.isNotEmpty() && colors[0] != "")
-//                colorsAdapter.differ.submitList(colors.toList())
-//            if (sizes.isNotEmpty() && sizes[0] != "")
-//                sizesAdapter.differ.submitList(sizes)
-//            tvProductName.text = product.title
-//            tvProductDescription.text = product.description
-//            tvProductPrice.text = "$${product.price}"
-//            tvProductOfferPrice.visibility = View.GONE
-//            product.newPrice?.let {
-//                if (product.newPrice.isNotEmpty() && product.newPrice != "0") {
-//                    tvProductPrice.paintFlags =
-//                        tvProductPrice.paintFlags or Paint.STRIKE_THRU_TEXT_FLAG
-//                    tvProductOfferPrice.text = "$${product.newPrice}"
-//                    tvProductOfferPrice.visibility = View.VISIBLE
-//                }
-//            }
-//            product.sizeUnit?.let {
-//                if (it.isNotEmpty()) {
-//                    binding.tvSizeUnit.visibility = View.VISIBLE
-//                    binding.tvSizeUnit.text = " ($it)"
-//                }
-//            }
-//        }
-//    }
-
-
-
-
-
-    private fun setupViewpager() {
-        binding.viewpager2Images.adapter = viewPagerAdapter
-        binding.circleIndicator.setWithViewPager2(binding.viewpager2Images)
-        binding.circleIndicator.itemCount = 1 // Only one image
-        binding.circleIndicator.setAnimationMode(CircleIndicator.AnimationMode.SLIDE)
-    }
-
-
-}
\ No newline at end of file
Index: app/src/main/res/layout/fragment_product_preview.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n    <data>\n        <variable\n            name=\"productModel\"\n            type=\"com.example.kleine.model.Material\" />\n    </data>\n\n\n<androidx.core.widget.NestedScrollView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".fragments.shopping.MaterialPreviewFragment\"\n    android:fillViewport=\"true\">\n\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <androidx.cardview.widget.CardView\n            android:id=\"@+id/viewpager_card\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_350sdp\"\n            android:layout_marginTop=\"20dp\"\n            app:cardCornerRadius=\"15dp\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:orientation=\"vertical\"\n            android:backgroundTint=\"@color/white\"\n            android:overScrollMode=\"never\"\n            app:cardElevation=\"0dp\"\n            >\n\n\n            <androidx.viewpager2.widget.ViewPager2\n                android:id=\"@+id/viewpager2Images\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"0dp\"\n                android:layout_weight=\"1\"/>\n\n\n\n\n            <ImageView\n                android:id=\"@+id/img_close\"\n                android:layout_width=\"@dimen/_20sdp\"\n                android:layout_height=\"@dimen/_20sdp\"\n                android:layout_marginStart=\"10dp\"\n                android:layout_marginTop=\"10dp\"\n                android:src=\"@drawable/ic_close\"\n                app:tint=\"@color/black\"\n                android:scaleType=\"centerInside\"\n                />\n\n\n\n\n        </androidx.cardview.widget.CardView>\n\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline1\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.04\" />\n\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline2\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.96\" />\n\n\n\n\n\n\n\n\n        <LinearLayout\n            android:id=\"@+id/linear_product_name\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@+id/circle_indicator\"\n            android:orientation=\"horizontal\"\n            android:layout_marginTop=\"35dp\">\n\n\n            <TextView\n                android:id=\"@+id/tv_product_name\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:fontFamily=\"@font/poppins_light\"\n                android:text=\"@{productModel.name}\"\n                android:textColor=\"@color/black\"\n                android:textSize=\"@dimen/_20ssp\"\n                android:textStyle=\"bold\"\n                app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n                app:layout_constraintTop_toBottomOf=\"@id/guideline3\" />\n\n\n            <!--        <TextView-->\n            <!--            android:id=\"@+id/tv_product_offer_price\"-->\n            <!--            android:layout_width=\"wrap_content\"-->\n            <!--            android:layout_height=\"wrap_content\"-->\n            <!--            android:fontFamily=\"@font/poppins_light\"-->\n            <!--            android:text=\"$300\"-->\n            <!--            android:textColor=\"@color/g_hint\"-->\n            <!--            android:textSize=\"@dimen/_20ssp\"-->\n            <!--            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"-->\n            <!--            app:layout_constraintBottom_toBottomOf=\"@id/tv_product_name\"-->\n            <!--            app:layout_constraintTop_toTopOf=\"@+id/tv_product_name\"-->\n            <!--            android:layout_marginEnd=\"5dp\"/>-->\n\n\n            <!--        <TextView-->\n            <!--            android:id=\"@+id/tv_product_price\"-->\n            <!--            android:layout_width=\"wrap_content\"-->\n            <!--            android:layout_height=\"wrap_content\"-->\n            <!--            android:fontFamily=\"@font/poppins_light\"-->\n            <!--            android:text=\"$300\"-->\n            <!--            android:textColor=\"@color/g_hint\"-->\n            <!--            android:textSize=\"@dimen/_20ssp\"-->\n            <!--            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"-->\n            <!--            app:layout_constraintBottom_toBottomOf=\"@id/tv_product_name\"-->\n            <!--            app:layout_constraintTop_toTopOf=\"@+id/tv_product_name\"/>-->\n\n\n        </LinearLayout>\n\n\n        <LinearLayout\n            android:id=\"@+id/linear_product_description\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_product_name\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\">\n\n\n            <TextView\n                android:id=\"@+id/tv_product_description\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:fontFamily=\"@font/poppins_light\"\n                android:text=\"@{String.valueOf(productModel.desc)}\"\n                android:textColor=\"@color/g_hint\"\n                android:textSize=\"@dimen/_10ssp\"\n                android:textStyle=\"bold\" />\n        </LinearLayout>\n\n\n        <View\n            android:id=\"@+id/line\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_1sdp\"\n            android:layout_marginTop=\"10dp\"\n            android:background=\"@drawable/line\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_product_description\" />\n\n\n        <LinearLayout\n            android:id=\"@+id/linear\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/line\"\n            android:layout_marginTop=\"20dp\">\n\n\n            <LinearLayout\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:orientation=\"vertical\">\n\n\n                <LinearLayout\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\">\n\n\n                    <TextView\n                        android:id=\"@+id/tv_color\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:fontFamily=\"@font/poppins_light\"\n                        android:text=\"@string/string_status\"\n                        android:textColor=\"@color/black\"\n                        android:textSize=\"@dimen/_15ssp\" />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_color_error\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:text=\"@string/g_please_select_color\"\n                        android:textColor=\"@color/g_red\"\n                        android:visibility=\"invisible\"\n                        android:layout_marginTop=\"14dp\"\n                        android:layout_marginStart=\"10dp\"\n                        android:textSize=\"@dimen/_9ssp\"\n                        />\n\n\n                </LinearLayout>\n\n\n\n\n\n            </LinearLayout>\n\n\n            <LinearLayout\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:orientation=\"vertical\">\n                <LinearLayout\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\">\n                    <TextView\n                        android:id=\"@+id/tv_size\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:fontFamily=\"@font/poppins_light\"\n                        android:text=\"@string/string_rating\"\n                        android:textColor=\"@color/black\"\n                        android:textSize=\"@dimen/_15ssp\" />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_size_unit\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:textSize=\"@dimen/_10ssp\"\n                        android:visibility=\"invisible\"\n                        />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_size_error\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:text=\"@string/g_please_select_size\"\n                        android:textSize=\"@dimen/_9ssp\"\n                        android:textColor=\"@color/g_red\"\n                        android:visibility=\"invisible\"\n                        android:layout_marginTop=\"14dp\"\n                        android:layout_marginStart=\"10dp\"/>\n\n\n                </LinearLayout>\n\n\n\n            </LinearLayout>\n        </LinearLayout>\n\n\n        <ProgressBar\n            android:id=\"@+id/progressbar\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:indeterminateTint=\"@color/g_icon_tint\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear\"\n            android:layout_marginTop=\"45dp\"\n            android:visibility=\"invisible\"\n            />\n\n\n        <androidx.appcompat.widget.AppCompatButton\n            android:id=\"@+id/btn_add_to_cart\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_40sdp\"\n            android:layout_marginBottom=\"20dp\"\n            android:background=\"@drawable/btn_background\"\n            android:fontFamily=\"@font/poppins_thin\"\n            android:text=\"@string/g_add_to_card\"\n            android:textAllCaps=\"false\"\n            android:textColor=\"@color/white\"\n            android:textSize=\"@dimen/_12sdp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintHorizontal_bias=\"1.0\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear\"\n            app:layout_constraintVertical_bias=\"0.494\"\n            android:layout_marginTop=\"45dp\"\n            android:visibility=\"visible\"\n            />\n\n\n        <io.github.vejei.viewpagerindicator.indicator.CircleIndicator\n            android:id=\"@+id/circle_indicator\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintTop_toBottomOf=\"@id/viewpager_card\"\n            app:layout_constraintStart_toStartOf=\"@id/viewpager_card\"\n            app:layout_constraintEnd_toEndOf=\"@+id/viewpager_card\"\n            android:layout_marginTop=\"10dp\"\n            app:indicatorGap=\"5dp\"\n            app:indicatorRadius=\"5dp\"\n            app:indicatorItemCount=\"4\"\n            app:indicatorSelectedColor=\"@color/g_black\"/>\n\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n</androidx.core.widget.NestedScrollView>\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_product_preview.xml b/app/src/main/res/layout/fragment_product_preview.xml
--- a/app/src/main/res/layout/fragment_product_preview.xml	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/res/layout/fragment_product_preview.xml	(date 1695480063541)
@@ -12,7 +12,7 @@
 <androidx.core.widget.NestedScrollView
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context=".fragments.shopping.MaterialPreviewFragment"
+    tools:context="fragments.shopping.MaterialPreviewFragment"
     android:fillViewport="true">
 
 
@@ -82,18 +82,18 @@
 
 
 
-
         <LinearLayout
             android:id="@+id/linear_product_name"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             app:layout_constraintStart_toStartOf="@id/guideline1"
             app:layout_constraintEnd_toEndOf="@id/guideline2"
-            app:layout_constraintTop_toBottomOf="@+id/circle_indicator"
+            app:layout_constraintTop_toBottomOf="@+id/viewpager_card"
             android:orientation="horizontal"
             android:layout_marginTop="35dp">
 
 
+
             <TextView
                 android:id="@+id/tv_product_name"
                 android:layout_width="wrap_content"
@@ -201,22 +201,13 @@
                         android:layout_height="wrap_content"
                         android:layout_marginTop="15dp"
                         android:fontFamily="@font/poppins_light"
-                        android:text="@string/string_status"
+                        android:text="@{productModel.status}"
                         android:textColor="@color/black"
                         android:textSize="@dimen/_15ssp" />
 
 
-                    <TextView
-                        android:id="@+id/tv_color_error"
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:text="@string/g_please_select_color"
-                        android:textColor="@color/g_red"
-                        android:visibility="invisible"
-                        android:layout_marginTop="14dp"
-                        android:layout_marginStart="10dp"
-                        android:textSize="@dimen/_9ssp"
-                        />
+
+
 
 
                 </LinearLayout>
@@ -243,7 +234,7 @@
                         android:layout_height="wrap_content"
                         android:layout_marginTop="15dp"
                         android:fontFamily="@font/poppins_light"
-                        android:text="@string/string_rating"
+                        android:text="@{productModel.requirement}"
                         android:textColor="@color/black"
                         android:textSize="@dimen/_15ssp" />
 
@@ -257,17 +248,6 @@
                         android:visibility="invisible"
                         />
 
-
-                    <TextView
-                        android:id="@+id/tv_size_error"
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:text="@string/g_please_select_size"
-                        android:textSize="@dimen/_9ssp"
-                        android:textColor="@color/g_red"
-                        android:visibility="invisible"
-                        android:layout_marginTop="14dp"
-                        android:layout_marginStart="10dp"/>
 
 
                 </LinearLayout>
@@ -293,7 +273,7 @@
 
 
         <androidx.appcompat.widget.AppCompatButton
-            android:id="@+id/btn_add_to_cart"
+            android:id="@+id/btnEnroll"
             android:layout_width="0dp"
             android:layout_height="@dimen/_40sdp"
             android:layout_marginBottom="20dp"
@@ -314,20 +294,11 @@
             />
 
 
-        <io.github.vejei.viewpagerindicator.indicator.CircleIndicator
-            android:id="@+id/circle_indicator"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            app:layout_constraintTop_toBottomOf="@id/viewpager_card"
-            app:layout_constraintStart_toStartOf="@id/viewpager_card"
-            app:layout_constraintEnd_toEndOf="@+id/viewpager_card"
-            android:layout_marginTop="10dp"
-            app:indicatorGap="5dp"
-            app:indicatorRadius="5dp"
-            app:indicatorItemCount="4"
-            app:indicatorSelectedColor="@color/g_black"/>
+
+
 
 
     </androidx.constraintlayout.widget.ConstraintLayout>
+
 </androidx.core.widget.NestedScrollView>
 </layout>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_order_details.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.core.widget.NestedScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".fragments.settings.OrderDetails\"\n    android:fillViewport=\"true\">\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar_all_order_details\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"?actionBarSize\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toTopOf=\"parent\">\n\n            <androidx.constraintlayout.widget.ConstraintLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\">\n\n                <ImageView\n                    android:id=\"@+id/img_close_order\"\n                    android:layout_width=\"@dimen/_20sdp\"\n                    android:layout_height=\"@dimen/_20sdp\"\n                    android:src=\"@drawable/ic_close\"\n                    android:scaleType=\"centerInside\"\n                    app:layout_constraintBottom_toBottomOf=\"parent\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toTopOf=\"parent\"\n                    app:tint=\"@color/black\" />\n\n                <TextView\n                    android:id=\"@+id/tv_order_id\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginStart=\"25dp\"\n                    android:fontFamily=\"@font/poppins_light\"\n                    android:textColor=\"@color/black\"\n                    android:textSize=\"@dimen/_20ssp\"\n                    app:layout_constraintBottom_toBottomOf=\"parent\"\n                    app:layout_constraintStart_toEndOf=\"@id/img_close_order\"\n                    app:layout_constraintTop_toTopOf=\"parent\" />\n            </androidx.constraintlayout.widget.ConstraintLayout>\n\n        </androidx.appcompat.widget.Toolbar>\n\n        <com.google.android.material.progressindicator.LinearProgressIndicator\n            android:id=\"@+id/progressbar_order\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintTop_toBottomOf=\"@id/toolbar_all_order_details\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            android:indeterminate=\"true\"\n            android:visibility=\"invisible\"/>\n\n        <LinearLayout\n            android:id=\"@+id/linear_steps_view\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/toolbar_all_order_details\">\n\n           <com.shuhart.stepview.StepView\n               android:id=\"@+id/step_view\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"wrap_content\"\n               android:padding=\"16dp\"\n               app:sv_selectedCircleColor=\"@color/g_orange\"\n               app:sv_selectedTextColor=\"@color/g_hint\"\n               app:sv_stepLineWidth=\"3dp\"\n               app:sv_stepPadding=\"4dp\"\n               app:sv_nextTextColor=\"@color/g_hint\"\n               app:sv_nextStepLineColor=\"@color/g_hint\"\n               app:sv_doneCircleColor=\"@color/g_orange\"\n               app:sv_doneStepLineColor=\"@color/g_orange\"\n               app:sv_doneCircleRadius=\"@dimen/_14sdp\"\n               app:sv_selectedCircleRadius=\"@dimen/_14sdp\"\n               app:sv_selectedStepNumberColor=\"@color/colorPrimary\"\n               app:sv_stepViewStyle=\"@style/StepView\"\n               app:sv_doneStepMarkColor=\"@color/colorPrimary\"\n               app:sv_stepNumberTextSize=\"@dimen/_12ssp\"\n               app:sv_animationType=\"Line\"\n               app:sv_doneTextColor=\"@color/g_hint\"\n               />\n        </LinearLayout>\n\n\n\n        <TextView\n            android:id=\"@+id/tv_shopping_addresses\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/g_address\"\n            android:fontFamily=\"@font/poppins_thin\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            android:textColor=\"@color/black\"\n            android:textSize=\"@dimen/_15ssp\"\n            android:layout_marginTop=\"20dp\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_steps_view\"\n            app:drawableTint=\"@color/black\"\n            app:drawableLeftCompat=\"@drawable/ic_baseline_location_on_24\" />\n\n        <LinearLayout\n            android:id=\"@+id/linear_address\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/tv_shopping_addresses\">\n\n\n                <TextView\n                    android:id=\"@+id/tv_full_name\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"@string/g_full_name\"\n                    android:textSize=\"@dimen/_13ssp\" />\n\n            <TextView\n                android:id=\"@+id/tv_address\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/g_address\"\n                android:textSize=\"@dimen/_13ssp\" />\n\n            <TextView\n                android:id=\"@+id/tv_phone_number\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/g_phone\"\n                android:textSize=\"@dimen/_13ssp\" />\n\n        </LinearLayout>\n\n        <View\n            android:id=\"@+id/line1\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_1sdp\"\n            android:layout_marginTop=\"15dp\"\n            android:background=\"@drawable/line\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_address\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            android:backgroundTint=\"@color/g_icon_tint\"\n            />\n\n        <TextView\n            android:id=\"@+id/tv_products\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/g_products\"\n            android:fontFamily=\"@font/poppins_thin\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            android:textColor=\"@color/black\"\n            android:textSize=\"@dimen/_15ssp\"\n            android:layout_marginTop=\"20dp\"\n            app:layout_constraintTop_toBottomOf=\"@id/line1\"\n            app:drawableTint=\"@color/black\"\n            app:drawableLeftCompat=\"@drawable/ic_cart\"\n            android:drawablePadding=\"5dp\"/>\n\n        <androidx.recyclerview.widget.RecyclerView\n            android:id=\"@+id/rv_products\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/line1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/tv_products\"\n            android:layout_marginTop=\"10dp\"\n            tools:listitem=\"@layout/cart_item\"\n            />\n\n        <androidx.constraintlayout.widget.ConstraintLayout\n            android:id=\"@+id/linear\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/rv_products\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            android:layout_marginTop=\"40dp\"\n            android:layout_marginBottom=\"20dp\"\n            android:background=\"@drawable/total_box_background\">\n\n            <TextView\n                android:layout_width=\"0dp\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/g_total\"\n                android:textSize=\"@dimen/_16ssp\"\n                android:textColor=\"@color/black\"\n                android:fontFamily=\"@font/sf_pro_display\"\n                android:layout_marginStart=\"10dp\"\n                android:layout_weight=\"1\"\n                android:layout_marginTop=\"@dimen/_15sdp\"\n                android:layout_marginBottom=\"@dimen/_15sdp\"\n                android:layout_gravity=\"start|center_vertical\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"/>\n\n            <TextView\n                android:id=\"@+id/tv_totalprice\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginEnd=\"10dp\"\n                android:textSize=\"@dimen/_16ssp\"\n                android:textColor=\"@color/black\"\n                android:fontFamily=\"@font/sf_pro_display\"\n                android:layout_marginTop=\"@dimen/_15sdp\"\n                android:layout_marginBottom=\"@dimen/_15sdp\"\n                android:layout_gravity=\"end|center_vertical\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"\n                />\n\n        </androidx.constraintlayout.widget.ConstraintLayout>\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline1\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.04\" />\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline2\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.96\" />\n    </androidx.constraintlayout.widget.ConstraintLayout>\n\n</androidx.core.widget.NestedScrollView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_order_details.xml b/app/src/main/res/layout/fragment_order_details.xml
--- a/app/src/main/res/layout/fragment_order_details.xml	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/res/layout/fragment_order_details.xml	(date 1695480063574)
@@ -115,31 +115,10 @@
             android:orientation="vertical"
             app:layout_constraintStart_toStartOf="@id/guideline1"
             app:layout_constraintEnd_toEndOf="@id/guideline2"
-            app:layout_constraintTop_toBottomOf="@id/tv_shopping_addresses">
-
+            app:layout_constraintTop_toBottomOf="@id/tv_shopping_addresses"/>
 
-                <TextView
-                    android:id="@+id/tv_full_name"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:text="@string/g_full_name"
-                    android:textSize="@dimen/_13ssp" />
 
-            <TextView
-                android:id="@+id/tv_address"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:text="@string/g_address"
-                android:textSize="@dimen/_13ssp" />
 
-            <TextView
-                android:id="@+id/tv_phone_number"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:text="@string/g_phone"
-                android:textSize="@dimen/_13ssp" />
-
-        </LinearLayout>
 
         <View
             android:id="@+id/line1"
@@ -157,7 +136,7 @@
             android:id="@+id/tv_products"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="@string/g_products"
+            android:text="Courses Material"
             android:fontFamily="@font/poppins_thin"
             app:layout_constraintStart_toStartOf="@id/guideline1"
             android:textColor="@color/black"
Index: app/src/main/res/drawable/tab_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/tab_selector.xml b/app/src/main/res/drawable/tab_selector.xml
new file mode 100644
--- /dev/null	(date 1695480063867)
+++ b/app/src/main/res/drawable/tab_selector.xml	(date 1695480063867)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/tab_icon_selected" android:state_selected="true"/>
+    <item android:drawable="@drawable/tab_icon_default"/>
+</selector>
Index: app/src/main/java/com/example/kleine/model/Enrollment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/model/Enrollment.kt b/app/src/main/java/com/example/kleine/model/Enrollment.kt
new file mode 100644
--- /dev/null	(date 1695480063852)
+++ b/app/src/main/java/com/example/kleine/model/Enrollment.kt	(date 1695480063852)
@@ -0,0 +1,10 @@
+package com.example.kleine.model
+
+import android.os.Parcelable
+import kotlinx.android.parcel.Parcelize
+
+@Parcelize
+data class Enrollment(
+    val userId: String = "", // ID of the user who has enrolled
+    val materialId: String = "" // ID of the material/course in which the user has enrolled
+): Parcelable
Index: app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.settings\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.AllOrdersAdapter\nimport com.example.kleine.databinding.FragmentAllOrdersBinding\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\n\n\nclass AllOrdersFragment : Fragment() {\n\n    val TAG = \"AllOrdersFragment\"\n    private lateinit var viewModel: ShoppingViewModel\n    private lateinit var binding: FragmentAllOrdersBinding\n    private lateinit var allOrdersAdapter: AllOrdersAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getUserOrders()\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        // Inflate the layout for this fragment\n        binding = FragmentAllOrdersBinding.inflate(inflater)\n        activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)?.visibility = View.GONE\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        setupRecyclerView()\n        observeAllOrders()\n        onCloseClick()\n        onItemClick()\n        binding.imgCloseOrders.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun onItemClick() {\n        allOrdersAdapter.onItemClick = {order ->\n            val bundle = Bundle()\n            bundle.putParcelable(\"order\",order)\n            findNavController().navigate(R.id.action_allOrdersFragment_to_orderDetails,bundle)\n\n        }\n    }\n\n    private fun onCloseClick() {\n        binding.imgCloseOrders.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun observeAllOrders() {\n        viewModel.userOrders.observe(viewLifecycleOwner) { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@observe\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n                    val orders = response.data\n                    if (orders!!.isEmpty())\n                        binding.apply {\n                            imgEmptyBox.visibility = View.VISIBLE\n                            imgEmptyBoxTexture.visibility = View.VISIBLE\n                            tvEmptyOrders.visibility = View.VISIBLE\n                            return@observe\n                        }\n                    binding.apply {\n                        imgEmptyBox.visibility = View.GONE\n                        imgEmptyBoxTexture.visibility = View.GONE\n                        tvEmptyOrders.visibility = View.GONE\n                    }\n                    allOrdersAdapter.differ.submitList(orders)\n                    return@observe\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@observe\n                }\n            }\n        }\n    }\n\n    private fun hideLoading() {\n        binding.progressbarAllOrders.visibility = View.GONE\n\n    }\n\n    private fun showLoading() {\n        binding.progressbarAllOrders.visibility = View.VISIBLE\n    }\n\n    private fun setupRecyclerView() {\n        allOrdersAdapter = AllOrdersAdapter()\n        binding.rvAllOrders.apply {\n            layoutManager = LinearLayoutManager(context)\n            adapter = allOrdersAdapter\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt b/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt	(date 1695541805487)
@@ -12,10 +12,16 @@
 import com.example.kleine.R
 import com.example.kleine.activities.ShoppingActivity
 import com.example.kleine.adapters.recyclerview.AllOrdersAdapter
+import com.example.kleine.adapters.recyclerview.MaterialAdapter
 import com.example.kleine.databinding.FragmentAllOrdersBinding
+import com.example.kleine.model.Enrollment
+import com.example.kleine.model.Material
 import com.example.kleine.resource.Resource
 import com.example.kleine.viewmodel.shopping.ShoppingViewModel
 import com.google.android.material.bottomnavigation.BottomNavigationView
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.FieldPath
+import com.google.firebase.firestore.FirebaseFirestore
 
 
 class AllOrdersFragment : Fragment() {
@@ -24,6 +30,8 @@
     private lateinit var viewModel: ShoppingViewModel
     private lateinit var binding: FragmentAllOrdersBinding
     private lateinit var allOrdersAdapter: AllOrdersAdapter
+    private lateinit var materialAdapter: MaterialAdapter
+
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -45,6 +53,7 @@
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
 
+        fetchEnrolledMaterials()
         setupRecyclerView()
         observeAllOrders()
         onCloseClick()
@@ -54,14 +63,85 @@
         }
     }
 
+
+    private fun fetchEnrolledMaterials() {
+        val userId = FirebaseAuth.getInstance().currentUser?.uid
+
+        if (userId != null) {
+            val firestore = FirebaseFirestore.getInstance()
+            firestore.collection("enrollments")
+                .whereEqualTo("userId", userId)
+                .get()
+                .addOnSuccessListener { querySnapshot ->
+                    val enrollments = querySnapshot.documents.mapNotNull { document ->
+                        document.toObject(Enrollment::class.java)
+                    }
+                    fetchMaterialsForEnrollments(enrollments)
+                    Log.d(TAG, "Number of enrollments fetched: ${enrollments.size}")
+
+                }
+                .addOnFailureListener { exception ->
+                    Log.e(TAG, "Error fetching user enrollments", exception)
+                    // Handle the error appropriately
+                }
+        } else {
+            // Handle the case where the user is not logged in
+        }
+    }
+
+    private fun fetchMaterialsForEnrollments(enrollments: List<Enrollment>) {
+        val firestore = FirebaseFirestore.getInstance()
+
+        // Filter out empty strings and remove duplicate IDs
+        val materialIds = enrollments.map { it.materialId }.filter { it.isNotEmpty() }.distinct()
+
+        // Log the IDs being used in the query for debugging purposes
+        Log.d(TAG, "Attempting to fetch materials with IDs: $materialIds")
+
+        // Only proceed with the query if there are valid IDs to search for
+        if (materialIds.isNotEmpty()) {
+            firestore.collection("Materials")
+                .whereIn(FieldPath.documentId(), materialIds) // Updated line
+                .get()
+                .addOnSuccessListener { querySnapshot ->
+                    val materials = querySnapshot.documents.mapNotNull { document ->
+                        val material = document.toObject(Material::class.java)
+                        material?.id = document.id // Set the id of the Material object
+                        material
+                    }
+                    Log.d(TAG, "Materials fetched successfully: $materials")
+                    displayMaterials(materials)
+                }
+                .addOnFailureListener { exception ->
+                    Log.e(TAG, "Error fetching materials", exception)
+                    // Handle the error appropriately
+                }
+        } else {
+            Log.w(TAG, "No valid material IDs to fetch")
+            // Handle the case where there are no valid material IDs
+        }
+    }
+
+
+    private fun displayMaterials(materials: List<Material>) {
+        Log.d(TAG, "Displaying materials: ${materials.size}")
+        materialAdapter.differ.submitList(materials)
+        materialAdapter.notifyDataSetChanged() // Force redraw
+    }
+
+
+
     private fun onItemClick() {
-        allOrdersAdapter.onItemClick = {order ->
+        materialAdapter.onItemClick = { material ->
             val bundle = Bundle()
-            bundle.putParcelable("order",order)
-            findNavController().navigate(R.id.action_allOrdersFragment_to_orderDetails,bundle)
+            bundle.putParcelable("material", material)
+            findNavController().navigate(R.id.action_allOrdersFragment_to_materialDetailsFragment, bundle)
 
         }
     }
+
+
+
 
     private fun onCloseClick() {
         binding.imgCloseOrders.setOnClickListener {
@@ -120,10 +200,10 @@
     }
 
     private fun setupRecyclerView() {
-        allOrdersAdapter = AllOrdersAdapter()
+        materialAdapter = MaterialAdapter()
         binding.rvAllOrders.apply {
             layoutManager = LinearLayoutManager(context)
-            adapter = allOrdersAdapter
+            adapter = materialAdapter
         }
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.settings\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.LinearLayout\nimport android.widget.Toast\nimport androidx.lifecycle.Observer\nimport androidx.navigation.fragment.findNavController\nimport androidx.navigation.fragment.navArgs\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.SpacingDecorator.VerticalSpacingItemDecorator\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.CartRecyclerAdapter\nimport com.example.kleine.databinding.FragmentOrderDetailsBinding\nimport com.example.kleine.model.Address\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.ORDER_CONFIRM_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_Delivered_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_PLACED_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_SHIPPED_STATE\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\n\nclass OrderDetails : Fragment() {\n    val TAG = \"OrderDetails\"\n    val args by navArgs<OrderDetailsArgs>()\n    private lateinit var binding: FragmentOrderDetailsBinding\n    private lateinit var viewModel: ShoppingViewModel\n    private lateinit var productsAdapter: CartRecyclerAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getOrderAddressAndProducts(args.order)\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentOrderDetailsBinding.inflate(inflater)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        binding.tvOrderId.text = resources.getText(R.string.g_order)\n            .toString().plus(\"# ${args.order.id}\")\n        setupRecyclerview()\n        observeOrderAddress()\n\n        observeProducts()\n        onCloseImageClick()\n        setupStepView()\n\n    }\n\n    private fun onCloseImageClick() {\n        binding.imgCloseOrder.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun observeProducts() {\n        viewModel.orderProducts.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n\n                is Resource.Loading -> {\n                    showProductsLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideProductsLoading()\n                    productsAdapter.differ.submitList(response.data)\n                    binding.tvTotalprice.text = args.order.totalPrice\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideAddressLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@Observer\n                }\n            }\n\n        })\n    }\n\n    private fun hideProductsLoading() {\n        binding.apply {\n            progressbarOrder.visibility = View.GONE\n            rvProducts.visibility = View.VISIBLE\n            tvProducts.visibility = View.VISIBLE\n            linear.visibility = View.VISIBLE\n            line1.visibility = View.VISIBLE\n        }\n    }\n\n    private fun showProductsLoading() {\n        binding.apply {\n            progressbarOrder.visibility = View.VISIBLE\n            rvProducts.visibility = View.INVISIBLE\n            tvProducts.visibility = View.INVISIBLE\n            linear.visibility = View.INVISIBLE\n            line1.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun setupRecyclerview() {\n        productsAdapter = CartRecyclerAdapter(\"From Order Detail\")\n        binding.rvProducts.apply {\n            adapter = productsAdapter\n            layoutManager = LinearLayoutManager(context)\n            addItemDecoration(VerticalSpacingItemDecorator(23))\n        }\n    }\n\n    private fun observeOrderAddress() {\n        viewModel.orderAddress.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n\n                is Resource.Loading -> {\n                    showAddressLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideAddressLoading()\n                    val address = response.data\n                    binding.apply {\n                        tvFullName.text = address?.fullName\n                        tvAddress.text = address?.street\n                            .plus(\", ${address?.city}\")\n                            .plus(\", ${address?.state}\")\n                        tvPhoneNumber.text = address?.phone\n                    }\n\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideAddressLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@Observer\n                }\n            }\n\n        })\n    }\n\n    private fun hideAddressLoading() {\n        binding.apply {\n            progressbarOrder.visibility = View.GONE\n            stepView.visibility = View.VISIBLE\n            tvShoppingAddresses.visibility = View.VISIBLE\n            linearAddress.visibility = View.VISIBLE\n        }\n    }\n\n    private fun showAddressLoading() {\n        binding.apply {\n            binding.apply {\n                progressbarOrder.visibility = View.VISIBLE\n                stepView.visibility = View.INVISIBLE\n                tvShoppingAddresses.visibility = View.INVISIBLE\n                linearAddress.visibility = View.INVISIBLE\n            }\n        }\n    }\n\n    private fun setupStepView() {\n        val state = when (args.order.state) {\n            ORDER_PLACED_STATE -> 1\n            ORDER_CONFIRM_STATE -> 2\n            ORDER_SHIPPED_STATE -> 3\n            ORDER_Delivered_STATE -> 4\n            else -> {\n                2\n            }\n        }\n\n        Log.d(\"test2\", args.order.state)\n        Log.d(\"test2\", state.toString())\n        val steps = arrayOf<String>(\n            resources.getText(R.string.g_order_placed).toString(),\n            resources.getText(R.string.g_confirm).toString(),\n            resources.getText(R.string.g_shipped).toString(),\n            resources.getText(R.string.g_delivered).toString()\n        )\n\n        binding.stepView.apply {\n            getState().stepsNumber(4)\n                .steps(steps.toMutableList())\n                .commit()\n            if (state == 4) {\n                go(3,false)\n                done(true)\n            }else{\n                go(state, false)\n            }\n\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt b/app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt
--- a/app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt	(date 1695480063656)
@@ -52,7 +52,6 @@
         binding.tvOrderId.text = resources.getText(R.string.g_order)
             .toString().plus("# ${args.order.id}")
         setupRecyclerview()
-        observeOrderAddress()
 
         observeProducts()
         onCloseImageClick()
@@ -126,43 +125,7 @@
         }
     }
 
-    private fun observeOrderAddress() {
-        viewModel.orderAddress.observe(viewLifecycleOwner, Observer { response ->
-            when (response) {
-
-                is Resource.Loading -> {
-                    showAddressLoading()
-                    return@Observer
-                }
-
-                is Resource.Success -> {
-                    hideAddressLoading()
-                    val address = response.data
-                    binding.apply {
-                        tvFullName.text = address?.fullName
-                        tvAddress.text = address?.street
-                            .plus(", ${address?.city}")
-                            .plus(", ${address?.state}")
-                        tvPhoneNumber.text = address?.phone
-                    }
-
-                    return@Observer
-                }
 
-                is Resource.Error -> {
-                    hideAddressLoading()
-                    Toast.makeText(
-                        activity,
-                        resources.getText(R.string.error_occurred),
-                        Toast.LENGTH_SHORT
-                    ).show()
-                    Log.e(TAG, response.message.toString())
-                    return@Observer
-                }
-            }
-
-        })
-    }
 
     private fun hideAddressLoading() {
         binding.apply {
Index: app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.shopping\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport androidx.navigation.fragment.findNavController\nimport com.bumptech.glide.Glide\nimport com.example.kleine.BuildConfig\nimport com.example.kleine.R\nimport com.example.kleine.activities.LunchActivity\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.databinding.FragmentProfileBinding\nimport com.example.kleine.model.User\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.UPDATE_ADDRESS_FLAG\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport com.google.android.material.snackbar.Snackbar\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.firestore.FirebaseFirestore\n\n\nclass ProfileFragment : Fragment() {\n    val TAG = \"ProfileFragment\"\n    private lateinit var binding: FragmentProfileBinding\n    private lateinit var viewModel: ShoppingViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getUser()\n    }\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentProfileBinding.inflate(inflater, container, false)\n        val currentUser = FirebaseAuth.getInstance().currentUser\n\n        if (currentUser != null) {\n            val userId = currentUser.uid\n            val db = FirebaseFirestore.getInstance()\n            db.collection(\"users\").document(userId)\n                .get()\n                .addOnSuccessListener { document ->\n                    if (document != null) {\n                        val status = document.getString(\"status\")\n                        Log.d(TAG, \"User Status: $status\")\n                        if (status == \"ADMINS\") {\n                            // Admin user, show the fragment\n                            binding.adminOrders.visibility = View.VISIBLE\n                            binding.linearAdmin.visibility = View.VISIBLE\n                            binding.linearJoinPartnership.visibility = View.GONE\n                        }else if(status == \"PARTNERS\"){\n                            binding.adminOrders.visibility = View.GONE\n                            binding.linearAdmin.visibility = View.GONE\n                            binding.linearJoinPartnership.visibility = View.GONE\n                            binding.linearViewPartnership.visibility = View.VISIBLE\n                        }else{\n                            binding.linearJoinPartnership.visibility = View.VISIBLE\n                            binding.linearViewPartnership.visibility = View.GONE\n                            binding.adminOrders.visibility = View.GONE\n                            binding.linearAdmin.visibility = View.GONE\n                        }\n                    }\n                }\n        }\n\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        onHomeClick()\n        onLogoutClick()\n        onBillingAndAddressesClick()\n        onProfileClick()\n        onAllOrderClick()\n        onTrackOrderClick()\n        onJoinPartnershipCLick()\n        onViewPartnershipClick()\n        onAdminClick()\n        onHelpClick()\n\n        observeProfile()\n        binding.tvVersionCode.text =\n            \"${resources.getText(R.string.g_version)} ${BuildConfig.VERSION_NAME}\"\n\n\n        onTempCommentClick()\n    }\n\n    private fun onTempCommentClick() {\n        binding.linearComment.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"documentId\", \"5VlLkBQaULeJlawqN8Rq\")\n            findNavController().navigate(R.id.action_profileFragment_to_tempCommentFragment, bundle)\n        }\n    }\n\n    private fun onHelpClick() {\n        binding.linearHelp.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_helpFragment)\n        }\n    }\n\n    private fun onAdminClick() {\n        binding.linearAdmin.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_adminDashboardFragment)\n        }\n    }\n\n\n    private fun onJoinPartnershipCLick() {\n        binding.linearJoinPartnership.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_joinPartnerFragment)\n        }\n    }\n    private fun onViewPartnershipClick() {\n        binding.linearViewPartnership.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_viewPartnershipFragment)\n        }\n    }\n\n    private fun onTrackOrderClick() {\n        binding.linearTrackOrder.setOnClickListener {\n            val snackBar = requireActivity().findViewById<CoordinatorLayout>(R.id.snackBar_coordinator)\n            Snackbar.make(snackBar,resources.getText(R.string.g_coming_soon),Snackbar.LENGTH_SHORT).show()\n        }\n    }\n\n    private fun onAllOrderClick() {\n        binding.allOrders.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_allOrdersFragment)\n        }\n    }\n\n    private fun onProfileClick() {\n        binding.constraintProfile.setOnClickListener {\n            user?.let {\n                val bundle = Bundle()\n                bundle.putParcelable(\"user\",user)\n                findNavController().navigate(R.id.action_profileFragment_to_editUserInformation,bundle)\n            }\n        }\n\n\n    }\n\n    var user: User?=null\n    private fun observeProfile() {\n        viewModel.profile.observe(viewLifecycleOwner) { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@observe\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n                    val user = response.data\n                    this.user = user\n                    binding.apply {\n                        tvUserName.text = user?.firstName + \" \" + user?.lastName\n                        Glide.with(requireView()).load(user?.imagePath)\n                            .error(R.drawable.ic_default_profile_picture).into(binding.imgUser)\n                    }\n                    return@observe\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@observe\n                }\n            }\n        }\n    }\n\n    private fun hideLoading() {\n        binding.apply {\n            binding.progressbarSettings.visibility = View.GONE\n            constraintParnet.visibility = View.VISIBLE\n        }\n    }\n\n    private fun showLoading() {\n        binding.apply {\n            binding.progressbarSettings.visibility = View.VISIBLE\n            constraintParnet.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun onBillingAndAddressesClick() {\n        binding.linearBilling.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"clickFlag\", UPDATE_ADDRESS_FLAG)\n            findNavController().navigate(R.id.action_profileFragment_to_billingFragment, bundle)\n        }\n    }\n\n    private fun onLogoutClick() {\n\n        binding.linearOut.setOnClickListener {\n            FirebaseAuth.getInstance().signOut()\n            val intent = Intent(context, LunchActivity::class.java)\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\n            startActivity(intent)\n        }\n    }\n\n    private fun onHomeClick() {\n        val btm = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        btm?.menu?.getItem(0)?.setOnMenuItemClickListener {\n            activity?.onBackPressed()\n            true\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        val bottomNavigation = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNavigation?.visibility = View.VISIBLE\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt	(date 1695480063692)
@@ -10,12 +10,17 @@
 import android.widget.Toast
 import androidx.coordinatorlayout.widget.CoordinatorLayout
 import androidx.navigation.fragment.findNavController
+import androidx.recyclerview.widget.LinearLayoutManager
 import com.bumptech.glide.Glide
 import com.example.kleine.BuildConfig
 import com.example.kleine.R
 import com.example.kleine.activities.LunchActivity
 import com.example.kleine.activities.ShoppingActivity
+import com.example.kleine.adapters.recyclerview.AllOrdersAdapter
+import com.example.kleine.adapters.recyclerview.MaterialAdapter
 import com.example.kleine.databinding.FragmentProfileBinding
+import com.example.kleine.model.Enrollment
+import com.example.kleine.model.Material
 import com.example.kleine.model.User
 import com.example.kleine.resource.Resource
 import com.example.kleine.util.Constants.Companion.UPDATE_ADDRESS_FLAG
@@ -30,6 +35,11 @@
     val TAG = "ProfileFragment"
     private lateinit var binding: FragmentProfileBinding
     private lateinit var viewModel: ShoppingViewModel
+    private lateinit var materialAdapter: MaterialAdapter
+
+    private lateinit var enrolledMaterials: List<Material>
+
+
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -79,6 +89,8 @@
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
 
+        materialAdapter = MaterialAdapter()
+
         onHomeClick()
         onLogoutClick()
         onBillingAndAddressesClick()
@@ -137,12 +149,69 @@
         }
     }
 
+
+
     private fun onAllOrderClick() {
         binding.allOrders.setOnClickListener {
+            fetchUserEnrollments()
             findNavController().navigate(R.id.action_profileFragment_to_allOrdersFragment)
         }
     }
 
+
+
+    private fun fetchUserEnrollments() {
+        val userId = FirebaseAuth.getInstance().currentUser?.uid
+        if (userId != null) {
+            val firestore = FirebaseFirestore.getInstance()
+            firestore.collection("enrollments")
+                .whereEqualTo("userId", userId)
+                .get()
+                .addOnSuccessListener { querySnapshot ->
+                    val enrollments = querySnapshot.documents.mapNotNull { document ->
+                        document.toObject(Enrollment::class.java)
+                    }
+                    fetchMaterialsForEnrollments(enrollments)
+                }
+                .addOnFailureListener { exception ->
+                    Log.e(TAG, "Error fetching user enrollments", exception)
+                    // Handle the error appropriately
+                }
+        } else {
+            // Handle the case where the user is not logged in
+        }
+    }
+
+    private fun fetchMaterialsForEnrollments(enrollments: List<Enrollment>) {
+        val firestore = FirebaseFirestore.getInstance()
+        val materialIds = enrollments.map { it.materialId }
+
+        firestore.collection("Materials")
+            .whereIn("id", materialIds)
+            .get()
+            .addOnSuccessListener { querySnapshot ->
+                val materials = querySnapshot.documents.mapNotNull { document ->
+                    document.toObject(Material::class.java)
+                }
+                displayMaterials(materials)
+            }
+            .addOnFailureListener { exception ->
+                Log.e(TAG, "Error fetching materials", exception)
+                // Handle the error appropriately
+            }
+    }
+
+
+
+    private fun displayMaterials(materials: List<Material>) {
+        // Update your UI with the fetched materials
+        // For example, update the RecyclerView Adapter with the materials
+        materialAdapter.differ.submitList(materials)
+    }
+
+
+
+
     private fun onProfileClick() {
         binding.constraintProfile.setOnClickListener {
             user?.let {
Index: app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.shopping\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport android.widget.Toast\nimport androidx.appcompat.app.AlertDialog\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProviders\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.SpacingDecorator.VerticalSpacingItemDecorator\nimport com.example.kleine.adapters.recyclerview.CartRecyclerAdapter\nimport com.example.kleine.databinding.FragmentCartBinding\nimport com.example.kleine.model.CartProductsList\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.SELECT_ADDRESS_FLAG\nimport com.example.kleine.viewmodel.shopping.cart.CartViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\n\nprivate const val TAG = \"CartFragment\"\nclass CartFragment : Fragment() {\n    private lateinit var binding: FragmentCartBinding\n    private lateinit var viewModel: CartViewModel\n    private lateinit var cartAdapter: CartRecyclerAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = ViewModelProviders.of(this)[CartViewModel::class.java]\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentCartBinding.inflate(inflater)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        onHomeClick()\n\n        setupRecyclerView()\n        observeCart()\n\n        onCloseImgClick()\n\n        onPlusClick()\n        onMinusClick()\n        onItemClick()\n\n        observeProductClickNavigation()\n\n        onCheckoutClick()\n\n    }\n\n    private fun onCheckoutClick() {\n        binding.btnCheckout.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"price\", binding.tvTotalprice.text.toString())\n            bundle.putString(\"clickFlag\", SELECT_ADDRESS_FLAG)\n            bundle.putParcelable(\"products\", cartProducts)\n            findNavController().navigate(R.id.action_cartFragment_to_billingFragment, bundle)\n        }\n    }\n\n    private fun observeProductClickNavigation() {\n        viewModel.product.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        val product = response.data\n                        val bundle = Bundle()\n                        bundle.putParcelable(\"material\", product)\n                        findNavController().navigate(\n                            R.id.action_homeFragment_to_materialDetailsFragment,\n                            bundle\n                        )\n                        viewModel.product.postValue(null)\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun observePlus() {\n        viewModel.plus.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun observeMinus() {\n        viewModel.minus.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n\n    private fun onItemClick() {\n        cartAdapter.onItemClick = { cartProduct ->\n            viewModel.getProductFromCartProduct(cartProduct)\n        }\n    }\n\n\n    private fun onMinusClick() {\n        cartAdapter.onMinusesClick = { cartProduct ->\n            if (cartProduct.quantity > 1) {\n                viewModel.decreaseQuantity(cartProduct)\n                observeMinus()\n            } else {\n                val alertDialog = AlertDialog.Builder(requireContext()).create()\n                alertDialog.setTitle(\"\")\n                val view =\n                    LayoutInflater.from(context).inflate(R.layout.delete_alert_dialog, null, false)\n                alertDialog.setView(view)\n\n                view.findViewById<Button>(R.id.btn_no).setOnClickListener {\n                    alertDialog.dismiss()\n                }\n\n                view.findViewById<Button>(R.id.btn_yes).setOnClickListener {\n                    viewModel.deleteProductFromCart(cartProduct)\n                    alertDialog.dismiss()\n                }\n\n                alertDialog.show()\n            }\n        }\n    }\n\n    private fun onPlusClick() {\n        cartAdapter.onPlusClick = { cartProduct ->\n            viewModel.increaseQuantity(cartProduct)\n            observePlus()\n        }\n    }\n\n    private fun onCloseImgClick() {\n        binding.imgCloseCart.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun setupRecyclerView() {\n        cartAdapter = CartRecyclerAdapter()\n        binding.apply {\n            rvCart.layoutManager = LinearLayoutManager(context)\n            rvCart.adapter = cartAdapter\n            rvCart.addItemDecoration(VerticalSpacingItemDecorator(50))\n        }\n    }\n\n    private var cartProducts: CartProductsList? = null\n    private fun observeCart() {\n        viewModel.cartProducts.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n\n                    //Handle empty cart case\n                    val products = response.data\n                    if (products!!.isNotEmpty()) { // cart is not empty\n                        cartProducts = CartProductsList(products)\n                        cartAdapter.differ.submitList(products)\n                        var totalPrice:Double = 0.0\n                        products.forEach {\n                            if (it.newPrice != null && it.newPrice.isNotEmpty() && it.newPrice != \"0\") {\n                                totalPrice += it.newPrice.toDouble() * it.quantity\n                            } else\n                                totalPrice += it.price.toDouble() * it.quantity\n\n\n                        }\n\n                        binding.tvTotalprice.text = \"$ $totalPrice\"\n\n                    } else { // cart is empty\n                        cartAdapter.differ.submitList(products)\n                        binding.apply {\n                            btnCheckout.visibility = View.INVISIBLE\n                            linear.visibility = View.INVISIBLE\n                            imgEmptyBox.visibility = View.VISIBLE\n                            imgEmptyBoxTexture.visibility = View.VISIBLE\n                            tvEmptyCart.visibility = View.VISIBLE\n                        }\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Log.e(TAG, response.message.toString())\n                    Toast.makeText(activity, \"Oops error occurred\", Toast.LENGTH_SHORT).show()\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun hideLoading() {\n        binding.apply {\n            progressBar.visibility = View.GONE\n            linear.visibility = View.VISIBLE\n            btnCheckout.visibility = View.VISIBLE\n            imgEmptyBox.visibility = View.GONE\n            imgEmptyBoxTexture.visibility = View.GONE\n            tvEmptyCart.visibility = View.GONE\n        }\n    }\n\n    private fun showLoading() {\n        binding.apply {\n            progressBar.visibility = View.VISIBLE\n            linear.visibility = View.INVISIBLE\n            btnCheckout.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun onHomeClick() {\n        val btm = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        btm?.menu?.getItem(0)?.setOnMenuItemClickListener {\n            activity?.onBackPressed()\n            true\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n\n        val bottomNavigation = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNavigation?.visibility = View.VISIBLE\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt	(date 1695480063950)
@@ -61,6 +61,8 @@
 
         onCheckoutClick()
 
+
+
     }
 
     private fun onCheckoutClick() {
@@ -73,6 +75,9 @@
         }
     }
 
+
+
+
     private fun observeProductClickNavigation() {
         viewModel.product.observe(viewLifecycleOwner, Observer { response ->
 
@@ -280,6 +285,9 @@
         })
     }
 
+
+
+
     private fun hideLoading() {
         binding.apply {
             progressBar.visibility = View.GONE
Index: app/src/main/res/layout/cart_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.cardview.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    app:cardElevation=\"0dp\"\n    android:id=\"@+id/card_view\"\n    android:backgroundTint=\"@color/g_white\">\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <ProgressBar\n            android:id=\"@+id/progressbar_plus_minus\"\n            android:layout_width=\"@dimen/_20sdp\"\n            android:layout_height=\"@dimen/_20sdp\"\n            android:indeterminateTint=\"@color/g_hint\"\n            android:visibility=\"gone\"\n            app:layout_constraintBottom_toTopOf=\"@id/img_plus\"\n            app:layout_constraintEnd_toEndOf=\"@id/img_plus\"\n            app:layout_constraintStart_toStartOf=\"@id/img_plus\"\n            app:layout_constraintTop_toBottomOf=\"@id/img_minus\" />\n\n        <ImageView\n            android:id=\"@+id/img_cart_product\"\n            android:layout_width=\"@dimen/_80sdp\"\n            android:layout_height=\"@dimen/_75sdp\"\n            android:layout_marginBottom=\"5dp\"\n            android:src=\"@drawable/test_image\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintBottom_toTopOf=\"@id/line\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n        <TextView\n            android:id=\"@+id/tv_cart_product_name\"\n            android:layout_width=\"@dimen/_180sdp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginStart=\"@dimen/_8sdp\"\n            android:layout_marginTop=\"@dimen/_8sdp\"\n            android:fontFamily=\"@font/poppins_light\"\n            android:text=\"Premium chair\"\n            android:textColor=\"@color/black\"\n            android:textSize=\"@dimen/_15ssp\"\n            android:textStyle=\"bold\"\n            app:layout_constraintStart_toEndOf=\"@id/img_cart_product\"\n            app:layout_constraintTop_toTopOf=\"@id/img_cart_product\" />\n\n        <TextView\n            android:id=\"@+id/tv_product_cart_price\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:fontFamily=\"@font/poppins_light\"\n            android:maxHeight=\"@dimen/_100sdp\"\n            android:text=\"$1600\"\n            android:textColor=\"@color/g_hint\"\n            android:textSize=\"@dimen/_10ssp\"\n            android:textStyle=\"bold\"\n            app:layout_constraintStart_toStartOf=\"@id/tv_cart_product_name\"\n            app:layout_constraintTop_toBottomOf=\"@id/tv_cart_product_name\" />\n\n\n        <ImageView\n            android:id=\"@+id/img_plus\"\n            android:layout_width=\"@dimen/_20sdp\"\n            android:layout_height=\"@dimen/_20sdp\"\n            android:layout_marginBottom=\"5dp\"\n            android:src=\"@drawable/ic_plus\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\" />\n\n        <ImageView\n            android:id=\"@+id/img_minus\"\n            android:layout_width=\"@dimen/_18sdp\"\n            android:layout_height=\"@dimen/_18sdp\"\n            android:layout_marginTop=\"1dp\"\n            android:layout_marginEnd=\"1dp\"\n            android:src=\"@drawable/ic_minus\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n        <TextView\n            android:id=\"@+id/tv_quantity\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"1\"\n            app:layout_constraintBottom_toTopOf=\"@id/img_minus\"\n            app:layout_constraintEnd_toEndOf=\"@id/img_minus\"\n            app:layout_constraintStart_toStartOf=\"@id/img_minus\"\n            app:layout_constraintTop_toBottomOf=\"@id/img_plus\" />\n\n        <View\n\n            android:id=\"@+id/line\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_1sdp\"\n            android:layout_marginTop=\"10dp\"\n            android:background=\"@drawable/line\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\" />\n\n\n        <de.hdodenhof.circleimageview.CircleImageView\n            android:id=\"@+id/img_color\"\n            android:layout_width=\"@dimen/_15sdp\"\n            android:layout_height=\"@dimen/_15sdp\"\n            android:layout_marginTop=\"5dp\"\n            android:src=\"@color/g_blue\"\n            app:layout_constraintStart_toStartOf=\"@id/tv_product_cart_price\"\n            app:layout_constraintTop_toBottomOf=\"@id/tv_product_cart_price\" />\n\n\n        <de.hdodenhof.circleimageview.CircleImageView\n            android:id=\"@+id/img_size\"\n            android:layout_width=\"@dimen/_15sdp\"\n            android:layout_height=\"@dimen/_15sdp\"\n            android:layout_marginStart=\"5dp\"\n            android:src=\"@color/g_icon_tint\"\n            app:layout_constraintStart_toEndOf=\"@id/img_color\"\n            app:layout_constraintTop_toTopOf=\"@id/img_color\" />\n\n        <TextView\n            android:id=\"@+id/tv_cart_size\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"XXL\"\n            android:textColor=\"@color/white\"\n            android:textSize=\"11sp\"\n            app:layout_constraintBottom_toBottomOf=\"@id/img_size\"\n            app:layout_constraintEnd_toEndOf=\"@id/img_size\"\n            app:layout_constraintStart_toStartOf=\"@id/img_size\"\n            app:layout_constraintTop_toTopOf=\"@id/img_size\" />\n\n\n\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n</androidx.cardview.widget.CardView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/cart_item.xml b/app/src/main/res/layout/cart_item.xml
--- a/app/src/main/res/layout/cart_item.xml	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/res/layout/cart_item.xml	(date 1695485107388)
@@ -1,6 +1,15 @@
 <?xml version="1.0" encoding="utf-8"?>
-<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools">
+    <data>
+        <variable
+            name="productModel"
+            type="com.example.kleine.model.Material" />
+    </data>
+
+
+<androidx.cardview.widget.CardView 
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
     app:cardElevation="0dp"
@@ -9,25 +18,17 @@
 
     <androidx.constraintlayout.widget.ConstraintLayout
         android:layout_width="match_parent"
-        android:layout_height="match_parent">
+        android:layout_height="100dp">
+
 
-        <ProgressBar
-            android:id="@+id/progressbar_plus_minus"
-            android:layout_width="@dimen/_20sdp"
-            android:layout_height="@dimen/_20sdp"
-            android:indeterminateTint="@color/g_hint"
-            android:visibility="gone"
-            app:layout_constraintBottom_toTopOf="@id/img_plus"
-            app:layout_constraintEnd_toEndOf="@id/img_plus"
-            app:layout_constraintStart_toStartOf="@id/img_plus"
-            app:layout_constraintTop_toBottomOf="@id/img_minus" />
+
 
         <ImageView
             android:id="@+id/img_cart_product"
             android:layout_width="@dimen/_80sdp"
             android:layout_height="@dimen/_75sdp"
             android:layout_marginBottom="5dp"
-            android:src="@drawable/test_image"
+            android:src="@drawable/default_book_logo"
             app:layout_constraintBottom_toBottomOf="parent"
             app:layout_constraintBottom_toTopOf="@id/line"
             app:layout_constraintStart_toStartOf="parent"
@@ -40,7 +41,7 @@
             android:layout_marginStart="@dimen/_8sdp"
             android:layout_marginTop="@dimen/_8sdp"
             android:fontFamily="@font/poppins_light"
-            android:text="Premium chair"
+            android:text="@{productModel.name}"
             android:textColor="@color/black"
             android:textSize="@dimen/_15ssp"
             android:textStyle="bold"
@@ -53,7 +54,7 @@
             android:layout_height="wrap_content"
             android:fontFamily="@font/poppins_light"
             android:maxHeight="@dimen/_100sdp"
-            android:text="$1600"
+            android:text="@{String.valueOf(productModel.desc)}"
             android:textColor="@color/g_hint"
             android:textSize="@dimen/_10ssp"
             android:textStyle="bold"
@@ -61,35 +62,17 @@
             app:layout_constraintTop_toBottomOf="@id/tv_cart_product_name" />
 
 
+
+
         <ImageView
-            android:id="@+id/img_plus"
-            android:layout_width="@dimen/_20sdp"
-            android:layout_height="@dimen/_20sdp"
-            android:layout_marginBottom="5dp"
-            android:src="@drawable/ic_plus"
+            android:id="@+id/tv_quantity"
+            android:layout_width="75dp"
+            android:layout_height="match_parent"
+            android:src="@drawable/ic_download"
             app:layout_constraintBottom_toBottomOf="parent"
-            app:layout_constraintEnd_toEndOf="parent" />
-
-        <ImageView
-            android:id="@+id/img_minus"
-            android:layout_width="@dimen/_18sdp"
-            android:layout_height="@dimen/_18sdp"
-            android:layout_marginTop="1dp"
-            android:layout_marginEnd="1dp"
-            android:src="@drawable/ic_minus"
             app:layout_constraintEnd_toEndOf="parent"
             app:layout_constraintTop_toTopOf="parent" />
 
-        <TextView
-            android:id="@+id/tv_quantity"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="1"
-            app:layout_constraintBottom_toTopOf="@id/img_minus"
-            app:layout_constraintEnd_toEndOf="@id/img_minus"
-            app:layout_constraintStart_toStartOf="@id/img_minus"
-            app:layout_constraintTop_toBottomOf="@id/img_plus" />
-
         <View
 
             android:id="@+id/line"
@@ -102,39 +85,12 @@
             app:layout_constraintStart_toStartOf="parent" />
 
 
-        <de.hdodenhof.circleimageview.CircleImageView
-            android:id="@+id/img_color"
-            android:layout_width="@dimen/_15sdp"
-            android:layout_height="@dimen/_15sdp"
-            android:layout_marginTop="5dp"
-            android:src="@color/g_blue"
-            app:layout_constraintStart_toStartOf="@id/tv_product_cart_price"
-            app:layout_constraintTop_toBottomOf="@id/tv_product_cart_price" />
-
 
-        <de.hdodenhof.circleimageview.CircleImageView
-            android:id="@+id/img_size"
-            android:layout_width="@dimen/_15sdp"
-            android:layout_height="@dimen/_15sdp"
-            android:layout_marginStart="5dp"
-            android:src="@color/g_icon_tint"
-            app:layout_constraintStart_toEndOf="@id/img_color"
-            app:layout_constraintTop_toTopOf="@id/img_color" />
 
-        <TextView
-            android:id="@+id/tv_cart_size"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="XXL"
-            android:textColor="@color/white"
-            android:textSize="11sp"
-            app:layout_constraintBottom_toBottomOf="@id/img_size"
-            app:layout_constraintEnd_toEndOf="@id/img_size"
-            app:layout_constraintStart_toStartOf="@id/img_size"
-            app:layout_constraintTop_toTopOf="@id/img_size" />
 
-
+  />
 
 
     </androidx.constraintlayout.widget.ConstraintLayout>
-</androidx.cardview.widget.CardView>
\ No newline at end of file
+</androidx.cardview.widget.CardView>
+</layout>
\ No newline at end of file
Index: app/src/main/java/com/example/kleine/fragments/shopping/AddMaterialFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/AddMaterialFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/AddMaterialFragment.kt
new file mode 100644
--- /dev/null	(date 1695559950940)
+++ b/app/src/main/java/com/example/kleine/fragments/shopping/AddMaterialFragment.kt	(date 1695559950940)
@@ -0,0 +1,130 @@
+package com.example.kleine.fragments.shopping
+
+import android.app.Activity
+import android.content.Intent
+import android.net.Uri
+import android.os.Bundle
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.fragment.app.Fragment
+import androidx.lifecycle.ViewModelProvider
+import androidx.navigation.fragment.findNavController
+import com.example.kleine.databinding.MaterialAddBinding
+import com.example.kleine.model.Material
+import com.example.kleine.viewmodel.material.MaterialViewModel
+import com.google.firebase.auth.FirebaseAuth
+
+
+class AddMaterialFragment : Fragment() {
+
+    private lateinit var binding: MaterialAddBinding // Corrected binding class name
+    private lateinit var viewModel: MaterialViewModel
+
+
+    private val REQUEST_CODE_IMAGE_PICK = 1
+    private val REQUEST_CODE_DOCUMENT_PICK = 2
+
+    private var selectedImageUri: Uri? = null
+    private var selectedDocumentUri: Uri? = null
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View {
+        binding = MaterialAddBinding.inflate(inflater, container, false)
+        return binding.root
+    }
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        viewModel = ViewModelProvider(this).get(MaterialViewModel::class.java)
+        // Retrieve the user's document ID (replace with your actual method)
+        val userDocumentId = getUserDocumentId()
+        binding.textViewPartnershipID.text = "Partnership ID: $userDocumentId"
+
+
+        binding.buttonSelectImage.setOnClickListener {
+            val intent = Intent(Intent.ACTION_PICK)
+            intent.type = "image/*"
+            startActivityForResult(intent, REQUEST_CODE_IMAGE_PICK)
+        }
+
+        binding.buttonUploadDocument.setOnClickListener {
+            val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)
+            intent.addCategory(Intent.CATEGORY_OPENABLE)
+            intent.type = "*/*"
+            startActivityForResult(intent, REQUEST_CODE_DOCUMENT_PICK)
+        }
+
+        binding.buttonSubmit.setOnClickListener {
+            // Validate and get data from UI elements
+            val name = binding.editTextName.text.toString()
+            val description = binding.editTextDesc.text.toString()
+            val requirement = binding.editTextRequirement.text.toString()
+            val status = binding.editTextStatus.text.toString()
+
+            if (name.isNotEmpty() && description.isNotEmpty() && requirement.isNotEmpty() && status.isNotEmpty()) {
+                val material = Material(
+                    name = name,
+                    desc = description,
+                    requirement = requirement,
+                    status = status,
+                    partnershipsID = userDocumentId // Set the user's document ID here
+
+                )
+
+                // Call ViewModel to add material and upload selected files
+                viewModel.addMaterial(material, selectedImageUri, selectedDocumentUri)
+
+                // Show a success message using a toast
+                Toast.makeText(requireContext(), "Material submitted successfully", Toast.LENGTH_SHORT).show()
+
+                // Navigate up (assuming you are using Navigation Component)
+                findNavController().navigateUp()
+            } else {
+                Toast.makeText(requireContext(), "Please fill all fields", Toast.LENGTH_SHORT).show()
+            }
+        }
+    }
+
+    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
+        super.onActivityResult(requestCode, resultCode, data)
+        if (resultCode == Activity.RESULT_OK) {
+            when (requestCode) {
+                REQUEST_CODE_IMAGE_PICK -> {
+                    selectedImageUri = data?.data
+                    binding.imageViewCourseBanner.setImageURI(selectedImageUri)
+                }
+                REQUEST_CODE_DOCUMENT_PICK -> {
+                    selectedDocumentUri = data?.data
+                    // Show a message that the document has been uploaded
+                    binding.textViewDocumentStatus.text = "Document has been uploaded."
+                }
+            }
+        }
+    }
+
+
+    private fun getUserDocumentId(): String {
+        // Initialize Firebase Authentication
+        val auth = FirebaseAuth.getInstance()
+
+        // Check if a user is currently authenticated
+        val user = auth.currentUser
+
+        // If a user is authenticated, you can retrieve their UID (user ID)
+        return user?.uid ?: ""
+    }
+
+
+
+    companion object {
+        private const val REQUEST_CODE_IMAGE_PICK = 1
+        private const val REQUEST_CODE_DOCUMENT_PICK = 2
+    }
+}
+
+
+
+
Index: app/src/main/res/layout/material_add.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/material_add.xml b/app/src/main/res/layout/material_add.xml
new file mode 100644
--- /dev/null	(date 1695491916823)
+++ b/app/src/main/res/layout/material_add.xml	(date 1695491916823)
@@ -0,0 +1,90 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:padding="16dp">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:padding="16dp">
+
+        <EditText
+            android:id="@+id/editTextName"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="Course Name"
+            android:inputType="text" />
+
+        <EditText
+            android:id="@+id/editTextDesc"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="Description"
+            android:inputType="textMultiLine"
+            android:minLines="3" />
+
+        <EditText
+            android:id="@+id/editTextRequirement"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="Requirement"
+            android:inputType="text" />
+
+        <EditText
+            android:id="@+id/editTextStatus"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="Status"
+            android:inputType="text" />
+
+        <TextView
+            android:id="@+id/textViewPartnershipID"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="16dp"
+            android:text="Partnership ID: "
+            android:textStyle="bold" />
+
+        <ImageView
+            android:id="@+id/imageViewCourseBanner"
+            android:layout_width="match_parent"
+            android:layout_height="200dp"
+            android:layout_marginTop="16dp"
+            android:scaleType="centerCrop" />
+        <TextView
+            android:id="@+id/textViewDocumentStatus"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="16dp"
+            android:text="Document not uploaded."
+            android:textStyle="italic" />
+
+
+        <Button
+            android:id="@+id/buttonSelectImage"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="16dp"
+            android:text="Select Image" />
+
+        <Button
+            android:id="@+id/buttonUploadDocument"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="16dp"
+            android:text="Upload Document" />
+
+        <Button
+            android:id="@+id/buttonSubmit"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="16dp"
+            android:text="Submit" />
+    </LinearLayout>
+</ScrollView>
Index: app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.firebaseDatabase\n\nimport android.util.Log\nimport com.example.kleine.model.*\nimport com.example.kleine.util.Constants.Companion.ADDRESS_COLLECTION\nimport com.example.kleine.util.Constants.Companion.BEST_DEALS\nimport com.example.kleine.util.Constants.Companion.CART_COLLECTION\nimport com.example.kleine.util.Constants.Companion.CATEGORIES_COLLECTION\nimport com.example.kleine.util.Constants.Companion.CATEGORY\nimport com.example.kleine.util.Constants.Companion.CHAIR_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CLOTHES\nimport com.example.kleine.util.Constants.Companion.COLOR\nimport com.example.kleine.util.Constants.Companion.CUPBOARD_CATEGORY\nimport com.example.kleine.util.Constants.Companion.ID\nimport com.example.kleine.util.Constants.Companion.ORDERS\nimport com.example.kleine.util.Constants.Companion.ORDER_CONFIRM_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_PLACED_STATE\nimport com.example.kleine.util.Constants.Companion.PRICE\nimport com.example.kleine.util.Constants.Companion.PRODUCTS_COLLECTION\nimport com.example.kleine.util.Constants.Companion.QUANTITY\nimport com.example.kleine.util.Constants.Companion.SIZE\nimport com.example.kleine.util.Constants.Companion.STORES_COLLECTION\nimport com.example.kleine.util.Constants.Companion.TITLE\nimport com.example.kleine.util.Constants.Companion.USERS_COLLECTION\n\n\nimport com.google.android.gms.tasks.Task\nimport com.google.firebase.auth.AuthCredential\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.ktx.auth\nimport com.google.firebase.firestore.DocumentSnapshot\nimport com.google.firebase.firestore.FirebaseFirestore\nimport com.google.firebase.firestore.Query\nimport com.google.firebase.firestore.QuerySnapshot\nimport com.google.firebase.firestore.Transaction\nimport com.google.firebase.firestore.ktx.firestore\nimport com.google.firebase.ktx.Firebase\nimport com.google.firebase.storage.FirebaseStorage\nimport com.google.firebase.storage.UploadTask\nimport com.google.firebase.storage.ktx.storage\nimport java.util.*\nimport kotlin.collections.ArrayList\nimport kotlin.collections.HashMap\nimport kotlin.random.Random\n\nclass FirebaseDb {\n    private val usersCollectionRef = Firebase.firestore.collection(USERS_COLLECTION)\n    private val productsCollection = Firebase.firestore.collection(PRODUCTS_COLLECTION)\n    private val categoriesCollection = Firebase.firestore.collection(CATEGORIES_COLLECTION)\n    private val storesCollection = Firebase.firestore.collection(STORES_COLLECTION)\n\n\n    private val firebaseStorage = Firebase.storage.reference\n\n    val userUid = FirebaseAuth.getInstance().currentUser?.uid\n\n    private val userCartCollection = userUid?.let {\n        Firebase.firestore.collection(USERS_COLLECTION).document(it).collection(CART_COLLECTION)\n    }\n    private val userAddressesCollection = userUid?.let {\n        Firebase.firestore.collection(USERS_COLLECTION).document(it).collection(ADDRESS_COLLECTION)\n\n    }\n\n\n    private val firebaseAuth = Firebase.auth\n\n    fun getProductsByCategory(category: String,page:Long) =\n        productsCollection.whereEqualTo(CATEGORY,category).limit(page).get()\n\n\n    fun getMostRequestedProducts(category: String,page:Long) =\n        productsCollection.whereEqualTo(CATEGORY, category)\n            .orderBy(ORDERS, Query.Direction.DESCENDING).limit(page).get()\n\n\n    fun createNewUser(\n        email: String, password: String\n    ) = firebaseAuth.createUserWithEmailAndPassword(email, password)\n\n    fun saveUserInformation(userUid: String, user: User, completion: (Exception?) -> Unit) {\n        usersCollectionRef.document(userUid).set(user)\n            .addOnSuccessListener { completion(null) }\n            .addOnFailureListener { e -> completion(e) }\n    }\n\n\n\n\n    fun loginUser(\n        email: String,\n        password: String\n    ) = firebaseAuth.signInWithEmailAndPassword(email, password)\n\n    fun getClothesProducts(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, CLOTHES).limit(pagingPage).get()\n\n    fun getBestDealsProducts(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, BEST_DEALS).limit(pagingPage).get()\n\n    fun getHomeProducts(pagingPage: Long) =\n        productsCollection.limit(pagingPage).get()\n\n    //add order by orders\n    fun getMostOrderedCupboard(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, CUPBOARD_CATEGORY).limit(pagingPage)\n            .orderBy(ORDERS, Query.Direction.DESCENDING).limit(pagingPage).get()\n\n    fun getCupboards(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, CUPBOARD_CATEGORY).limit(pagingPage)\n            .limit(pagingPage).get()\n\n    fun addProductToCart(product: CartProduct) = userCartCollection?.document()!!.set(product)\n\n    fun getProductInCart(product: CartProduct) = userCartCollection!!\n        .whereEqualTo(ID, product.id)\n        .whereEqualTo(COLOR, product.color)\n        .whereEqualTo(SIZE, product.size).get()\n\n    fun increaseProductQuantity(documentId: String): Task<Transaction> {\n        val document = userCartCollection!!.document(documentId)\n        return Firebase.firestore.runTransaction { transaction ->\n            val productBefore = transaction.get(document)\n            var quantity = productBefore.getLong(QUANTITY)\n            quantity = quantity!! + 1\n            transaction.update(document, QUANTITY, quantity)\n        }\n\n    }\n\n    fun getItemsInCart() = userCartCollection!!\n\n    fun decreaseProductQuantity(documentId: String): Task<Transaction> {\n        val document = userCartCollection!!.document(documentId)\n        return Firebase.firestore.runTransaction { transaction ->\n            val productBefore = transaction.get(document)\n            var quantity = productBefore.getLong(QUANTITY)\n            quantity = if (quantity!!.toInt() == 1)\n                1\n            else\n                quantity - 1\n            transaction.update(document, QUANTITY, quantity)\n\n        }\n\n    }\n\n    fun getMaterials(page: Long): Task<QuerySnapshot> {\n        return FirebaseFirestore.getInstance().collection(\"Materials\").limit(page).get()\n    }\n\n\n\n    fun deleteProductFromCart(documentId: String) =\n        userCartCollection!!.document(documentId).delete()\n\n\n    fun searchProducts(searchQuery: String) = productsCollection\n        .orderBy(\"title\")\n        .startAt(searchQuery)\n        .endAt(\"\\u03A9+$searchQuery\")\n        .limit(5)\n        .get()\n\n    fun getCategories() = categoriesCollection.orderBy(\"rank\").get()\n\n    fun getProductFromCartProduct(cartProduct: CartProduct) =\n        productsCollection.whereEqualTo(ID, cartProduct.id)\n            .whereEqualTo(TITLE, cartProduct.name)\n            .whereEqualTo(PRICE, cartProduct.price).get()\n\n    fun saveNewAddress(address: Address) = userAddressesCollection?.add(address)\n\n    fun getAddresses() = userAddressesCollection\n\n    fun findAddress(address: Address) = userAddressesCollection!!\n        .whereEqualTo(\"addressTitle\", address.addressTitle)\n        .whereEqualTo(\"fullName\", address.fullName).get()\n\n    fun updateAddress(documentUid: String, address: Address) =\n        userAddressesCollection?.document(documentUid)?.set(address)\n\n    fun deleteAddress(documentUid: String, address: Address) =\n        userAddressesCollection?.document(documentUid)?.delete()\n\n    fun placeOrder(products: List<CartProduct>, address: Address, order: Order) =\n        Firebase.firestore.runBatch { batch ->\n            //filter every product to its store\n            /**\n             * create a map of products that has the size of stores list,\n            the map has stores name as keys\n             */\n\n            val stores = ArrayList<String>()\n            products.forEach { cartProduct ->\n                if (!stores.contains(cartProduct.store)) {\n                    stores.add(cartProduct.store)\n                }\n            }\n\n            val productsMap = HashMap<String, ArrayList<CartProduct>>(stores.size)\n            stores.forEach { storeName ->\n                val tempList = ArrayList<CartProduct>()\n                products.forEach { cartProduct ->\n                    if (cartProduct.store == storeName)\n                        tempList.add(cartProduct)\n                    productsMap[storeName] = tempList\n                }\n            }\n\n\n            /**\n            // Adding order,address and products to each store\n             */\n            productsMap.forEach {\n                val store = it.key\n                val orderProducts = it.value\n                val orderNum = order.id\n                var price = 0\n\n                orderProducts.forEach { it2 ->\n                    if (it2.newPrice != null && it2.newPrice.isNotEmpty()) {\n                        price += it2.newPrice.toInt() * it2.quantity\n                    } else\n                        price += it2.price.toInt() * it2.quantity\n                }\n\n                Log.d(\"test\", \"$store $price\")\n\n                val storeOrder = Order(\n                    orderNum.toString(),\n                    Calendar.getInstance().time,\n                    price.toString(),\n                    ORDER_PLACED_STATE\n                )\n\n                val storeDocument = storesCollection\n                    .document(store)\n                    .collection(\"orders\")\n                    .document()\n\n                batch.set(storeDocument, storeOrder)\n\n                val storeOrderAddress = storeDocument.collection(ADDRESS_COLLECTION).document()\n                batch.set(storeOrderAddress, address)\n\n\n                orderProducts.forEach {\n                    val storeOrderProducts =\n                        storeDocument.collection(PRODUCTS_COLLECTION).document()\n                    batch.set(storeOrderProducts, it)\n                }\n\n\n            }\n\n            /**\n            // Adding order,address and products to the user\n             */\n            val userOrderDocument =\n                usersCollectionRef.document(FirebaseAuth.getInstance().currentUser!!.uid)\n                    .collection(\"orders\").document()\n            batch.set(userOrderDocument, order)\n\n            products.forEach {\n                val userProductDocument =\n                    userOrderDocument.collection(PRODUCTS_COLLECTION).document()\n                batch.set(userProductDocument, it)\n            }\n\n            val userAddressDocument = userOrderDocument.collection(ADDRESS_COLLECTION).document()\n\n            batch.set(userAddressDocument, address)\n\n        }.also {\n            deleteCartItems()\n        }\n\n    private fun deleteCartItems() {\n        userCartCollection?.get()?.addOnSuccessListener {\n            Firebase.firestore.runBatch { batch ->\n                it.documents.forEach {\n                    val document = userCartCollection.document(it.id)\n                    batch.delete(document)\n                }\n            }\n        }\n    }\n\n\n    fun getUser() = usersCollectionRef\n        .document(FirebaseAuth.getInstance().currentUser!!.uid)\n\n\n    fun uploadUserProfileImage(image: ByteArray, imageName: String): UploadTask {\n        val imageRef = firebaseStorage.child(\"profileImages\")\n            .child(firebaseAuth.currentUser!!.uid)\n            .child(imageName)\n\n        return imageRef.putBytes(image)\n\n    }\n\n    fun getImageUrl(\n        firstName: String,\n        lastName: String,\n        email: String,\n        imageName: String,\n        onResult: (User?, String?) -> Unit,\n    ) {\n        if (imageName.isNotEmpty())\n            firebaseStorage.child(\"profileImages\")\n                .child(firebaseAuth.currentUser!!.uid)\n                .child(imageName).downloadUrl.addOnCompleteListener {\n                    if (it.isSuccessful) {\n                        val imageUrl = it.result.toString()\n                        val user = User(firstName, lastName, email, imageUrl)\n                        onResult(user, null)\n                    } else\n                        onResult(null, it.exception.toString())\n\n                } else {\n            val user = User(firstName, lastName, email, \"\")\n            onResult(user, null)\n        }\n    }\n\n    fun updateUserInformation(user: User) =\n        Firebase.firestore.runTransaction { transaction ->\n            val userPath = usersCollectionRef.document(Firebase.auth.currentUser!!.uid)\n            if (user.imagePath.isNotEmpty()) {\n                transaction.set(userPath, user)\n            } else {\n                val imagePath = transaction.get(userPath)[\"imagePath\"] as String\n                user.imagePath = imagePath\n                transaction.set(userPath, user)\n            }\n\n        }\n\n\n    fun getUserOrders() = usersCollectionRef\n        .document(FirebaseAuth.getInstance().currentUser!!.uid)\n        .collection(ORDERS)\n        .orderBy(\"date\", Query.Direction.DESCENDING)\n        .get()\n\n    fun resetPassword(email: String) = firebaseAuth.sendPasswordResetEmail(email)\n\n    fun getOrderAddressAndProducts(\n        order: Order,\n        address: (Address?, String?) -> Unit,\n        products: (List<CartProduct>?, String?) -> Unit\n    ) {\n        usersCollectionRef\n            .document(Firebase.auth.currentUser!!.uid).collection(ORDERS)\n            .whereEqualTo(\"id\", order.id)\n            .get().addOnCompleteListener {\n                if (it.isSuccessful) {\n                    val id = it.result?.documents?.get(0)?.id\n                    usersCollectionRef.document(Firebase.auth.currentUser!!.uid)\n                        .collection(ORDERS).document(id!!).collection(ADDRESS_COLLECTION).get()\n                        .addOnCompleteListener { it2 ->\n                            if (it2.isSuccessful) {\n                                val address2 = it2.result?.toObjects(Address::class.java)\n                                Log.d(\"test\", address2!!.size.toString())\n                                address(address2?.get(0), null)\n                            } else\n                                address(null, it2.exception.toString())\n                        }\n\n                    usersCollectionRef.document(Firebase.auth.currentUser!!.uid)\n                        .collection(ORDERS).document(id).collection(PRODUCTS_COLLECTION).get()\n                        .addOnCompleteListener { it2 ->\n                            if (it2.isSuccessful) {\n                                val products2 = it2.result?.toObjects(CartProduct::class.java)\n                                Log.d(\"test\", products2!!.size.toString())\n                                products(products2, null)\n                            } else\n                                products(null, it2.exception.toString())\n                        }\n\n\n                } else {\n                    address(null, it.exception.toString())\n                    products(null, it.exception.toString())\n                }\n            }\n    }\n\n    //true -> already existed account\n    //false -> new account\n    fun checkUserByEmail(email: String, onResult: (String?, Boolean?) -> Unit) {\n        usersCollectionRef.whereEqualTo(\"email\", email).get()\n            .addOnCompleteListener {\n                if (it.isSuccessful) {\n                    val user = it.result.toObjects(User::class.java)\n                    if (user.isEmpty())\n                        onResult(null, false)\n                    else\n                        onResult(null, true)\n                } else\n                    onResult(it.exception.toString(), null)\n            }\n    }\n\n    fun signInWithGoogle(credential: AuthCredential) =\n        FirebaseAuth.getInstance().signInWithCredential(credential)\n\n    fun fetchStore(uid:String) = storesCollection.whereEqualTo(\"uid\",uid).get()\n\n\n\n    fun logout() = Firebase.auth.signOut()\n\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt b/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt
--- a/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt	(date 1695480063624)
@@ -25,6 +25,7 @@
 
 
 import com.google.android.gms.tasks.Task
+import com.google.android.gms.tasks.TaskCompletionSource
 import com.google.firebase.auth.AuthCredential
 import com.google.firebase.auth.FirebaseAuth
 import com.google.firebase.auth.ktx.auth
@@ -145,9 +146,28 @@
 
     }
 
-    fun getMaterials(page: Long): Task<QuerySnapshot> {
-        return FirebaseFirestore.getInstance().collection("Materials").limit(page).get()
+    fun getMaterials(page: Long): Task<List<Material>> {
+        val taskCompletionSource = TaskCompletionSource<List<Material>>()
+
+        FirebaseFirestore.getInstance().collection("Materials").limit(page).get()
+            .addOnSuccessListener { querySnapshot ->
+                val materials = querySnapshot.documents.mapNotNull { document ->
+                    val material = document.toObject(Material::class.java)
+                    material?.id = document.id // Set the id of the Material object
+                    material
+                }
+                // Set the result to the TaskCompletionSource
+                taskCompletionSource.setResult(materials)
+            }
+            .addOnFailureListener { exception ->
+                // Set the exception to the TaskCompletionSource
+                taskCompletionSource.setException(exception)
+            }
+
+        return taskCompletionSource.task
     }
+
+
 
 
 
Index: app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.viewmodel.shopping\n\nimport android.util.Log\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.kleine.firebaseDatabase.FirebaseDb\nimport com.example.kleine.model.*\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.ACCESSORY_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CHAIR_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CUPBOARD_CATEGORY\nimport com.example.kleine.util.Constants.Companion.FURNITURE_CATEGORY\nimport com.example.kleine.util.Constants.Companion.TABLES_CATEGORY\nimport com.google.firebase.firestore.FirebaseFirestore\nimport java.util.*\n\nprivate const val TAG = \"ShoppingViewModel\"\n\nclass ShoppingViewModel(\n    private val firebaseDatabase: FirebaseDb\n) : ViewModel() {\n\n\n    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()\n//    val materialsLiveData: MutableLiveData<Resource<List<Material>>> = MutableLiveData()\n    val materials: MutableLiveData<Resource<List<Material>>> = MutableLiveData()\n\n    private val _materialsLiveData = MutableLiveData<Resource<List<Material>>>()\n    val materialsLiveData: LiveData<Resource<List<Material>>> get() = _materialsLiveData\n\n\n//    val materials = MutableLiveData<Resource<List<Material>>>()\n\n    val clothes = MutableLiveData<List<Product>>()\n    val emptyClothes = MutableLiveData<Boolean>()\n    val bestDeals = MutableLiveData<List<Product>>()\n    val emptyBestDeals = MutableLiveData<Boolean>()\n\n    val home = MutableLiveData<Resource<List<Product>>>()\n\n    val chairs = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedChairs = MutableLiveData<Resource<List<Product>>>()\n\n    val tables = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedTables = MutableLiveData<Resource<List<Product>>>()\n\n    val accessory = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedAccessories = MutableLiveData<Resource<List<Product>>>()\n\n    val furniture = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedFurniture = MutableLiveData<Resource<List<Product>>>()\n\n    val mostRequestedCupboard = MutableLiveData<Resource<List<Product>>>()\n    val cupboard = MutableLiveData<Resource<List<Product>>>()\n    val addToCart = MutableLiveData<Resource<Boolean>>()\n\n    val addAddress = MutableLiveData<Resource<Address>>()\n    val updateAddress = MutableLiveData<Resource<Address>>()\n    val deleteAddress = MutableLiveData<Resource<Address>>()\n\n    val profile = MutableLiveData<Resource<User>>()\n\n    val uploadProfileImage = MutableLiveData<Resource<String>>()\n    val updateUserInformation = MutableLiveData<Resource<User>>()\n\n    val userOrders = MutableLiveData<Resource<List<Order>>>()\n\n    val passwordReset = MutableLiveData<Resource<String>>()\n\n    val orderAddress = MutableLiveData<Resource<Address>>()\n    val orderProducts = MutableLiveData<Resource<List<CartProduct>>>()\n\n    val categories = MutableLiveData<Resource<List<Category>>>()\n\n\n    val search = MutableLiveData<Resource<List<Product>>>()\n\n    private var homePage: Long = 10\n    private var clothesPaging: Long = 5\n    private var bestDealsPaging: Long = 5\n\n    private var cupboardPaging: Long = 4\n    private var mostOrderCupboardPaging: Long = 5\n\n    private var mostRequestedChairsPage: Long = 3\n    private var chairsPage: Long = 4\n\n    private var mostRequestedTablePage: Long = 3\n    private var tablePage: Long = 4\n\n    private var mostRequestedAccessoryPage: Long = 3\n    private var accessoryPage: Long = 4\n\n    private var mostRequestedFurniturePage: Long = 3\n    private var furniturePage: Long = 4\n\n\n    init {\n        getClothesProducts()\n        getBestDealsProduct()\n        getHomeProduct()\n    }\n\n\n    // Fetch Materials from Firebase\n    fun getMaterials() {\n        _materialsLiveData.postValue(Resource.Loading())\n\n        firebaseDatabase.getMaterials(10)\n            .addOnSuccessListener { documents ->\n                val materials = documents.toObjects(Material::class.java)\n                _materialsLiveData.postValue(Resource.Success(materials))\n            }\n            .addOnFailureListener { exception ->\n                _materialsLiveData.postValue(Resource.Error(exception.message ?: \"An unknown error occurred\"))\n            }\n    }\n\n\n\n    private var furnitureProducts: List<Product>? = null\n    fun getFurniture(size: Int = 0) {\n        if (furnitureProducts != null && size == 0) {\n            furniture.postValue(Resource.Success(furnitureProducts))\n            return\n        }\n        furniture.postValue(Resource.Loading())\n        shouldPaging(FURNITURE_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                tables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(FURNITURE_CATEGORY, furniturePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                furnitureProducts = productsList\n                                furniture.postValue(Resource.Success(productsList))\n                                furniturePage += 4\n\n                            }\n                        } else\n                            furniture.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                furniture.postValue(Resource.Error(\"Cannot paging\"))\n\n        }\n    }\n\n    private var mostRequestedFurnitureProducts: List<Product>? = null\n    fun getMostRequestedFurniture(size: Int = 0) {\n        if (mostRequestedFurnitureProducts != null && size == 0) {\n            mostRequestedFurniture.postValue(Resource.Success(mostRequestedFurnitureProducts))\n            return\n        }\n        mostRequestedFurniture.postValue(Resource.Loading())\n        shouldPaging(FURNITURE_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedFurniture.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(\n                    FURNITURE_CATEGORY,\n                    mostRequestedFurniturePage\n                )\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedFurnitureProducts = productsList\n                                mostRequestedFurniture.postValue(Resource.Success(productsList))\n                                mostRequestedFurniturePage += 4\n\n                            }\n                        } else\n                            mostRequestedFurniture.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedFurniture.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var accessoriesProducts: List<Product>? = null\n    fun getAccessories(size: Int = 0) {\n        if (accessoriesProducts != null && size == 0) {\n            accessory.postValue(Resource.Success(accessoriesProducts))\n            return\n        }\n        accessory.postValue(Resource.Loading())\n        shouldPaging(ACCESSORY_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                Log.d(\"test\", \"paging\")\n                firebaseDatabase.getProductsByCategory(ACCESSORY_CATEGORY, accessoryPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                accessory.postValue(Resource.Success(productsList))\n                                accessoriesProducts = productsList\n                                accessoryPage += 4\n\n                            }\n                        } else\n                            accessory.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else {\n                accessory.postValue(Resource.Error(\"Cannot page\"))\n            }\n        }\n    }\n\n    private var mostRequestedAccessoriesProducts: List<Product>? = null\n    fun getMostRequestedAccessories(size: Int = 0) {\n        if (mostRequestedAccessoriesProducts != null && size == 0) {\n            mostRequestedAccessories.postValue(Resource.Success(mostRequestedAccessoriesProducts))\n            return\n        }\n        mostRequestedAccessories.postValue(Resource.Loading())\n        shouldPaging(ACCESSORY_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(\n                    ACCESSORY_CATEGORY,\n                    mostRequestedAccessoryPage\n                )\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedAccessories.postValue(Resource.Success(productsList))\n                                mostRequestedAccessoriesProducts = productsList\n                                mostRequestedAccessoryPage += 4\n\n                            }\n                        } else\n                            mostRequestedAccessories.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedAccessories.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var chairsProducts: List<Product>? = null\n    fun getChairs(size: Int = 0) {\n        if (chairsProducts != null && size == 0) {\n            chairs.postValue(Resource.Success(chairsProducts))\n            return\n        }\n        chairs.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(CHAIR_CATEGORY, chairsPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                chairsProducts = productsList\n                                chairs.postValue(Resource.Success(productsList))\n                                chairsPage += 4\n\n                            }\n                        } else\n                            chairs.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                chairs.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedChairsProducts: List<Product>? = null\n    fun getMostRequestedChairs(size: Int = 0) {\n        if (mostRequestedChairsProducts != null && size == 0) {\n            mostRequestedChairs.postValue(Resource.Success(chairsProducts))\n            return\n        }\n        mostRequestedChairs.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(CHAIR_CATEGORY, mostRequestedChairsPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedChairsProducts = productsList\n                                mostRequestedChairs.postValue(Resource.Success(productsList))\n                                mostRequestedChairsPage += 4\n\n                            }\n                        } else\n                            mostRequestedChairs.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                chairs.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var tablesProducts: List<Product>? = null\n    fun getTables(size: Int = 0) {\n        if (tablesProducts != null && size == 0) {\n            tables.postValue(Resource.Success(tablesProducts))\n            return\n        }\n        tables.postValue(Resource.Loading())\n        shouldPaging(TABLES_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                tables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(TABLES_CATEGORY, tablePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                tablesProducts = productsList\n                                tables.postValue(Resource.Success(productsList))\n                                tablePage += 4\n\n                            }\n                        } else\n                            tables.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                home.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedTablesProducts: List<Product>? = null\n    fun getMostRequestedTables(size: Int = 0) {\n        if (mostRequestedTablesProducts != null && size == 0) {\n            tables.postValue(Resource.Success(mostRequestedTablesProducts))\n            return\n        }\n        mostRequestedTables.postValue(Resource.Loading())\n        shouldPaging(TABLES_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedTables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(TABLES_CATEGORY, mostRequestedTablePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedTablesProducts = productsList\n                                mostRequestedTables.postValue(Resource.Success(productsList))\n                                mostRequestedTablePage += 3\n\n                            }\n                        } else\n                            mostRequestedTables.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedTables.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n\n    fun getClothesProducts() =\n        firebaseDatabase.getClothesProducts(clothesPaging).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result\n                if (!documents!!.isEmpty) {\n                    val productsList = documents.toObjects(Product::class.java)\n                    clothes.postValue(productsList)\n                    clothesPaging += 5\n                } else\n                    emptyClothes.postValue(true)\n\n            } else\n                Log.e(TAG, it.exception.toString())\n\n        }\n\n    fun getBestDealsProduct() =\n        firebaseDatabase.getBestDealsProducts(bestDealsPaging).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result\n                if (!documents!!.isEmpty) {\n                    val productsList = documents.toObjects(Product::class.java)\n                    bestDeals.postValue(productsList)\n                    bestDealsPaging += 5\n                } else\n                    emptyBestDeals.postValue(true)\n\n            } else\n                Log.e(TAG, it.exception.toString())\n        }\n\n    fun getHomeProduct(size: Int = 0) {\n        home.postValue(Resource.Loading())\n        shouldPagingHome(size)\n        { shouldPaging ->\n            if (shouldPaging) {\n                home.postValue(Resource.Loading())\n                firebaseDatabase.getHomeProducts(homePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                home.postValue(Resource.Success(productsList))\n                                homePage += 4\n\n                            }\n                        } else\n                            home.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                home.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedCupboardProducts: List<Product>? = null\n    fun getMostRequestedCupboards(size: Int = 0) {\n        if (mostRequestedCupboardProducts != null && size == 0) {\n            mostRequestedCupboard.postValue(Resource.Success(mostRequestedCupboardProducts))\n            return\n        }\n\n        mostRequestedCupboard.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedCupboard.postValue(Resource.Loading())\n                firebaseDatabase.getMostOrderedCupboard(mostOrderCupboardPaging)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedCupboardProducts = productsList\n                                mostRequestedCupboard.postValue(Resource.Success(productsList))\n                                mostOrderCupboardPaging += 5\n\n                            }\n                        } else\n                            mostRequestedCupboard.postValue(Resource.Error(it.exception.toString()))\n                    }\n\n\n            } else\n                mostRequestedCupboard.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var dCupboardProducts: List<Product>? = null\n    fun getCupboardProduct(size: Int = 0) {\n        if (dCupboardProducts != null && size == 0) {\n            cupboard.postValue(Resource.Success(dCupboardProducts))\n            return\n        }\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                cupboard.postValue(Resource.Loading())\n                firebaseDatabase.getCupboards(cupboardPaging).addOnCompleteListener {\n                    if (it.isSuccessful) {\n\n                        val documents = it.result\n                        if (!documents!!.isEmpty) {\n                            val productsList = documents.toObjects(Product::class.java)\n                            dCupboardProducts = productsList\n                            cupboard.postValue(Resource.Success(productsList))\n                            cupboardPaging += 10\n                        }\n\n                    } else\n                        cupboard.postValue(Resource.Error(it.exception.toString()))\n                }\n            } else\n                cupboard.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    /*\n    * TODO : Move these functions to firebaseDatabase class\n     */\n\n    private fun shouldPaging(category: String, listSize: Int, onSuccess: (Boolean) -> Unit) {\n        FirebaseFirestore.getInstance()\n            .collection(\"categories\")\n            .whereEqualTo(\"name\", category).get().addOnSuccessListener {\n                val tempCategory = it.toObjects(Category::class.java)\n                val products = tempCategory[0].products\n                Log.d(\"test\", \" $category : prodcuts ${tempCategory[0].products}, size $listSize\")\n                if (listSize == products)\n                    onSuccess(false).also { Log.d(TAG, \"$category Paging:false\") }\n                else\n                    onSuccess(true).also { Log.d(TAG, \"$category Paging:true\") }\n            }\n    }\n\n    private fun shouldPagingHome(listSize: Int, onSuccess: (Boolean) -> Unit) {\n        FirebaseFirestore.getInstance()\n            .collection(\"categories\").get().addOnSuccessListener {\n                var productsCount = 0\n                it.toObjects(Category::class.java).forEach { category ->\n                    productsCount += category.products!!.toInt()\n                }\n\n                if (listSize == productsCount)\n                    onSuccess(false)\n                else\n                    onSuccess(true)\n\n            }\n    }\n\n\n    private fun checkIfProductAlreadyAdded(\n        product: CartProduct,\n        onSuccess: (Boolean, String) -> Unit\n    ) {\n        addToCart.postValue(Resource.Loading())\n        firebaseDatabase.getProductInCart(product).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result!!.documents\n                if (documents.isNotEmpty())\n                    onSuccess(true, documents[0].id) // true ---> product is already in cart\n                else\n                    onSuccess(false, \"\") // false ---> product is not in cart\n            } else\n                addToCart.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n\n    fun addProductToCart(product: CartProduct) =\n        checkIfProductAlreadyAdded(product) { isAdded, id ->\n            if (isAdded) {\n                firebaseDatabase.increaseProductQuantity(id).addOnCompleteListener {\n                    if (it.isSuccessful)\n                        addToCart.postValue(Resource.Success(true))\n                    else\n                        addToCart.postValue(Resource.Error(it.exception!!.message))\n\n                }\n            } else {\n                firebaseDatabase.addProductToCart(product).addOnCompleteListener {\n                    if (it.isSuccessful)\n                        addToCart.postValue(Resource.Success(true))\n                    else\n                        addToCart.postValue(Resource.Error(it.exception!!.message))\n                }\n            }\n        }\n\n\n    fun saveAddress(address: Address) {\n        addAddress.postValue(Resource.Loading())\n        firebaseDatabase.saveNewAddress(address)?.addOnCompleteListener {\n            if (it.isSuccessful)\n                addAddress.postValue(Resource.Success(address))\n            else\n                addAddress.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun updateAddress(oldAddress: Address, newAddress: Address) {\n        updateAddress.postValue(Resource.Loading())\n        firebaseDatabase.findAddress(oldAddress).addOnCompleteListener { addressResponse ->\n            if (addressResponse.isSuccessful) {\n                val documentUid = addressResponse.result!!.documents[0].id\n                firebaseDatabase.updateAddress(documentUid, newAddress)?.addOnCompleteListener {\n                    if (it.isSuccessful)\n                        updateAddress.postValue(Resource.Success(newAddress))\n                    else\n                        updateAddress.postValue(Resource.Error(it.exception.toString()))\n\n                }\n\n            } else\n                updateAddress.postValue(Resource.Error(addressResponse.exception.toString()))\n\n        }\n    }\n\n    fun deleteAddress(address: Address) {\n        deleteAddress.postValue(Resource.Loading())\n        firebaseDatabase.findAddress(address).addOnCompleteListener { addressResponse ->\n            if (addressResponse.isSuccessful) {\n                val documentUid = addressResponse.result!!.documents[0].id\n                firebaseDatabase.deleteAddress(documentUid, address)?.addOnCompleteListener {\n                    if (it.isSuccessful)\n                        deleteAddress.postValue(Resource.Success(address))\n                    else\n                        deleteAddress.postValue(Resource.Error(it.exception.toString()))\n\n                }\n\n            } else\n                deleteAddress.postValue(Resource.Error(addressResponse.exception.toString()))\n\n        }\n    }\n\n    private val user: User? = null\n    fun getUser() {\n        if (user != null) {\n            profile.postValue(Resource.Success(user))\n            return\n        }\n\n        profile.postValue(Resource.Loading())\n        firebaseDatabase.getUser().addSnapshotListener { value, error ->\n            if (error != null)\n                profile.postValue(Resource.Error(error.message))\n            else\n                profile.postValue(Resource.Success(value?.toObject(User::class.java)))\n\n        }\n    }\n\n    fun uploadProfileImage(image: ByteArray) {\n        Log.d(\"ViewModel\", \"Image byte array size: ${image.size}\")\n        uploadProfileImage.postValue(Resource.Loading())\n        val name = UUID.nameUUIDFromBytes(image).toString()\n        Log.d(\"ViewModel\", \"Generated UUID: $name\")\n\n        firebaseDatabase.uploadUserProfileImage(image, name).addOnCompleteListener {\n            if (it.isSuccessful) {\n                Log.d(\"ViewModel\", \"Upload successful with name: $name\")\n                uploadProfileImage.postValue(Resource.Success(name))\n            } else {\n                Log.e(\"ViewModel\", \"Upload failed: ${it.exception}\")\n                uploadProfileImage.postValue(Resource.Error(it.exception.toString()))\n            }\n        }\n    }\n\n\n    fun updateInformation(firstName: String, lastName: String, email: String, imageName: String) {\n        updateUserInformation.postValue(Resource.Loading())\n\n        firebaseDatabase.getImageUrl(firstName, lastName, email, imageName) { user, exception ->\n\n            if (exception != null)\n                updateUserInformation.postValue(Resource.Error(exception))\n                    .also { Log.d(\"test1\", \"up\") }\n            else\n                user?.let {\n                    onUpdateInformation(user).also { Log.d(\"test1\", \"down\") }\n                }\n        }\n    }\n\n    private fun onUpdateInformation(user: User) {\n        firebaseDatabase.updateUserInformation(user).addOnCompleteListener {\n            if (it.isSuccessful)\n                updateUserInformation.postValue(Resource.Success(user))\n            else\n                updateUserInformation.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n    fun getUserOrders() {\n        userOrders.postValue(Resource.Loading())\n        firebaseDatabase.getUserOrders().addOnCompleteListener {\n            if (it.isSuccessful)\n                userOrders.postValue(Resource.Success(it.result?.toObjects(Order::class.java)))\n            else\n                userOrders.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun resetPassword(email: String) {\n        passwordReset.postValue(Resource.Loading())\n        firebaseDatabase.resetPassword(email).addOnCompleteListener {\n            if (it.isSuccessful)\n                passwordReset.postValue(Resource.Success(email))\n            else\n                passwordReset.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun getOrderAddressAndProducts(order: Order) {\n        orderAddress.postValue(Resource.Loading())\n        orderProducts.postValue(Resource.Loading())\n        firebaseDatabase.getOrderAddressAndProducts(order, { address, aError ->\n            if (aError != null)\n                orderAddress.postValue(Resource.Error(aError))\n            else\n                orderAddress.postValue(Resource.Success(address))\n        }, { products, pError ->\n\n            if (pError != null)\n                orderProducts.postValue(Resource.Error(pError))\n            else\n                orderProducts.postValue(Resource.Success(products))\n\n        })\n    }\n\n    fun searchProducts(searchQuery: String) {\n        search.postValue(Resource.Loading())\n        firebaseDatabase.searchProducts(searchQuery).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val productsList = it.result!!.toObjects(Product::class.java)\n                search.postValue(Resource.Success(productsList))\n\n            } else\n                search.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n    private var categoriesSafe: List<Category>? = null\n    fun getCategories() {\n        if(categoriesSafe != null){\n            categories.postValue(Resource.Success(categoriesSafe))\n            return\n        }\n        categories.postValue(Resource.Loading())\n        firebaseDatabase.getCategories().addOnCompleteListener {\n            if (it.isSuccessful) {\n                val categoriesList = it.result!!.toObjects(Category::class.java)\n                categoriesSafe = categoriesList\n                categories.postValue(Resource.Success(categoriesList))\n            } else\n                categories.postValue(Resource.Error(it.exception.toString()))\n        }\n\n\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt b/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt
--- a/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt	(date 1695480063663)
@@ -102,14 +102,13 @@
         getHomeProduct()
     }
 
-
     // Fetch Materials from Firebase
     fun getMaterials() {
         _materialsLiveData.postValue(Resource.Loading())
 
         firebaseDatabase.getMaterials(10)
-            .addOnSuccessListener { documents ->
-                val materials = documents.toObjects(Material::class.java)
+            .addOnSuccessListener { materials ->
+                // materials is already a List<Material>
                 _materialsLiveData.postValue(Resource.Success(materials))
             }
             .addOnFailureListener { exception ->
@@ -119,6 +118,7 @@
 
 
 
+
     private var furnitureProducts: List<Product>? = null
     fun getFurniture(size: Int = 0) {
         if (furnitureProducts != null && size == 0) {
Index: app/src/main/res/navigation/shopping_nav_graph.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/shopping_nav_graph\"\n    app:startDestination=\"@id/homeFragment\">\n\n    <fragment\n        android:id=\"@+id/homeFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.HomeFragment\"\n        android:label=\"fragment_home\"\n        tools:layout=\"@layout/fragment_home\">\n        <action\n            android:id=\"@+id/action_homeFragment_to_searchFragment\"\n            app:destination=\"@id/searchFragment\"\n            app:popUpTo=\"@id/homeFragment\" />\n        <argument\n            android:name=\"position\"\n            app:argType=\"integer\"\n            android:defaultValue=\"0\" />\n    </fragment>\n\n    <action\n        android:id=\"@+id/action_homeFragment_to_materialDetailsFragment\"\n        app:destination=\"@id/materialDetailsFragment\"\n        app:enterAnim=\"@anim/nav_default_enter_anim\"\n        app:exitAnim=\"@anim/nav_default_exit_anim\"\n        app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n        app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n\n\n    <fragment\n        android:id=\"@+id/materialDetailsFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.MaterialPreviewFragment\"\n        android:label=\"Material Details\">\n\n        <argument\n            android:name=\"material\"\n            app:argType=\"com.example.kleine.model.Material\"\n            android:defaultValue=\"@null\"\n            app:nullable=\"true\" />\n\n\n    </fragment>\n\n\n    <fragment\n        android:id=\"@+id/searchFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.SearchFragment\"\n        android:label=\"fragment_search\"\n        tools:layout=\"@layout/fragment_search\">\n\n        <action\n            android:id=\"@+id/action_searchFragment_to_homeFragment\"\n            app:destination=\"@id/homeFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/profileFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.ProfileFragment\"\n        android:label=\"fragment_profile\"\n        tools:layout=\"@layout/fragment_profile\">\n        <action\n            android:id=\"@+id/action_profileFragment_to_billingFragment\"\n            app:destination=\"@id/billingFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_editUserInformation\"\n            app:destination=\"@id/editUserInformation\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_allOrdersFragment\"\n            app:destination=\"@id/allOrdersFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_languageFragment\"\n            app:destination=\"@id/languageFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_viewPartnershipFragment\"\n            app:destination=\"@id/viewPartnershipFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_helpFragment\"\n            app:destination=\"@id/helpFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_joinPartnerFragment\"\n            app:destination=\"@id/joinPartnerFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_adminDashboardFragment\"\n            app:destination=\"@id/adminDashboardFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_tempCommentFragment\"\n            app:destination=\"@id/tempCommentFragment\">\n            <argument\n                android:name=\"documentId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n        </action>\n\n    </fragment>\n    <fragment\n        android:id=\"@+id/cartFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.CartFragment\"\n        android:label=\"fragment_cart\"\n        tools:layout=\"@layout/fragment_cart\">\n\n        <action\n            android:id=\"@+id/action_cartFragment_to_billingFragment\"\n            app:destination=\"@id/billingFragment\" />\n    </fragment>\n\n    <fragment\n        android:id=\"@+id/billingFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.BillingFragment\"\n        android:label=\"fragment_billing\"\n        tools:layout=\"@layout/fragment_billing\">\n        <action\n            android:id=\"@+id/action_billingFragment_to_addressFragment\"\n            app:destination=\"@id/addressFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\" />\n        <argument\n            android:name=\"clickFlag\"\n            app:argType=\"string\" />\n        <argument\n            android:name=\"price\"\n            android:defaultValue=\"null\"\n            app:argType=\"string\"\n            app:nullable=\"true\" />\n        <argument\n            android:name=\"products\"\n            android:defaultValue=\"@null\"\n            app:argType=\"com.example.kleine.model.CartProductsList\"\n            app:nullable=\"true\" />\n        <action\n            android:id=\"@+id/action_billingFragment_to_orderCompletion\"\n            app:destination=\"@id/orderCompletion\"\n            app:popUpTo=\"@id/billingFragment\"\n            app:popUpToInclusive=\"true\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/addressFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.AddressFragment\"\n        android:label=\"fragment_address\"\n        tools:layout=\"@layout/fragment_address\">\n\n        <argument\n            android:name=\"address\"\n            android:defaultValue=\"@null\"\n            app:argType=\"com.example.kleine.model.Address\"\n            app:nullable=\"true\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/orderCompletion\"\n        android:name=\"com.example.kleine.fragments.shopping.OrderCompletion\"\n        android:label=\"fragment_order_completion\"\n        tools:layout=\"@layout/fragment_order_completion\">\n        <argument\n            android:name=\"order_completion_flag\"\n            app:argType=\"string\" />\n        <argument\n            android:name=\"orderNumber\"\n            android:defaultValue=\"null\"\n            app:argType=\"string\"\n            app:nullable=\"true\" />\n        <action\n            android:id=\"@+id/action_orderCompletion_to_orderDetails\"\n            app:destination=\"@id/orderDetails\" />\n        <argument\n            android:name=\"order\"\n            app:argType=\"com.example.kleine.model.Order\"\n            app:nullable=\"true\"\n            android:defaultValue=\"@null\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/editUserInformation\"\n        android:name=\"com.example.kleine.fragments.settings.EditUserInformationFragment\"\n        android:label=\"fragment_edit_user_information\"\n        tools:layout=\"@layout/fragment_edit_user_information\">\n        <argument\n            android:name=\"user\"\n            app:argType=\"com.example.kleine.model.User\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/allOrdersFragment\"\n        android:name=\"com.example.kleine.fragments.settings.AllOrdersFragment\"\n        android:label=\"fragment_all_orders\"\n        tools:layout=\"@layout/fragment_all_orders\" >\n        <action\n            android:id=\"@+id/action_allOrdersFragment_to_orderDetails\"\n            app:destination=\"@id/orderDetails\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/orderDetails\"\n        android:name=\"com.example.kleine.fragments.settings.OrderDetails\"\n        android:label=\"fragment_order_details\"\n        tools:layout=\"@layout/fragment_order_details\" >\n        <argument\n            android:name=\"order\"\n            app:argType=\"com.example.kleine.model.Order\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/languageFragment\"\n        android:name=\"com.example.kleine.fragments.settings.LanguageFragment\"\n        android:label=\"fragment_language\"\n        tools:layout=\"@layout/fragment_language\" />\n    <fragment\n        android:id=\"@+id/viewPartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.ViewPartnershipFragment\"\n        android:label=\"fragment_view_partnership\"\n        tools:layout=\"@layout/fragment_view_partnership\">\n        <action\n            android:id=\"@+id/action_viewPartnershipFragment_to_partnershipViewMaterialFragment\"\n            app:destination=\"@id/partnershipViewMaterialFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_viewPartnershipFragment_to_updatePartnershipFragment\"\n            app:destination=\"@id/updatePartnershipFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/helpFragment\"\n        android:name=\"com.example.kleine.fragments.settings.HelpFragment\"\n        android:label=\"HelpFragment\"\n        tools:layout=\"@layout/fragment_help\"/>\n    <fragment\n        android:id=\"@+id/partnershipViewMaterialFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialFragment\"\n        android:label=\"fragment_partnership_view_material\"\n        tools:layout=\"@layout/fragment_partnership_view_material\" >\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_partnershipViewMaterialDetailFragment\"\n            app:destination=\"@id/partnershipViewMaterialDetailFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\">\n            <argument\n                android:name=\"documentId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n        </action>\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_setsFragment\"\n            app:destination=\"@id/setsFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/partnershipViewMaterialDetailFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialDetailFragment\"\n        android:label=\"fragment_partnership_view_material_detail\"\n        tools:layout=\"@layout/fragment_partnership_view_material_detail\" >\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialDetailFragment_to_replyCommentFragment\"\n            app:destination=\"@id/replyCommentFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/replyCommentFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.ReplyCommentFragment\"\n        android:label=\"fragment_reply_comment\"\n        tools:layout=\"@layout/fragment_reply_comment\" />\n    <fragment\n        android:id=\"@+id/joinPartnerFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.JoinPartnerFragment\"\n        android:label=\"fragment_join__partner_\"\n        tools:layout=\"@layout/fragment_join__partner_\" />\n    <fragment\n        android:id=\"@+id/adminDashboardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminDashboardFragment\"\n        android:label=\"fragment_admin_dashboard\"\n        tools:layout=\"@layout/fragment_admin_dashboard\" >\n        <action\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewPartnershipFragment\"\n            app:destination=\"@id/adminViewPartnershipFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n        <action\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewRewardFragment\"\n            app:destination=\"@id/adminViewRewardFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/adminViewPartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipFragment\"\n        android:label=\"fragment_admin_view_partnership\"\n        tools:layout=\"@layout/fragment_admin_view_partnership\" >\n        <action\n            android:id=\"@+id/action_adminViewPartnershipFragment_to_adminViewPartnershipRequestFragment\"\n            app:destination=\"@id/adminViewPartnershipRequestFragment\" />\n    </fragment>\n\n\n    <fragment\n        android:id=\"@+id/adminViewPartnershipRequestFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipRequestFragment\"\n        android:label=\"fragment_admin_view_partnership_request\"\n        tools:layout=\"@layout/fragment_admin_view_partnership_request\" />\n    <fragment\n        android:id=\"@+id/updatePartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.UpdatePartnershipFragment\"\n        android:label=\"UpdatePartnershipFragment\"\n        tools:layout=\"@layout/fragment_update_partnership\"/>\n\n<!--    quiz-->\n    <fragment\n        android:id=\"@+id/setsFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.SetsFragment\"\n        android:label=\"SetsFragment\"\n        tools:layout=\"@layout/fragment_sets\" >\n        <action\n            android:id=\"@+id/action_setsFragment_to_questionFragment\"\n            app:destination=\"@id/questionFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/questionFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.QuestionFragment\"\n        android:label=\"QuestionFragment\"\n        tools:layout=\"@layout/fragment_question\" >\n        <action\n            android:id=\"@+id/action_questionFragment_to_addUpdateQuestionFragment\"\n            app:destination=\"@id/addUpdateQuestionFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/addUpdateQuestionFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.AddUpdateQuestionFragment\"\n        android:label=\"AddUpdateQuestionFragment\"\n        tools:layout=\"@layout/fragment_add_update_question\" />\n    <fragment\n        android:id=\"@+id/quizFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.QuizFragment\"\n        android:label=\"QuizFragment\"\n        tools:layout=\"@layout/fragment_quiz\" >\n        <action\n            android:id=\"@+id/action_quizFragment_to_playFragment\"\n            app:destination=\"@id/playFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/playFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.PlayFragment\"\n        android:label=\"PlayFragment\"\n        tools:layout=\"@layout/fragment_play\" >\n        <action\n            android:id=\"@+id/action_playFragment_to_resultFragment\"\n            app:destination=\"@id/resultFragment\" />\n        <action\n            android:id=\"@+id/action_playFragment_to_quizFragment\"\n            app:destination=\"@id/quizFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/resultFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.ResultFragment\"\n        android:label=\"ResultFragment\"\n        tools:layout=\"@layout/fragment_result\" >\n        <action\n            android:id=\"@+id/action_resultFragment_to_quizFragment\"\n            app:destination=\"@id/quizFragment\" />\n    </fragment>\n    <!--    end quiz-->\n\n<!--    reward-->\n    <fragment\n        android:id=\"@+id/adminViewRewardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewRewardFragment\"\n        android:label=\"AdminViewRewardFragment\"\n        tools:layout=\"@layout/fragment_admin_view_reward\">\n        <action\n            android:id=\"@+id/action_adminViewRewardFragment_to_adminAddRewardFragment\"\n            app:destination=\"@id/adminAddRewardFragment\" />\n        <action\n            android:id=\"@+id/action_adminViewRewardFragment_to_adminUpdateRewardFragment\"\n            app:destination=\"@id/adminUpdateRewardFragment\" >\n            <argument\n            android:name=\"documentId\"\n            app:argType=\"string\" />\n        </action>\n    </fragment>\n    <fragment\n        android:id=\"@+id/adminAddRewardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminAddRewardFragment\"\n        android:label=\"AdminAddRewardFragment\"\n        tools:layout=\"@layout/fragment_admin_add_reward\"/>\n    <fragment\n        android:id=\"@+id/adminUpdateRewardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminUpdateRewardFragment\"\n        android:label=\"AdminUpdateRewardFragment\"\n        tools:layout=\"@layout/fragment_admin_update_reward\"/>\n<!--    end reward-->\n    <fragment\n        android:id=\"@+id/tempCommentFragment\"\n        android:name=\"com.example.kleine.fragments.TempCommentFragment\"\n        android:label=\"fragment_temp_comment\"\n        tools:layout=\"@layout/fragment_temp_comment\"/>\n</navigation>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/navigation/shopping_nav_graph.xml b/app/src/main/res/navigation/shopping_nav_graph.xml
--- a/app/src/main/res/navigation/shopping_nav_graph.xml	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/res/navigation/shopping_nav_graph.xml	(date 1695540200378)
@@ -5,11 +5,24 @@
     android:id="@+id/shopping_nav_graph"
     app:startDestination="@id/homeFragment">
 
+    <fragment
+        android:id="@+id/addMaterialFragment"
+        android:name="com.example.kleine.fragments.shopping.AddMaterialFragment"
+        android:label="Add Material">
+    </fragment>
+
+
+
     <fragment
         android:id="@+id/homeFragment"
         android:name="com.example.kleine.fragments.shopping.HomeFragment"
         android:label="fragment_home"
         tools:layout="@layout/fragment_home">
+
+        <action
+            android:id="@+id/action_homeFragment_to_addMaterialFragment"
+            app:destination="@id/addMaterialFragment" />
+
         <action
             android:id="@+id/action_homeFragment_to_searchFragment"
             app:destination="@id/searchFragment"
@@ -18,29 +31,25 @@
             android:name="position"
             app:argType="integer"
             android:defaultValue="0" />
-    </fragment>
 
-    <action
-        android:id="@+id/action_homeFragment_to_materialDetailsFragment"
-        app:destination="@id/materialDetailsFragment"
-        app:enterAnim="@anim/nav_default_enter_anim"
-        app:exitAnim="@anim/nav_default_exit_anim"
-        app:popEnterAnim="@anim/nav_default_pop_enter_anim"
-        app:popExitAnim="@anim/nav_default_pop_exit_anim"/>
+        <action
+            android:id="@+id/action_homeFragment_to_materialDetailsFragment"
+            app:destination="@id/materialDetailsFragment"
+            app:enterAnim="@anim/nav_default_enter_anim"
+            app:exitAnim="@anim/nav_default_exit_anim"
+            app:popEnterAnim="@anim/nav_default_pop_enter_anim"
+            app:popExitAnim="@anim/nav_default_pop_exit_anim"/>
+    </fragment>
 
 
     <fragment
         android:id="@+id/materialDetailsFragment"
         android:name="com.example.kleine.fragments.shopping.MaterialPreviewFragment"
-        android:label="Material Details">
-
+        tools:layout="@layout/fragment_product_preview">
         <argument
             android:name="material"
             app:argType="com.example.kleine.model.Material"
-            android:defaultValue="@null"
             app:nullable="true" />
-
-
     </fragment>
 
 
@@ -59,6 +68,8 @@
         android:name="com.example.kleine.fragments.shopping.ProfileFragment"
         android:label="fragment_profile"
         tools:layout="@layout/fragment_profile">
+
+
         <action
             android:id="@+id/action_profileFragment_to_billingFragment"
             app:destination="@id/billingFragment"
@@ -215,6 +226,7 @@
         android:name="com.example.kleine.fragments.settings.AllOrdersFragment"
         android:label="fragment_all_orders"
         tools:layout="@layout/fragment_all_orders" >
+
         <action
             android:id="@+id/action_allOrdersFragment_to_orderDetails"
             app:destination="@id/orderDetails"
@@ -222,6 +234,15 @@
             app:exitAnim="@anim/to_left"
             app:popEnterAnim="@anim/from_left"
             app:popExitAnim="@anim/to_right"/>
+
+        <action
+            android:id="@+id/action_allOrdersFragment_to_materialDetailsFragment"
+            app:destination="@id/materialDetailsFragment"
+            app:enterAnim="@anim/from_right"
+            app:exitAnim="@anim/to_left"
+            app:popEnterAnim="@anim/from_left"
+            app:popExitAnim="@anim/to_right" />
+
     </fragment>
     <fragment
         android:id="@+id/orderDetails"
Index: app/src/main/res/layout/recycler_view_all_orders_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/parent_linear\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"8dp\">\n\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <ImageView\n            android:id=\"@+id/img_order_state\"\n            android:layout_width=\"@dimen/_10sdp\"\n            android:layout_height=\"@dimen/_10sdp\"\n            android:layout_gravity=\"center\"\n            android:src=\"@drawable/ic_circle\" />\n\n        <TextView\n            android:id=\"@+id/tv_order_id\"\n            style=\"@style/MediumTextViewThin\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginStart=\"5dp\"\n            android:layout_weight=\"1\"\n            tools:text=\"@tools:sample/lorem\" />\n\n        <ImageView\n            android:layout_width=\"@dimen/_15sdp\"\n            android:layout_height=\"@dimen/_15sdp\"\n            android:src=\"@drawable/ic_arrow\" />\n\n    </LinearLayout>\n\n    <TextView\n        android:id=\"@+id/tv_order_date\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        tools:text=\"@tools:sample/lorem\" />\n\n    <View\n        android:id=\"@+id/line\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"@dimen/_1sdp\"\n        android:layout_marginTop=\"15dp\"\n        android:background=\"@drawable/line\"\n        android:backgroundTint=\"@color/g_icon_tint\" />\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/recycler_view_all_orders_item.xml b/app/src/main/res/layout/recycler_view_all_orders_item.xml
--- a/app/src/main/res/layout/recycler_view_all_orders_item.xml	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/res/layout/recycler_view_all_orders_item.xml	(date 1695480063699)
@@ -1,52 +1,62 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:id="@+id/parent_linear"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:orientation="vertical"
-    android:padding="8dp">
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <data>
+        <variable
+            name="productModel"
+            type="com.example.kleine.model.Material" />
+    </data>
+
+    <LinearLayout
+        android:id="@+id/parent_linear"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:padding="8dp">
 
-
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:orientation="horizontal">
+        <LinearLayout
+            android:id="@+id/btnAllCourses"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal"
+            android:clickable="true"
+            android:focusable="true">
 
-        <ImageView
-            android:id="@+id/img_order_state"
-            android:layout_width="@dimen/_10sdp"
-            android:layout_height="@dimen/_10sdp"
-            android:layout_gravity="center"
-            android:src="@drawable/ic_circle" />
+            <ImageView
+                android:id="@+id/img_order_state"
+                android:layout_width="@dimen/_10sdp"
+                android:layout_height="@dimen/_10sdp"
+                android:layout_gravity="center"
+                android:src="@drawable/ic_circle" />
 
-        <TextView
-            android:id="@+id/tv_order_id"
-            style="@style/MediumTextViewThin"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginStart="5dp"
-            android:layout_weight="1"
-            tools:text="@tools:sample/lorem" />
+            <TextView
+                android:id="@+id/tv_order_id"
+                style="@style/MediumTextViewThin"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginStart="5dp"
+                android:layout_weight="1"
+                android:text="@{productModel.name}" />
 
-        <ImageView
-            android:layout_width="@dimen/_15sdp"
-            android:layout_height="@dimen/_15sdp"
-            android:src="@drawable/ic_arrow" />
-
-    </LinearLayout>
+            <ImageView
+                android:layout_width="@dimen/_15sdp"
+                android:layout_height="@dimen/_15sdp"
+                android:src="@drawable/ic_arrow" />
+        </LinearLayout>
 
-    <TextView
-        android:id="@+id/tv_order_date"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        tools:text="@tools:sample/lorem" />
+        <TextView
+            android:id="@+id/tv_order_date"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@{String.valueOf(productModel.desc)}" />
 
-    <View
-        android:id="@+id/line"
-        android:layout_width="match_parent"
-        android:layout_height="@dimen/_1sdp"
-        android:layout_marginTop="15dp"
-        android:background="@drawable/line"
-        android:backgroundTint="@color/g_icon_tint" />
-</LinearLayout>
\ No newline at end of file
+        <View
+            android:id="@+id/line"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/_1sdp"
+            android:layout_marginTop="15dp"
+            android:background="@drawable/line"
+            android:backgroundTint="@color/g_icon_tint" />
+    </LinearLayout>
+</layout>
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n    id 'com.google.gms.google-services'\n    id 'kotlin-parcelize'\n    id 'androidx.navigation.safeargs.kotlin'\n    id 'dagger.hilt.android.plugin'\n}\n\n\nandroid {\n    compileSdk 31\n\n    defaultConfig {\n        applicationId \"com.example.kleine\"\n        minSdk 21\n        targetSdk 31\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = '1.8'\n    }\n\n    buildFeatures{\n        viewBinding true\n        dataBinding true\n    }\n}\n\ndependencies {\n\n    implementation 'androidx.room:room-common:2.5.2'\n    apply plugin :\"kotlin-kapt\"\n    implementation 'androidx.core:core-ktx:1.7.0'\n    implementation 'androidx.appcompat:appcompat:1.4.1'\n    implementation 'com.google.android.material:material:1.5.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'\n    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'\n\n    testImplementation 'junit:junit:4.+'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\n\n    //intuit\n    implementation 'com.intuit.sdp:sdp-android:1.0.6'\n    implementation 'com.intuit.ssp:ssp-android:1.0.6'\n\n\n    //loading button\n    implementation 'br.com.simplepass:loading-button-android:2.2.0'\n\n    //firebase\n    implementation 'com.google.firebase:firebase-firestore:24.0.1'\n    implementation 'com.google.firebase:firebase-firestore-ktx:24.0.1'\n    implementation 'com.google.firebase:firebase-auth-ktx:21.0.1'\n    implementation 'com.google.firebase:firebase-storage'\n    implementation 'com.google.firebase:firebase-storage-ktx:20.0.0'\n    implementation 'com.google.firebase:firebase-common-ktx:20.0.0'\n    implementation 'com.google.firebase:firebase-messaging-ktx:23.0.0'\n    implementation 'com.firebaseui:firebase-ui-auth:4.3.2'\n\n    //google play services\n    implementation 'com.google.android.gms:play-services-auth:20.1.0'\n\n    //smooth bar\n    implementation 'com.github.ibrahimsn98:SmoothBottomBar:1.7.9'\n\n    //Glide\n    implementation 'com.github.bumptech.glide:glide:4.13.0'\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.0'\n\n    //storage\n    implementation 'com.firebaseui:firebase-ui-storage:8.0.0'\n\n    //circular image\n    implementation 'de.hdodenhof:circleimageview:3.1.0'\n\n    //Navigation and safe args\n    def nav_version = \"2.4.1\"\n    implementation \"androidx.navigation:navigation-fragment-ktx:$nav_version\"\n    implementation \"androidx.navigation:navigation-ui-ktx:$nav_version\"\n\n    //viewpager2 indicatior\n    implementation 'io.github.vejei.viewpagerindicator:viewpagerindicator:1.0.0-alpha.1'\n\n    //lifecycle\n    implementation \"android.arch.lifecycle:extensions:1.1.0\"\n\n    //Firebase coroutines\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1'\n\n    //stepView\n    implementation 'com.shuhart.stepview:stepview:1.5.1'\n\n    //Android Ktx\n    implementation \"androidx.fragment:fragment-ktx:1.4.1\"\n\n    //pdf viewer\n    implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'\n\n\n    //Dagger hilt\n    implementation \"com.google.dagger:hilt-android:2.38.1\"\n    kapt \"com.google.dagger:hilt-compiler:2.38.1\"\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/build.gradle	(date 1695480063748)
@@ -95,6 +95,9 @@
     def nav_version = "2.4.1"
     implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
     implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
+    apply plugin: "androidx.navigation.safeargs.kotlin"
+
+
 
     //viewpager2 indicatior
     implementation 'io.github.vejei.viewpagerindicator:viewpagerindicator:1.0.0-alpha.1'
@@ -119,5 +122,12 @@
     implementation "com.google.dagger:hilt-android:2.38.1"
     kapt "com.google.dagger:hilt-compiler:2.38.1"
 
+    
 
+
+
+
+
+
+
 }
\ No newline at end of file
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\n    <string name=\"app_name\">HELP</string>\n    <string name=\"g_app_name\">HELP</string>\n    <string name=\"g_the_right_address\">In Learning, \\nWe Trust</string>\n\n    <!--    <string name=\"g_for_shopping\">For Shopping</string>-->\n    <!--    <string name=\"g_any_day\">Anyday</string>-->\n\n    <string name=\"g_best_quality\">Knowledge opens the door to a world of opportunities, illuminating the path to progress \\n When this wisdom intertwines with cooperative efforts, we collectively illuminate a brighter, more sustainable future</string>\n    <string name=\"g_start\">Start</string>\n    <!-- TODO: Remove or change this placeholder text -->\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\n    <string name=\"all_your_orders\">All your orders in one \\n saved package</string>\n    <string name=\"g_register\">Register</string>\n    <string name=\"g_let_s_register\">Let\\'s Register</string>\n    <string name=\"g_do_you_have_an_account_log_in\">Do you have an account? log in</string>\n    <string name=\"g_first_name\">First Name</string>\n    <string name=\"g_email\">Email</string>\n    <string name=\"g_second_name\">Last Name</string>\n    <string name=\"g_password\">Password</string>\n    <string name=\"g_don_t_have_an_account_register\">Don\\'t have an account? Register</string>\n    <string name=\"g_let_s_login\">Let\\'s Login</string>\n    <string name=\"g_log_in\">Log in</string>\n    <string name=\"g_google\">Google</string>\n    <string name=\"g_facebook\">Facebook</string>\n    <string name=\"first_name_cant_be_empty\">First name can\\'t be empty</string>\n    <string name=\"last_name_cant_be_empty\">Last name can\\'t be empty</string>\n    <string name=\"email_cant_be_empty\">Email can\\'t be empty</string>\n    <string name=\"password_cant_be_empty\">password can\\'t be empty</string>\n    <string name=\"password_at_least_six\">password should have 6</string>\n    <string name=\"valid_email\">check your email</string>\n    <string name=\"signed_up_successfully\">you have created new account, login now</string>\n    <string name=\"g_home\">Novice</string>\n    <string name=\"g_search\">search</string>\n    <string name=\"g_cart\">Cart</string>\n    <string name=\"g_profile\">profile</string>\n    <string name=\"g_add_to_cart\">Add to cart</string>\n    <string name=\"g_search_now\">Search Now</string>\n    <string name=\"g_best_deals\">Best Deals</string>\n    <string name=\"g_chair\">Beginner</string>\n    <string name=\"g_cupboard\">Intermediate</string>\n    <string name=\"g_table\">Proficient</string>\n    <string name=\"g_accessory\">Advanced</string>\n    <string name=\"g_furniture\">Expert</string>\n    <string name=\"g_enlightening\">Master</string>\n    <string name=\"g_best_products\">Trending Courses</string>\n    <string name=\"g_see_product\">See product</string>\n    <string name=\"g_color\">Color</string>\n    <string name=\"g_size\">Size</string>\n    <string name=\"g_add_to_card\">Enroll Courses</string>\n    <string name=\"g_added\">Added</string>\n    <string name=\"g_already_added\">Product is in your cart</string>\n    <string name=\"g_please_select_color\">Please select color</string>\n    <string name=\"g_please_select_size\">Please select size</string>\n    <string name=\"g_my_cart\">My Course</string>\n    <string name=\"g_checkout\">Checkout</string>\n    <string name=\"g_total\">Total:</string>\n    <string name=\"g_your_shopping_cart_is_empty\">Your Course List \\n Is Empty</string>\n    <string name=\"g_delete_item\">Delete item</string>\n    <string name=\"g_are_you_sure_you_want_to_delete_this_item_from_cart\">Are you sure you want to delete this item from cart ?</string>\n    <string name=\"g_no\">No</string>\n    <string name=\"g_yes\">Yes</string>\n    <string name=\"g_categories\">Categories</string>\n    <string name=\"g_cancel\">Cancel</string>\n    <string name=\"g_payment_methods\">Redeem Reward</string>\n    <string name=\"payment_explanation\">Congratulations on completing one of our courses ! Kindly entered your address to redeem the reward ! </string>\n    <string name=\"g_shipping\">Address</string>\n    <string name=\"g_full_name\">Full Name</string>\n    <string name=\"g_city\">City</string>\n    <string name=\"g_phone\">Phone</string>\n    <string name=\"g_state\">State</string>\n    <string name=\"g_save\">Save</string>\n    <string name=\"g_address\">Address</string>\n    <string name=\"g_address_location_ie_home\">Address Location ie. Home</string>\n    <string name=\"g_update\">Update</string>\n    <string name=\"g_place_order\">Save</string>\n    <string name=\"g_delete\">Delete</string>\n    <string name=\"g_select_address_error\">Select or add new address !</string>\n    <string name=\"g_place_order_confirmation\">Are you sure you want to place this order ?</string>\n    <string name=\"g_confirm\">Confirm</string>\n    <string name=\"place_order_error\">Error occurred try again later or contact us</string>\n    <string name=\"g_payment_failed\">Your Order is Failed !</string>\n    <string name=\"g_payment_success\">Your Order is Completed</string>\n    <string name=\"order_error_message\">Try again later, if this error keeps showing up please contact us .</string>\n    <string name=\"order_success_message\">We received your order and we will contact you through a phone call in the next 24H\n    \\n your order number is #</string>\n    <string name=\"g_track_order\">You can track your order by going to your profile and select all orders then select your recent order.</string>\n    <string name=\"g_settings\">Settings</string>\n    <string name=\"g_edit_personal_details\">Edit personal details</string>\n    <string name=\"g_orders\">Courses</string>\n    <string name=\"g_order\">Order</string>\n    <string name=\"g_all_orders\">All Courses</string>\n    <string name=\"g__track_order\">Enrolled Courses</string>\n    <string name=\"g_notifications\">Notifications</string>\n    <string name=\"g_information\">Information</string>\n\n\n    <string name=\"g_admin\">Admin</string>\n    <string name=\"g_preference\">Preferences</string>\n    <string name=\"g_join_partnership\">Join Partnership</string>\n    <string name=\"g_logout\">Logout</string>\n    <string name=\"g_billing\">Billing And Addresses</string>\n    <string name=\"g_version\">Version</string>\n    <string name=\"error_occurred\">Oops error occurred</string>\n    <string name=\"g_edit_profile\">Edit Profile</string>\n    <string name=\"g_change_forgot_password\">Forgot/Change password</string>\n    <string name=\"g_cant_change_email_message\">You cannot change your email address, if you are looking to change it please contact with us</string>\n    <string name=\"select_profile_image\">Select profile image</string>\n    <string name=\"g_no_orders_to_show\">No courses to show</string>\n    <string name=\"g_reset_password\">Reset Password</string>\n    <string name=\"g_reset_password_message\">We will send you password reset link on your Email</string>\n    <string name=\"g_send\">Send</string>\n    <string name=\"g_password_reset\">We sent reset password link to your email</string>\n    <string name=\"g_order_placed\">Order Placed</string>\n    <string name=\"g_shipped\">Shipped</string>\n    <string name=\"g_delivered\">Delivered</string>\n    <string name=\"g_products\">Products</string>\n    <string name=\"g_coming_soon\">This feature is not available yet</string>\n    <string name=\"g_english\">English</string>\n    <string name=\"g_arabic\">عربي</string>\n    <string name=\"g_forgot_password\">Forgot Password</string>\n    <string name=\"g_check_your_email\">Check your Email</string>\n    <string name=\"street\">Street</string>\n    <string name=\"g_order_details\">Order Details</string>\n    <string name=\"product_added\">Product added to your cart</string>\n    <string name=\"switch_account\">Switch Account</string>\n    <string name=\"open_menu\">Open Menu</string>\n    <string name=\"close_menu\">Close Menu</string>\n    <string name=\"my_store\">My Store</string>\n    <string name=\"g_total_sales\">Total Sales</string>\n    <string name=\"today_sales\">Today Sales</string>\n    <string name=\"pending_orders\">Pending Orders</string>\n    <string name=\"help\">Help</string>\n    <string name=\"help_text\">Got a question? We\\'re here to answer!</string>\n\n    <!-- reward -->\n    <string name=\"titleVoucher\">Select Voucher</string>\n    <string name=\"okButton\">OK</string>\n    <string name=\"rewardName\">Reward Name</string>\n    <string name=\"rewardExpired\">Reward Expired Date</string>\n    <string name=\"labelVoucherExpiredDate\">Expired Date: </string>\n    <string name=\"voucherTermsCondition\">Terms and Conditions</string>\n    <string name=\"labelShippingVoucher\">Voucher(s) can be selected: </string>\n    <string name=\"voucherCodeHint\">Enter Voucher Code</string>\n    <string name=\"noVoucherMsg\">No voucher available!</string>\n    <string name=\"g_difficultyLevel\">Level : </string>\n    <string name=\"g_totalChapter\">Chapter : </string>\n    <string name=\"g_product_name_label\">Material Name</string>\n\n    <string name=\"voucherName\">Voucher</string>\n    <string name=\"rewardDescription\">Your reward description here</string>\n\n\n\n    <!-- Card View  -->\n\n    <string name=\"string_productCategory\">Course Category</string>\n    <string name=\"string_productTitle\">Course Title</string>\n    <string name=\"string_productPrice\">Product Price</string>\n    <string name=\"string_productRate\">4.9</string>\n    <string name=\"string_rate\">Rate</string>\n    <string name=\"string_product_image\">Course Image</string>\n    <string name=\"string_fav\">Favourite</string>\n\n\n\n    <string name=\"string_sale_text\">Grab Some Course !! </string>\n    <string name=\"string_curve_image\">Curve Image</string>\n    <string name=\"string_75\">520%</string>\n\n    <string name=\"string_status\">Status</string>\n\n    <string name=\"string_rating\">Rating</string>\n\n\n\n    <!-- Difficulty Levels  -->\n    <string-array name=\"difficulty_levels\">\n        <item>Novice</item>\n        <item>Beginners</item>\n        <item>Intermediate</item>\n        <item>Proficient</item>\n        <item>Advanced</item>\n        <item>Expert</item>\n        <item>Master</item>\n    </string-array>\n\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/res/values/strings.xml	(date 1695480767435)
@@ -173,7 +173,6 @@
     <string name="string_rating">Rating</string>
 
 
-
     <!-- Difficulty Levels  -->
     <string-array name="difficulty_levels">
         <item>Novice</item>
Index: app/src/main/java/com/example/kleine/adapters/recyclerview/CartRecyclerAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.adapters.recyclerview\n\nimport android.annotation.SuppressLint\nimport android.graphics.Color\nimport android.graphics.drawable.ColorDrawable\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.databinding.CartItemBinding\nimport com.example.kleine.model.CartProduct\nimport com.example.kleine.util.Constants.Companion.CART_FLAG\n\nclass CartRecyclerAdapter(\n    private val itemFlag: String = CART_FLAG\n) : RecyclerView.Adapter<CartRecyclerAdapter.CartRecyclerAdapterViewHolder>() {\n\n    var onPlusClick: ((CartProduct) -> Unit)? = null\n    var onMinusesClick: ((CartProduct) -> Unit)? = null\n    var onItemClick: ((CartProduct) -> Unit)? = null\n\n    inner class CartRecyclerAdapterViewHolder(val binding: CartItemBinding) :\n        RecyclerView.ViewHolder(binding.root)\n\n    private val diffCallBack = object : DiffUtil.ItemCallback<CartProduct>() {\n        override fun areItemsTheSame(oldItem: CartProduct, newItem: CartProduct): Boolean {\n            return oldItem.id == newItem.id && oldItem.name == newItem.name\n        }\n\n        override fun areContentsTheSame(oldItem: CartProduct, newItem: CartProduct): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallBack)\n\n    override fun onCreateViewHolder(\n        parent: ViewGroup,\n        viewType: Int\n    ): CartRecyclerAdapterViewHolder {\n        return CartRecyclerAdapterViewHolder(\n            CartItemBinding.inflate(\n                LayoutInflater.from(parent.context), parent, false\n            )\n        )\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    override fun onBindViewHolder(holder: CartRecyclerAdapterViewHolder, position: Int) {\n        val product = differ.currentList[position]\n        holder.binding.apply {\n            if (product.color.isNotEmpty()) {\n                val color = Color.parseColor(product.color)\n                val imageDrawable = ColorDrawable(color)\n                imgColor.setImageDrawable(imageDrawable)\n            } else\n                imgColor.visibility = View.GONE\n\n            if (product.size.isNotEmpty())\n                tvCartSize.text = product.size\n            else {\n                imgSize.visibility = View.GONE\n                tvCartSize.visibility = View.GONE\n            }\n\n            Glide.with(holder.itemView).load(product.image).into(imgCartProduct)\n            tvCartProductName.text = product.name\n            tvQuantity.text = product.quantity.toString()\n\n            if (product.newPrice != null && product.newPrice.isNotEmpty() && product.newPrice != \"0\") {\n                tvProductCartPrice.text = \"$${product.newPrice}\"\n            } else\n                tvProductCartPrice.text = \"$${product.price}\"\n\n            if (itemFlag != CART_FLAG)\n                holder.binding.apply {\n                    imgPlus.visibility = View.INVISIBLE\n                    imgMinus.visibility = View.INVISIBLE\n                    tvQuantity.text = product.quantity.toString()\n                }\n            else {\n\n                imgPlus.setOnClickListener {\n                    onPlusClick!!.invoke(product)\n                }\n\n                imgMinus.setOnClickListener {\n                    onMinusesClick!!.invoke(product)\n                }\n\n\n                holder.itemView.setOnClickListener {\n                    onItemClick!!.invoke(product)\n                }\n            }\n        }\n    }\n\n    override fun getItemCount(): Int {\n        return differ.currentList.size\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/adapters/recyclerview/CartRecyclerAdapter.kt b/app/src/main/java/com/example/kleine/adapters/recyclerview/CartRecyclerAdapter.kt
--- a/app/src/main/java/com/example/kleine/adapters/recyclerview/CartRecyclerAdapter.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/adapters/recyclerview/CartRecyclerAdapter.kt	(date 1695485304215)
@@ -51,52 +51,7 @@
     @SuppressLint("SetTextI18n")
     override fun onBindViewHolder(holder: CartRecyclerAdapterViewHolder, position: Int) {
         val product = differ.currentList[position]
-        holder.binding.apply {
-            if (product.color.isNotEmpty()) {
-                val color = Color.parseColor(product.color)
-                val imageDrawable = ColorDrawable(color)
-                imgColor.setImageDrawable(imageDrawable)
-            } else
-                imgColor.visibility = View.GONE
-
-            if (product.size.isNotEmpty())
-                tvCartSize.text = product.size
-            else {
-                imgSize.visibility = View.GONE
-                tvCartSize.visibility = View.GONE
-            }
-
-            Glide.with(holder.itemView).load(product.image).into(imgCartProduct)
-            tvCartProductName.text = product.name
-            tvQuantity.text = product.quantity.toString()
-
-            if (product.newPrice != null && product.newPrice.isNotEmpty() && product.newPrice != "0") {
-                tvProductCartPrice.text = "$${product.newPrice}"
-            } else
-                tvProductCartPrice.text = "$${product.price}"
 
-            if (itemFlag != CART_FLAG)
-                holder.binding.apply {
-                    imgPlus.visibility = View.INVISIBLE
-                    imgMinus.visibility = View.INVISIBLE
-                    tvQuantity.text = product.quantity.toString()
-                }
-            else {
-
-                imgPlus.setOnClickListener {
-                    onPlusClick!!.invoke(product)
-                }
-
-                imgMinus.setOnClickListener {
-                    onMinusesClick!!.invoke(product)
-                }
-
-
-                holder.itemView.setOnClickListener {
-                    onItemClick!!.invoke(product)
-                }
-            }
-        }
     }
 
     override fun getItemCount(): Int {
Index: app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.adapters.viewpager\n\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.databinding.ViewpagerImageItemBinding\n\nclass ViewPager2Images : RecyclerView.Adapter<ViewPager2Images.ViewPager2ImagesViewHolder>() {\n    inner class ViewPager2ImagesViewHolder(val binding: ViewpagerImageItemBinding) : RecyclerView.ViewHolder(binding.root)\n\n    private val diffCallback = object : DiffUtil.ItemCallback<String>() {\n        override fun areItemsTheSame(oldItem: String, newItem: String): Boolean {\n            return oldItem == newItem\n        }\n\n        override fun areContentsTheSame(oldItem: String, newItem: String): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallback)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewPager2ImagesViewHolder {\n        return ViewPager2ImagesViewHolder(\n            ViewpagerImageItemBinding.inflate(\n                LayoutInflater.from(parent.context),parent,false\n            )\n        )\n    }\n\n    override fun onBindViewHolder(holder: ViewPager2ImagesViewHolder, position: Int) {\n        val imageUrl = differ.currentList[position]\n        Log.d(\"ViewPager2Images\", \"Loading image at position $position: $imageUrl\")\n        Glide.with(holder.itemView).load(imageUrl).into(holder.binding.imgsProduct)\n    }\n\n\n    override fun getItemCount(): Int {\n        return differ.currentList.size\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt b/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt
--- a/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt	(date 1695480063974)
@@ -7,11 +7,13 @@
 import androidx.recyclerview.widget.DiffUtil
 import androidx.recyclerview.widget.RecyclerView
 import com.bumptech.glide.Glide
+import com.example.kleine.R
 import com.example.kleine.databinding.ViewpagerImageItemBinding
 
 class ViewPager2Images : RecyclerView.Adapter<ViewPager2Images.ViewPager2ImagesViewHolder>() {
     inner class ViewPager2ImagesViewHolder(val binding: ViewpagerImageItemBinding) : RecyclerView.ViewHolder(binding.root)
 
+
     private val diffCallback = object : DiffUtil.ItemCallback<String>() {
         override fun areItemsTheSame(oldItem: String, newItem: String): Boolean {
             return oldItem == newItem
Index: app/src/main/java/com/example/kleine/activities/LunchActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.activities\n\nimport android.content.Intent\nimport android.icu.lang.UCharacter.GraphemeClusterBreak.L\nimport android.os.Build.VERSION_CODES.M\nimport android.os.Build.VERSION_CODES.S\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.lifecycle.ViewModelProvider\nimport com.example.kleine.R\nimport com.example.kleine.firebaseDatabase.FirebaseDb\nimport com.example.kleine.model.Product\nimport com.example.kleine.util.Constants\nimport com.example.kleine.util.Constants.Companion.ACCESSORY_CATEGORY\nimport com.example.kleine.util.Constants.Companion.BLACK\nimport com.example.kleine.util.Constants.Companion.CHAIR_CATEGORY\nimport com.example.kleine.util.Constants.Companion.COLORS\nimport com.example.kleine.util.Constants.Companion.CUPBOARD_CATEGORY\nimport com.example.kleine.util.Constants.Companion.FURNITURE_CATEGORY\nimport com.example.kleine.util.Constants.Companion.GREEN\nimport com.example.kleine.util.Constants.Companion.IMAGES\nimport com.example.kleine.util.Constants.Companion.LARGE\nimport com.example.kleine.util.Constants.Companion.MEDIUM\nimport com.example.kleine.util.Constants.Companion.ORANGE\nimport com.example.kleine.util.Constants.Companion.ORDERS\nimport com.example.kleine.util.Constants.Companion.PRODUCTS_COLLECTION\nimport com.example.kleine.util.Constants.Companion.RED\nimport com.example.kleine.util.Constants.Companion.SIZES\nimport com.example.kleine.util.Constants.Companion.TABLES_CATEGORY\nimport com.example.kleine.util.Constants.Companion.XLARGE\nimport com.example.kleine.viewmodel.lunchapp.KleineViewModel\nimport com.example.kleine.viewmodel.lunchapp.ViewModelProviderFactory\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.firestore.FirebaseFirestore\nimport com.google.firebase.firestore.Query\nimport com.google.firebase.firestore.ktx.firestore\nimport com.google.firebase.ktx.Firebase\n\nclass LunchActivity : AppCompatActivity() {\n    val viewModel by lazy {\n        val firebaseDb = FirebaseDb()\n        val viewModelFactory = ViewModelProviderFactory(firebaseDb)\n        ViewModelProvider(this,viewModelFactory)[KleineViewModel::class.java]\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_lunch)\n\n        supportActionBar?.hide()\n\n//        val random = Random.nextInt(from = 10000, until = 99999)\n\n//        saveNewProduct()\n    }\n\n    private fun saveNewProduct() {\n\n        val title = \"Bedside tables\"\n        val description = \"Your bedroom is a sanctuary where you unwind and create your own personal space.\" +\n                \" You deserve to have this space ornamented to help you stay organized, relaxed, and comfortable.\" +\n                \" Bedroom furniture creates utility and helps you be your functional best\"\n\n        val category = FURNITURE_CATEGORY\n        val price = \"300\"\n        val newPrice = \"229\"\n        val seller = \"ps mart\"\n        val orders = 3\n\n        val images = HashMap<String,Any>()\n        val imagesList = listOf(\n            \"https://wakefit-co.s3.ap-south-1.amazonaws.com/img/product-thumbnails/elara-double-drawer-bedside-table-lifestyle-rectangle-new.webp\",\n            \"https://wakefit-co.s3.ap-south-1.amazonaws.com/img/product-thumbnails/elara-double-drawer-bedside-table-lifestyle-rectangle-new.webp\",\n            \"https://wakefit-co.s3.ap-south-1.amazonaws.com/img/product-thumbnails/elara-double-drawer-bedside-table-lifestyle-rectangle-new.webp\"\n\n        )\n\n\n        val productPrice: Float? = price.toFloatOrNull()  // Renamed from price to productPrice\n        val productRate: Float? = null  // You might want to get the actual rate here\n\n\n        images.put(IMAGES,imagesList.toList())\n\n        val colors = HashMap<String,Any>()\n        val colorsList = listOf<String>(\n            \"#8D4E38\"\n        )\n\n        colors.put(COLORS, colorsList.toList())\n\n        val sizes = HashMap<String,Any>()\n        val sizeUnit = \"Space\"\n        val sizesList = listOf(\n            \"1*2\",\n        )\n\n        sizes.put(SIZES,sizesList.toList())\n\n        val product = Product(\n            id = 1208025,\n            productName = title,\n            description = description,\n            productCategory = category,\n            newPrice = newPrice,\n            productPrice = productPrice.toString(),\n            productRate = productRate,\n            seller = seller,\n            images = images,\n            colors = colors,\n            sizes = sizes,\n            orders = orders,\n            offerTime = null,\n            sizeUnit = sizeUnit\n        )\n        Firebase.firestore.collection(PRODUCTS_COLLECTION)\n            .document()\n            .set(product)\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/activities/LunchActivity.kt b/app/src/main/java/com/example/kleine/activities/LunchActivity.kt
--- a/app/src/main/java/com/example/kleine/activities/LunchActivity.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/activities/LunchActivity.kt	(date 1695489074881)
@@ -52,71 +52,8 @@
 
 //        val random = Random.nextInt(from = 10000, until = 99999)
 
-//        saveNewProduct()
     }
 
-    private fun saveNewProduct() {
-
-        val title = "Bedside tables"
-        val description = "Your bedroom is a sanctuary where you unwind and create your own personal space." +
-                " You deserve to have this space ornamented to help you stay organized, relaxed, and comfortable." +
-                " Bedroom furniture creates utility and helps you be your functional best"
-
-        val category = FURNITURE_CATEGORY
-        val price = "300"
-        val newPrice = "229"
-        val seller = "ps mart"
-        val orders = 3
-
-        val images = HashMap<String,Any>()
-        val imagesList = listOf(
-            "https://wakefit-co.s3.ap-south-1.amazonaws.com/img/product-thumbnails/elara-double-drawer-bedside-table-lifestyle-rectangle-new.webp",
-            "https://wakefit-co.s3.ap-south-1.amazonaws.com/img/product-thumbnails/elara-double-drawer-bedside-table-lifestyle-rectangle-new.webp",
-            "https://wakefit-co.s3.ap-south-1.amazonaws.com/img/product-thumbnails/elara-double-drawer-bedside-table-lifestyle-rectangle-new.webp"
 
-        )
-
-
-        val productPrice: Float? = price.toFloatOrNull()  // Renamed from price to productPrice
-        val productRate: Float? = null  // You might want to get the actual rate here
-
-
-        images.put(IMAGES,imagesList.toList())
-
-        val colors = HashMap<String,Any>()
-        val colorsList = listOf<String>(
-            "#8D4E38"
-        )
-
-        colors.put(COLORS, colorsList.toList())
-
-        val sizes = HashMap<String,Any>()
-        val sizeUnit = "Space"
-        val sizesList = listOf(
-            "1*2",
-        )
-
-        sizes.put(SIZES,sizesList.toList())
-
-        val product = Product(
-            id = 1208025,
-            productName = title,
-            description = description,
-            productCategory = category,
-            newPrice = newPrice,
-            productPrice = productPrice.toString(),
-            productRate = productRate,
-            seller = seller,
-            images = images,
-            colors = colors,
-            sizes = sizes,
-            orders = orders,
-            offerTime = null,
-            sizeUnit = sizeUnit
-        )
-        Firebase.firestore.collection(PRODUCTS_COLLECTION)
-            .document()
-            .set(product)
-    }
 
 }
\ No newline at end of file
Index: app/src/main/java/com/example/kleine/adapters/recyclerview/BillingProductsAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.adapters.recyclerview\n\nimport android.annotation.SuppressLint\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.ImageView\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.R\nimport com.example.kleine.databinding.CartItemBinding\nimport com.example.kleine.model.CartProduct\n\nclass BillingProductsAdapter(): RecyclerView.Adapter<BillingProductsAdapter.BillingProductsAdapterViewHolder>() {\n\n    var onPlusClick: ((CartProduct) -> Unit)? = null\n    var onMinusesClick: ((CartProduct) -> Unit)? = null\n    var onItemClick: ((CartProduct) -> Unit)? = null\n\n    inner class BillingProductsAdapterViewHolder(val binding: CartItemBinding) :\n        RecyclerView.ViewHolder(binding.root)\n\n    private val diffCallBack = object : DiffUtil.ItemCallback<CartProduct>() {\n        override fun areItemsTheSame(oldItem: CartProduct, newItem: CartProduct): Boolean {\n            return oldItem.id == newItem.id && oldItem.name == newItem.name\n        }\n\n        override fun areContentsTheSame(oldItem: CartProduct, newItem: CartProduct): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallBack)\n\n    override fun onCreateViewHolder(\n        parent: ViewGroup,\n        viewType: Int\n    ): BillingProductsAdapterViewHolder {\n        return BillingProductsAdapterViewHolder(\n            CartItemBinding.inflate(\n                LayoutInflater.from(\n                    parent.context\n                )\n            )\n        )\n    }\n\n    @SuppressLint(\"ResourceAsColor\", \"SetTextI18n\")\n    override fun onBindViewHolder(holder: BillingProductsAdapterViewHolder, position: Int) {\n        val product = differ.currentList[position]\n        holder.binding.apply {\n            imgPlus.visibility = View.GONE\n            imgMinus.visibility = View.GONE\n            imgColor.visibility = View.GONE\n            imgSize.visibility = View.GONE\n            line.visibility = View.GONE\n            tvQuantity.visibility = View.GONE\n//            cardView.setCardBackgroundColor(R.color.g_white)\n            imgCartProduct.scaleType = ImageView.ScaleType.FIT_CENTER\n            Glide.with(holder.itemView).load(product.image).into(imgCartProduct)\n            tvCartProductName.text = product.name\n            tvProductCartPrice.text = \"$ ${product.price}\"\n\n            if (product.newPrice != null && product.newPrice.isNotEmpty()) {\n                tvProductCartPrice.text = \"$${product.newPrice}\"\n            } else\n                tvProductCartPrice.text = \"$${product.price}\"\n        }\n\n\n    }\n\n    override fun getItemCount(): Int {\n        return differ.currentList.size\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/adapters/recyclerview/BillingProductsAdapter.kt b/app/src/main/java/com/example/kleine/adapters/recyclerview/BillingProductsAdapter.kt
--- a/app/src/main/java/com/example/kleine/adapters/recyclerview/BillingProductsAdapter.kt	(revision c61773b51209c21dc6e07059e191e17480cada23)
+++ b/app/src/main/java/com/example/kleine/adapters/recyclerview/BillingProductsAdapter.kt	(date 1695485279621)
@@ -50,25 +50,6 @@
     @SuppressLint("ResourceAsColor", "SetTextI18n")
     override fun onBindViewHolder(holder: BillingProductsAdapterViewHolder, position: Int) {
         val product = differ.currentList[position]
-        holder.binding.apply {
-            imgPlus.visibility = View.GONE
-            imgMinus.visibility = View.GONE
-            imgColor.visibility = View.GONE
-            imgSize.visibility = View.GONE
-            line.visibility = View.GONE
-            tvQuantity.visibility = View.GONE
-//            cardView.setCardBackgroundColor(R.color.g_white)
-            imgCartProduct.scaleType = ImageView.ScaleType.FIT_CENTER
-            Glide.with(holder.itemView).load(product.image).into(imgCartProduct)
-            tvCartProductName.text = product.name
-            tvProductCartPrice.text = "$ ${product.price}"
-
-            if (product.newPrice != null && product.newPrice.isNotEmpty()) {
-                tvProductCartPrice.text = "$${product.newPrice}"
-            } else
-                tvProductCartPrice.text = "$${product.price}"
-        }
-
 
     }
 
