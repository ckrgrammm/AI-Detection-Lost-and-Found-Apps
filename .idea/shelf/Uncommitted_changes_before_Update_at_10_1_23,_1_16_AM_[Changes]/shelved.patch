Index: app/src/main/java/com/example/kleine/activities/ShoppingActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.activities\n\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.navigation.Navigation\nimport androidx.navigation.ui.NavigationUI\nimport com.example.kleine.R\nimport com.example.kleine.firebaseDatabase.FirebaseDb\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModelProviderFactory\nimport com.example.kleine.viewmodel.shopping.cart.CartViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\n\nprivate const val TAG = \"ShoppingActivity\"\n\nclass ShoppingActivity : AppCompatActivity() {\n\n    val viewModel by lazy {\n        val fDatabase = FirebaseDb()\n        val providerFactory = ShoppingViewModelProviderFactory(fDatabase)\n        ViewModelProvider(this, providerFactory)[ShoppingViewModel::class.java]\n    }\n\n    private lateinit var cartViewModel: CartViewModel\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_shopping)\n\n\n\n        cartViewModel = CartViewModel()\n//        supportActionBar!!.hide()\n\n        val bottomNavigation = findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        val navController = Navigation.findNavController(this, R.id.host_fragment)\n        NavigationUI.setupWithNavController(bottomNavigation, navController)\n\n        observeCartProductsCount(bottomNavigation)\n    }\n\n\n    private fun observeCartProductsCount(bottomNavigation: BottomNavigationView) {\n\n        cartViewModel.cartItemsCount.observe(this, Observer { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    if (response.data != 0)\n                        bottomNavigation.getOrCreateBadge(R.id.cartFragment).apply {\n                            backgroundColor = resources.getColor(R.color.g_dark_blue)\n                            number = response.data!!\n                        }\n                    else {\n                        bottomNavigation.getOrCreateBadge(R.id.cartFragment).apply {\n                            backgroundColor = resources.getColor(R.color.g_white)\n                            number = response.data\n                        }\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    Log.e(TAG, response.message.toString())\n                    Toast.makeText(this, \"Oops error occurred\", Toast.LENGTH_SHORT).show()\n                    return@Observer\n                }\n            }\n        })\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/activities/ShoppingActivity.kt b/app/src/main/java/com/example/kleine/activities/ShoppingActivity.kt
--- a/app/src/main/java/com/example/kleine/activities/ShoppingActivity.kt	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/java/com/example/kleine/activities/ShoppingActivity.kt	(date 1696091694572)
@@ -31,8 +31,6 @@
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_shopping)
 
-
-
         cartViewModel = CartViewModel()
 //        supportActionBar!!.hide()
 
Index: app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.shopping\n\nimport android.annotation.SuppressLint\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.ImageView\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.constraintlayout.widget.ConstraintLayout\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.viewModels\nimport androidx.lifecycle.Observer\nimport androidx.navigation.Navigation.findNavController\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.viewpager2.widget.ViewPager2\nimport com.bumptech.glide.Glide\nimport com.example.kleine.R\nimport com.example.kleine.adapters.viewpager.ViewPager2Images\nimport com.example.kleine.databinding.FragmentProductPreviewBinding\nimport com.example.kleine.databinding.FragmentTempCommentBinding\nimport com.example.kleine.model.CommentWithUserDetails\nimport com.example.kleine.model.Enrollment\nimport com.example.kleine.model.Material\nimport com.example.kleine.viewmodel.comment.CommentViewModel\nimport com.example.kleine.viewmodel.user.UserViewModel\nimport com.google.android.material.card.MaterialCardView\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.firestore.FirebaseFirestore\nimport com.google.firebase.storage.FirebaseStorage\n\n\nclass MaterialPreviewFragment : Fragment() {\n    private var _binding: FragmentProductPreviewBinding? = null\n    private val binding get() = _binding!!\n    private var material: Material? = null\n\n    private val viewPagerAdapter = ViewPager2Images()\n\n    private val firebaseAuth: FirebaseAuth = FirebaseAuth.getInstance()\n    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()\n\n    //comment use\n    private var areCommentsVisible = true\n    val userViewModel: UserViewModel by viewModels()\n    val commentViewModel: CommentViewModel by viewModels {\n        CommentViewModel.CommentViewModelFactory(userViewModel)\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        _binding = FragmentProductPreviewBinding.inflate(inflater, container, false)\n        return binding.root\n    }\n\n    @SuppressLint(\"SuspiciousIndentation\")\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        onEnrollClick()\n\n\n        // Set up the ViewPager2\n        binding.viewpager2Images.adapter = viewPagerAdapter\n\n        // Retrieve the passed argument\n        material = arguments?.getParcelable(\"material\")\n\n        material?.let { mat ->\n            binding.productModel = mat\n\n            // Convert the single imageUrl into a list and submit to the adapter\n            viewPagerAdapter.differ.submitList(listOf(mat.imageUrl))\n\n        } ?: run {\n            Log.e(\"MaterialPreviewFragment\", \"Material is null!\")\n        }\n\n        // Assuming you have one image per material for now\n        // If there are multiple images, then update this value accordingly\n        // binding.circleIndicator.indicatorItemCount = 1\n        // Update: Commented the above line as it might not be available based on the library version.\n\n        binding.viewpager2Images.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {\n            override fun onPageSelected(position: Int) {\n                super.onPageSelected(position)\n                // Update the CircleIndicator's selected position\n                // You might need to check if such a method is available in your library version\n                // binding.circleIndicator.setSelection(position)\n                // Update: Commented the above line as it might not be available based on the library version.\n            }\n        })\n\n\n        //comment use\n        val adapter = CommentsAdapter(listOf())\n        binding.allMaterialComment.materialCommentData.adapter = adapter\n\n        val materialId = material?.id\n            commentViewModel.fetchComments(materialId.toString())\n\n        commentViewModel.commentsWithUserDetails.observe(viewLifecycleOwner, Observer { commentsWithUserDetails ->\n            val sortedComments = commentsWithUserDetails.sortedByDescending {\n                it.comment.commentDate\n            }\n\n            adapter.setData(sortedComments)\n        })\n\n        // Set OnClickListener on them\n        binding.allMaterialComment.commentTitle.setOnClickListener {\n            toggleComments()\n        }\n        binding.allMaterialComment.downArrowComment.setOnClickListener {\n            toggleComments()\n        }\n        Log.e(\"MaterialPreviewFragment\", \"end null!\")\n\n    }\n\n\n\n    private fun onEnrollClick() {\n        binding.btnEnroll.setOnClickListener {\n            Log.d(\"MaterialPreviewFragment\", \"Button Clicked\")\n\n            // Get the current user ID\n            val userId = firebaseAuth.currentUser?.uid ?: run {\n                Toast.makeText(context, \"User not logged in!\", Toast.LENGTH_SHORT).show()\n                return@setOnClickListener\n            }\n\n            // Get the selected material ID\n            val materialId = material?.id ?: run {\n                Toast.makeText(context, \"Material ID is null!\", Toast.LENGTH_SHORT).show()\n                return@setOnClickListener\n            }\n\n            // Reference to the material document\n            val materialRef = firestore.collection(\"Materials\").document(materialId)\n\n            firestore.runTransaction { transaction ->\n                // Get the current state of the material\n                val snapshot = transaction.get(materialRef)\n\n                // Increment the enroll field value\n                val newEnrollValue = snapshot.getLong(\"enroll\")?.plus(1) ?: 1L\n\n                // Update the enroll field\n                transaction.update(materialRef, \"enroll\", newEnrollValue)\n\n                // Create a new Enrollment object\n                val enrollment = Enrollment(userId = userId, materialId = materialId)\n\n                // Add the enrollment document and return the newEnrollValue for further use if needed\n                transaction.set(firestore.collection(\"enrollments\").document(), enrollment)\n                newEnrollValue\n            }.addOnSuccessListener {\n                Toast.makeText(context, \"Successfully enrolled in the course!\", Toast.LENGTH_SHORT).show()\n\n                // Navigate back to HomeFragment\n                findNavController().navigateUp()\n            }.addOnFailureListener { exception ->\n                Log.w(\"MaterialPreviewFragment\", \"Error adding document\", exception)\n                Toast.makeText(context, \"Error enrolling in the course!\", Toast.LENGTH_SHORT).show()\n            }\n        }\n    }\n\n\n\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null\n    }\n\n\n    //comment use\n    private fun toggleComments() {\n        // Toggle the visibility of the RecyclerView\n        if (areCommentsVisible) {\n            binding.allMaterialComment.materialCommentData.visibility = View.GONE\n            binding.allMaterialComment.downArrowComment.animate().rotation(0f).setDuration(300).start() // Rotate to initial position\n        } else {\n            binding.allMaterialComment.materialCommentData.visibility = View.VISIBLE\n            binding.allMaterialComment.downArrowComment.animate().rotation(180f).setDuration(300).start() // Rotate 180 degrees\n        }\n        // Update the state\n        areCommentsVisible = !areCommentsVisible\n    }\n\n    inner class CommentsAdapter(\n        private var commentsWithUserDetails: List<CommentWithUserDetails>\n    ) : RecyclerView.Adapter<CommentsAdapter.CommentViewHolder>() {\n        inner class CommentViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n            val commentTextView: TextView = view.findViewById(R.id.userComment)\n            val commentDateTextView: TextView = view.findViewById(R.id.userCommentDate)\n            val userNameTextView: TextView = view.findViewById(R.id.commentUserTextTitle)\n            val userImageView: ImageView = view.findViewById(R.id.userImage)\n            val replyTextView: TextView = view.findViewById(R.id.userReplyText)\n            val replyDateTextView: TextView = view.findViewById(R.id.replyCommentDate)\n            val partnerNameTextView: TextView = view.findViewById(R.id.commentReplyUserTextTitle)\n            val partnerImageView: ImageView = view.findViewById(R.id.partnerImage)\n            val ratingTextView: TextView = view.findViewById(R.id.rating)\n            val replyCommentDate: TextView = view.findViewById(R.id.replyCommentDate)\n            val arrow: MaterialCardView = view.findViewById(R.id.firstReplyCommentArrowImg)\n            val firstReplyCommentImg: MaterialCardView = view.findViewById(R.id.firstReplyCommentImg)\n            val userReplyCommentCard: ConstraintLayout = view.findViewById(R.id.userReplyCommentCard)\n        }\n\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CommentViewHolder {\n            val view = LayoutInflater.from(parent.context).inflate(R.layout.recycler_view_material_comment, parent, false)\n            return CommentViewHolder(view)\n        }\n\n        override fun onBindViewHolder(holder: CommentViewHolder, position: Int) {\n            val commentWithUserDetails = commentsWithUserDetails[position]\n            val comment = commentWithUserDetails.comment\n            holder.commentTextView.text = comment.comment\n            holder.commentDateTextView.text = comment.commentDate\n            holder.userNameTextView.text = commentWithUserDetails.userName\n            holder.ratingTextView.text = comment.rating.toString()\n            if (commentWithUserDetails.userImage != null) {\n                val storageReference = FirebaseStorage.getInstance().getReferenceFromUrl(commentWithUserDetails.userImage)\n                storageReference.downloadUrl.addOnSuccessListener { uri ->\n                    Glide.with(holder.userImageView.context)\n                        .load(uri.toString())\n                        .into(holder.userImageView)\n                }\n            }\n            if (commentWithUserDetails.partnerName != null) {\n                holder.replyTextView.text = comment.replyComment\n                holder.replyDateTextView.text = comment.replyDate\n                holder.partnerNameTextView.text = commentWithUserDetails.partnerName\n                if (commentWithUserDetails.partnerImage != null) {\n                    val storageReference = FirebaseStorage.getInstance().getReferenceFromUrl(commentWithUserDetails.partnerImage)\n                    storageReference.downloadUrl.addOnSuccessListener { uri ->\n                        Glide.with(holder.partnerImageView.context)\n                            .load(uri.toString())\n                            .into(holder.partnerImageView)\n                    }\n                }\n            } else {\n                holder.arrow.visibility = View.GONE\n                holder.firstReplyCommentImg.visibility = View.GONE\n                holder.userReplyCommentCard.visibility = View.GONE\n                holder.replyCommentDate.visibility = View.GONE\n            }\n        }\n\n        override fun getItemCount(): Int {\n            return commentsWithUserDetails.size\n        }\n\n        fun setData(newCommentsWithUserDetails: List<CommentWithUserDetails>) {\n            this.commentsWithUserDetails = newCommentsWithUserDetails\n            notifyDataSetChanged()\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt	(date 1696090574359)
@@ -33,6 +33,7 @@
 import com.google.firebase.storage.FirebaseStorage
 
 
+
 class MaterialPreviewFragment : Fragment() {
     private var _binding: FragmentProductPreviewBinding? = null
     private val binding get() = _binding!!
@@ -63,45 +64,27 @@
         super.onViewCreated(view, savedInstanceState)
         onEnrollClick()
 
-
-        // Set up the ViewPager2
-        binding.viewpager2Images.adapter = viewPagerAdapter
-
         // Retrieve the passed argument
         material = arguments?.getParcelable("material")
 
         material?.let { mat ->
             binding.productModel = mat
 
-            // Convert the single imageUrl into a list and submit to the adapter
-            viewPagerAdapter.differ.submitList(listOf(mat.imageUrl))
+            // Load the image using Glide
+            Glide.with(this)
+                .load(mat.imageUrl)
+                .into(binding.materialImage)
 
         } ?: run {
             Log.e("MaterialPreviewFragment", "Material is null!")
         }
 
-        // Assuming you have one image per material for now
-        // If there are multiple images, then update this value accordingly
-        // binding.circleIndicator.indicatorItemCount = 1
-        // Update: Commented the above line as it might not be available based on the library version.
-
-        binding.viewpager2Images.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {
-            override fun onPageSelected(position: Int) {
-                super.onPageSelected(position)
-                // Update the CircleIndicator's selected position
-                // You might need to check if such a method is available in your library version
-                // binding.circleIndicator.setSelection(position)
-                // Update: Commented the above line as it might not be available based on the library version.
-            }
-        })
-
-
         //comment use
         val adapter = CommentsAdapter(listOf())
         binding.allMaterialComment.materialCommentData.adapter = adapter
 
         val materialId = material?.id
-            commentViewModel.fetchComments(materialId.toString())
+        commentViewModel.fetchComments(materialId.toString())
 
         commentViewModel.commentsWithUserDetails.observe(viewLifecycleOwner, Observer { commentsWithUserDetails ->
             val sortedComments = commentsWithUserDetails.sortedByDescending {
@@ -111,15 +94,12 @@
             adapter.setData(sortedComments)
         })
 
-        // Set OnClickListener on them
         binding.allMaterialComment.commentTitle.setOnClickListener {
             toggleComments()
         }
         binding.allMaterialComment.downArrowComment.setOnClickListener {
             toggleComments()
         }
-        Log.e("MaterialPreviewFragment", "end null!")
-
     }
 
 
@@ -253,6 +233,9 @@
             }
         }
 
+
+
+
         override fun getItemCount(): Int {
             return commentsWithUserDetails.size
         }
Index: app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.viewmodel.shopping\n\nimport android.util.Log\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.kleine.firebaseDatabase.FirebaseDb\nimport com.example.kleine.model.*\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.ACCESSORY_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CHAIR_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CUPBOARD_CATEGORY\nimport com.example.kleine.util.Constants.Companion.FURNITURE_CATEGORY\nimport com.example.kleine.util.Constants.Companion.TABLES_CATEGORY\nimport com.google.firebase.firestore.FirebaseFirestore\nimport java.util.*\n\nprivate const val TAG = \"ShoppingViewModel\"\n\nclass ShoppingViewModel(\n    private val firebaseDatabase: FirebaseDb\n) : ViewModel() {\n\n\n    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()\n//    val materialsLiveData: MutableLiveData<Resource<List<Material>>> = MutableLiveData()\n    val materials: MutableLiveData<Resource<List<Material>>> = MutableLiveData()\n\n    private val _materialsLiveData = MutableLiveData<Resource<List<Material>>>()\n    val materialsLiveData: LiveData<Resource<List<Material>>> get() = _materialsLiveData\n\n\n//    val materials = MutableLiveData<Resource<List<Material>>>()\n\n    val clothes = MutableLiveData<List<Product>>()\n    val emptyClothes = MutableLiveData<Boolean>()\n    val bestDeals = MutableLiveData<List<Product>>()\n    val emptyBestDeals = MutableLiveData<Boolean>()\n\n    val home = MutableLiveData<Resource<List<Product>>>()\n\n    val chairs = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedChairs = MutableLiveData<Resource<List<Product>>>()\n\n    val tables = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedTables = MutableLiveData<Resource<List<Product>>>()\n\n    val accessory = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedAccessories = MutableLiveData<Resource<List<Product>>>()\n\n    val furniture = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedFurniture = MutableLiveData<Resource<List<Product>>>()\n\n    val mostRequestedCupboard = MutableLiveData<Resource<List<Product>>>()\n    val cupboard = MutableLiveData<Resource<List<Product>>>()\n    val addToCart = MutableLiveData<Resource<Boolean>>()\n\n    val addAddress = MutableLiveData<Resource<Address>>()\n    val updateAddress = MutableLiveData<Resource<Address>>()\n    val deleteAddress = MutableLiveData<Resource<Address>>()\n\n    val profile = MutableLiveData<Resource<User>>()\n\n    val uploadProfileImage = MutableLiveData<Resource<String>>()\n    val updateUserInformation = MutableLiveData<Resource<User>>()\n\n    val userOrders = MutableLiveData<Resource<List<Order>>>()\n\n    val passwordReset = MutableLiveData<Resource<String>>()\n\n    val orderAddress = MutableLiveData<Resource<Address>>()\n    val orderProducts = MutableLiveData<Resource<List<CartProduct>>>()\n\n    val categories = MutableLiveData<Resource<List<Category>>>()\n\n\n    val search = MutableLiveData<Resource<List<Product>>>()\n\n    private var homePage: Long = 10\n    private var clothesPaging: Long = 5\n    private var bestDealsPaging: Long = 5\n\n    private var cupboardPaging: Long = 4\n    private var mostOrderCupboardPaging: Long = 5\n\n    private var mostRequestedChairsPage: Long = 3\n    private var chairsPage: Long = 4\n\n    private var mostRequestedTablePage: Long = 3\n    private var tablePage: Long = 4\n\n    private var mostRequestedAccessoryPage: Long = 3\n    private var accessoryPage: Long = 4\n\n    private var mostRequestedFurniturePage: Long = 3\n    private var furniturePage: Long = 4\n\n\n    init {\n        getClothesProducts()\n        getBestDealsProduct()\n        getHomeProduct()\n    }\n\n    // Fetch Materials from Firebase\n    fun getMaterials() {\n        _materialsLiveData.postValue(Resource.Loading())\n\n        firebaseDatabase.getMaterials(10)\n            .addOnSuccessListener { materials ->\n                // materials is already a List<Material>\n                _materialsLiveData.postValue(Resource.Success(materials))\n            }\n            .addOnFailureListener { exception ->\n                _materialsLiveData.postValue(Resource.Error(exception.message ?: \"An unknown error occurred\"))\n            }\n    }\n\n\n\n\n    private var furnitureProducts: List<Product>? = null\n    fun getFurniture(size: Int = 0) {\n        if (furnitureProducts != null && size == 0) {\n            furniture.postValue(Resource.Success(furnitureProducts))\n            return\n        }\n        furniture.postValue(Resource.Loading())\n        shouldPaging(FURNITURE_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                tables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(FURNITURE_CATEGORY, furniturePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                furnitureProducts = productsList\n                                furniture.postValue(Resource.Success(productsList))\n                                furniturePage += 4\n\n                            }\n                        } else\n                            furniture.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                furniture.postValue(Resource.Error(\"Cannot paging\"))\n\n        }\n    }\n\n    private var mostRequestedFurnitureProducts: List<Product>? = null\n    fun getMostRequestedFurniture(size: Int = 0) {\n        if (mostRequestedFurnitureProducts != null && size == 0) {\n            mostRequestedFurniture.postValue(Resource.Success(mostRequestedFurnitureProducts))\n            return\n        }\n        mostRequestedFurniture.postValue(Resource.Loading())\n        shouldPaging(FURNITURE_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedFurniture.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(\n                    FURNITURE_CATEGORY,\n                    mostRequestedFurniturePage\n                )\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedFurnitureProducts = productsList\n                                mostRequestedFurniture.postValue(Resource.Success(productsList))\n                                mostRequestedFurniturePage += 4\n\n                            }\n                        } else\n                            mostRequestedFurniture.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedFurniture.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var accessoriesProducts: List<Product>? = null\n    fun getAccessories(size: Int = 0) {\n        if (accessoriesProducts != null && size == 0) {\n            accessory.postValue(Resource.Success(accessoriesProducts))\n            return\n        }\n        accessory.postValue(Resource.Loading())\n        shouldPaging(ACCESSORY_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                Log.d(\"test\", \"paging\")\n                firebaseDatabase.getProductsByCategory(ACCESSORY_CATEGORY, accessoryPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                accessory.postValue(Resource.Success(productsList))\n                                accessoriesProducts = productsList\n                                accessoryPage += 4\n\n                            }\n                        } else\n                            accessory.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else {\n                accessory.postValue(Resource.Error(\"Cannot page\"))\n            }\n        }\n    }\n\n    private var mostRequestedAccessoriesProducts: List<Product>? = null\n    fun getMostRequestedAccessories(size: Int = 0) {\n        if (mostRequestedAccessoriesProducts != null && size == 0) {\n            mostRequestedAccessories.postValue(Resource.Success(mostRequestedAccessoriesProducts))\n            return\n        }\n        mostRequestedAccessories.postValue(Resource.Loading())\n        shouldPaging(ACCESSORY_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(\n                    ACCESSORY_CATEGORY,\n                    mostRequestedAccessoryPage\n                )\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedAccessories.postValue(Resource.Success(productsList))\n                                mostRequestedAccessoriesProducts = productsList\n                                mostRequestedAccessoryPage += 4\n\n                            }\n                        } else\n                            mostRequestedAccessories.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedAccessories.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var chairsProducts: List<Product>? = null\n    fun getChairs(size: Int = 0) {\n        if (chairsProducts != null && size == 0) {\n            chairs.postValue(Resource.Success(chairsProducts))\n            return\n        }\n        chairs.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(CHAIR_CATEGORY, chairsPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                chairsProducts = productsList\n                                chairs.postValue(Resource.Success(productsList))\n                                chairsPage += 4\n\n                            }\n                        } else\n                            chairs.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                chairs.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedChairsProducts: List<Product>? = null\n    fun getMostRequestedChairs(size: Int = 0) {\n        if (mostRequestedChairsProducts != null && size == 0) {\n            mostRequestedChairs.postValue(Resource.Success(chairsProducts))\n            return\n        }\n        mostRequestedChairs.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(CHAIR_CATEGORY, mostRequestedChairsPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedChairsProducts = productsList\n                                mostRequestedChairs.postValue(Resource.Success(productsList))\n                                mostRequestedChairsPage += 4\n\n                            }\n                        } else\n                            mostRequestedChairs.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                chairs.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var tablesProducts: List<Product>? = null\n    fun getTables(size: Int = 0) {\n        if (tablesProducts != null && size == 0) {\n            tables.postValue(Resource.Success(tablesProducts))\n            return\n        }\n        tables.postValue(Resource.Loading())\n        shouldPaging(TABLES_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                tables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(TABLES_CATEGORY, tablePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                tablesProducts = productsList\n                                tables.postValue(Resource.Success(productsList))\n                                tablePage += 4\n\n                            }\n                        } else\n                            tables.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                home.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedTablesProducts: List<Product>? = null\n    fun getMostRequestedTables(size: Int = 0) {\n        if (mostRequestedTablesProducts != null && size == 0) {\n            tables.postValue(Resource.Success(mostRequestedTablesProducts))\n            return\n        }\n        mostRequestedTables.postValue(Resource.Loading())\n        shouldPaging(TABLES_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedTables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(TABLES_CATEGORY, mostRequestedTablePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedTablesProducts = productsList\n                                mostRequestedTables.postValue(Resource.Success(productsList))\n                                mostRequestedTablePage += 3\n\n                            }\n                        } else\n                            mostRequestedTables.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedTables.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n\n    fun getClothesProducts() =\n        firebaseDatabase.getClothesProducts(clothesPaging).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result\n                if (!documents!!.isEmpty) {\n                    val productsList = documents.toObjects(Product::class.java)\n                    clothes.postValue(productsList)\n                    clothesPaging += 5\n                } else\n                    emptyClothes.postValue(true)\n\n            } else\n                Log.e(TAG, it.exception.toString())\n\n        }\n\n    fun getBestDealsProduct() =\n        firebaseDatabase.getBestDealsProducts(bestDealsPaging).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result\n                if (!documents!!.isEmpty) {\n                    val productsList = documents.toObjects(Product::class.java)\n                    bestDeals.postValue(productsList)\n                    bestDealsPaging += 5\n                } else\n                    emptyBestDeals.postValue(true)\n\n            } else\n                Log.e(TAG, it.exception.toString())\n        }\n\n    fun getHomeProduct(size: Int = 0) {\n        home.postValue(Resource.Loading())\n        shouldPagingHome(size)\n        { shouldPaging ->\n            if (shouldPaging) {\n                home.postValue(Resource.Loading())\n                firebaseDatabase.getHomeProducts(homePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                home.postValue(Resource.Success(productsList))\n                                homePage += 4\n\n                            }\n                        } else\n                            home.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                home.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedCupboardProducts: List<Product>? = null\n    fun getMostRequestedCupboards(size: Int = 0) {\n        if (mostRequestedCupboardProducts != null && size == 0) {\n            mostRequestedCupboard.postValue(Resource.Success(mostRequestedCupboardProducts))\n            return\n        }\n\n        mostRequestedCupboard.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedCupboard.postValue(Resource.Loading())\n                firebaseDatabase.getMostOrderedCupboard(mostOrderCupboardPaging)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedCupboardProducts = productsList\n                                mostRequestedCupboard.postValue(Resource.Success(productsList))\n                                mostOrderCupboardPaging += 5\n\n                            }\n                        } else\n                            mostRequestedCupboard.postValue(Resource.Error(it.exception.toString()))\n                    }\n\n\n            } else\n                mostRequestedCupboard.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var dCupboardProducts: List<Product>? = null\n    fun getCupboardProduct(size: Int = 0) {\n        if (dCupboardProducts != null && size == 0) {\n            cupboard.postValue(Resource.Success(dCupboardProducts))\n            return\n        }\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                cupboard.postValue(Resource.Loading())\n                firebaseDatabase.getCupboards(cupboardPaging).addOnCompleteListener {\n                    if (it.isSuccessful) {\n\n                        val documents = it.result\n                        if (!documents!!.isEmpty) {\n                            val productsList = documents.toObjects(Product::class.java)\n                            dCupboardProducts = productsList\n                            cupboard.postValue(Resource.Success(productsList))\n                            cupboardPaging += 10\n                        }\n\n                    } else\n                        cupboard.postValue(Resource.Error(it.exception.toString()))\n                }\n            } else\n                cupboard.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    /*\n    * TODO : Move these functions to firebaseDatabase class\n     */\n\n    private fun shouldPaging(category: String, listSize: Int, onSuccess: (Boolean) -> Unit) {\n        FirebaseFirestore.getInstance()\n            .collection(\"categories\")\n            .whereEqualTo(\"name\", category).get().addOnSuccessListener {\n                val tempCategory = it.toObjects(Category::class.java)\n                val products = tempCategory[0].products\n                Log.d(\"test\", \" $category : prodcuts ${tempCategory[0].products}, size $listSize\")\n                if (listSize == products)\n                    onSuccess(false).also { Log.d(TAG, \"$category Paging:false\") }\n                else\n                    onSuccess(true).also { Log.d(TAG, \"$category Paging:true\") }\n            }\n    }\n\n    private fun shouldPagingHome(listSize: Int, onSuccess: (Boolean) -> Unit) {\n        FirebaseFirestore.getInstance()\n            .collection(\"categories\").get().addOnSuccessListener {\n                var productsCount = 0\n                it.toObjects(Category::class.java).forEach { category ->\n                    productsCount += category.products!!.toInt()\n                }\n\n                if (listSize == productsCount)\n                    onSuccess(false)\n                else\n                    onSuccess(true)\n\n            }\n    }\n\n\n    private fun checkIfProductAlreadyAdded(\n        product: CartProduct,\n        onSuccess: (Boolean, String) -> Unit\n    ) {\n        addToCart.postValue(Resource.Loading())\n        firebaseDatabase.getProductInCart(product).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result!!.documents\n                if (documents.isNotEmpty())\n                    onSuccess(true, documents[0].id) // true ---> product is already in cart\n                else\n                    onSuccess(false, \"\") // false ---> product is not in cart\n            } else\n                addToCart.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n\n    fun addProductToCart(product: CartProduct) =\n        checkIfProductAlreadyAdded(product) { isAdded, id ->\n            if (isAdded) {\n                firebaseDatabase.increaseProductQuantity(id).addOnCompleteListener {\n                    if (it.isSuccessful)\n                        addToCart.postValue(Resource.Success(true))\n                    else\n                        addToCart.postValue(Resource.Error(it.exception!!.message))\n\n                }\n            } else {\n                firebaseDatabase.addProductToCart(product).addOnCompleteListener {\n                    if (it.isSuccessful)\n                        addToCart.postValue(Resource.Success(true))\n                    else\n                        addToCart.postValue(Resource.Error(it.exception!!.message))\n                }\n            }\n        }\n\n\n    fun saveAddress(address: Address) {\n        addAddress.postValue(Resource.Loading())\n        firebaseDatabase.saveNewAddress(address)?.addOnCompleteListener {\n            if (it.isSuccessful)\n                addAddress.postValue(Resource.Success(address))\n            else\n                addAddress.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun updateAddress(oldAddress: Address, newAddress: Address) {\n        updateAddress.postValue(Resource.Loading())\n        firebaseDatabase.findAddress(oldAddress).addOnCompleteListener { addressResponse ->\n            if (addressResponse.isSuccessful) {\n                val documentUid = addressResponse.result!!.documents[0].id\n                firebaseDatabase.updateAddress(documentUid, newAddress)?.addOnCompleteListener {\n                    if (it.isSuccessful)\n                        updateAddress.postValue(Resource.Success(newAddress))\n                    else\n                        updateAddress.postValue(Resource.Error(it.exception.toString()))\n\n                }\n\n            } else\n                updateAddress.postValue(Resource.Error(addressResponse.exception.toString()))\n\n        }\n    }\n\n    fun deleteAddress(address: Address) {\n        deleteAddress.postValue(Resource.Loading())\n        firebaseDatabase.findAddress(address).addOnCompleteListener { addressResponse ->\n            if (addressResponse.isSuccessful) {\n                val documentUid = addressResponse.result!!.documents[0].id\n                firebaseDatabase.deleteAddress(documentUid, address)?.addOnCompleteListener {\n                    if (it.isSuccessful)\n                        deleteAddress.postValue(Resource.Success(address))\n                    else\n                        deleteAddress.postValue(Resource.Error(it.exception.toString()))\n\n                }\n\n            } else\n                deleteAddress.postValue(Resource.Error(addressResponse.exception.toString()))\n\n        }\n    }\n\n    private val user: User? = null\n    fun getUser() {\n        if (user != null) {\n            profile.postValue(Resource.Success(user))\n            return\n        }\n\n        profile.postValue(Resource.Loading())\n        firebaseDatabase.getUser().addSnapshotListener { value, error ->\n            if (error != null)\n                profile.postValue(Resource.Error(error.message))\n            else\n                profile.postValue(Resource.Success(value?.toObject(User::class.java)))\n\n        }\n    }\n\n    fun uploadProfileImage(image: ByteArray) {\n        Log.d(\"ViewModel\", \"Image byte array size: ${image.size}\")\n        uploadProfileImage.postValue(Resource.Loading())\n        val name = UUID.nameUUIDFromBytes(image).toString()\n        Log.d(\"ViewModel\", \"Generated UUID: $name\")\n\n        firebaseDatabase.uploadUserProfileImage(image, name).addOnCompleteListener {\n            if (it.isSuccessful) {\n                Log.d(\"ViewModel\", \"Upload successful with name: $name\")\n                uploadProfileImage.postValue(Resource.Success(name))\n            } else {\n                Log.e(\"ViewModel\", \"Upload failed: ${it.exception}\")\n                uploadProfileImage.postValue(Resource.Error(it.exception.toString()))\n            }\n        }\n    }\n\n\n    fun updateInformation(firstName: String, lastName: String, email: String, imageName: String) {\n        updateUserInformation.postValue(Resource.Loading())\n\n        firebaseDatabase.getImageUrl(firstName, lastName, email, imageName) { user, exception ->\n\n            if (exception != null)\n                updateUserInformation.postValue(Resource.Error(exception))\n                    .also { Log.d(\"test1\", \"up\") }\n            else\n                user?.let {\n                    onUpdateInformation(user).also { Log.d(\"test1\", \"down\") }\n                }\n        }\n    }\n\n    private fun onUpdateInformation(user: User) {\n        firebaseDatabase.updateUserInformation(user).addOnCompleteListener {\n            if (it.isSuccessful)\n                updateUserInformation.postValue(Resource.Success(user))\n            else\n                updateUserInformation.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n    fun getUserOrders() {\n        userOrders.postValue(Resource.Loading())\n        firebaseDatabase.getUserOrders().addOnCompleteListener {\n            if (it.isSuccessful)\n                userOrders.postValue(Resource.Success(it.result?.toObjects(Order::class.java)))\n            else\n                userOrders.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun resetPassword(email: String) {\n        passwordReset.postValue(Resource.Loading())\n        firebaseDatabase.resetPassword(email).addOnCompleteListener {\n            if (it.isSuccessful)\n                passwordReset.postValue(Resource.Success(email))\n            else\n                passwordReset.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun getOrderAddressAndProducts(order: Order) {\n        orderAddress.postValue(Resource.Loading())\n        orderProducts.postValue(Resource.Loading())\n        firebaseDatabase.getOrderAddressAndProducts(order, { address, aError ->\n            if (aError != null)\n                orderAddress.postValue(Resource.Error(aError))\n            else\n                orderAddress.postValue(Resource.Success(address))\n        }, { products, pError ->\n\n            if (pError != null)\n                orderProducts.postValue(Resource.Error(pError))\n            else\n                orderProducts.postValue(Resource.Success(products))\n\n        })\n    }\n\n    fun searchProducts(searchQuery: String) {\n        search.postValue(Resource.Loading())\n        firebaseDatabase.searchProducts(searchQuery).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val productsList = it.result!!.toObjects(Product::class.java)\n                search.postValue(Resource.Success(productsList))\n\n            } else\n                search.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n    private var categoriesSafe: List<Category>? = null\n    fun getCategories() {\n        if(categoriesSafe != null){\n            categories.postValue(Resource.Success(categoriesSafe))\n            return\n        }\n        categories.postValue(Resource.Loading())\n        firebaseDatabase.getCategories().addOnCompleteListener {\n            if (it.isSuccessful) {\n                val categoriesList = it.result!!.toObjects(Category::class.java)\n                categoriesSafe = categoriesList\n                categories.postValue(Resource.Success(categoriesList))\n            } else\n                categories.postValue(Resource.Error(it.exception.toString()))\n        }\n\n\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt b/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt
--- a/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt	(date 1696093877366)
@@ -23,37 +23,16 @@
 
 
     private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()
-//    val materialsLiveData: MutableLiveData<Resource<List<Material>>> = MutableLiveData()
     val materials: MutableLiveData<Resource<List<Material>>> = MutableLiveData()
 
     private val _materialsLiveData = MutableLiveData<Resource<List<Material>>>()
     val materialsLiveData: LiveData<Resource<List<Material>>> get() = _materialsLiveData
 
-
+    val searchResults = MutableLiveData<Resource<List<Material>>>()
 //    val materials = MutableLiveData<Resource<List<Material>>>()
 
-    val clothes = MutableLiveData<List<Product>>()
-    val emptyClothes = MutableLiveData<Boolean>()
-    val bestDeals = MutableLiveData<List<Product>>()
-    val emptyBestDeals = MutableLiveData<Boolean>()
-
-    val home = MutableLiveData<Resource<List<Product>>>()
-
-    val chairs = MutableLiveData<Resource<List<Product>>>()
-    val mostRequestedChairs = MutableLiveData<Resource<List<Product>>>()
-
-    val tables = MutableLiveData<Resource<List<Product>>>()
-    val mostRequestedTables = MutableLiveData<Resource<List<Product>>>()
 
-    val accessory = MutableLiveData<Resource<List<Product>>>()
-    val mostRequestedAccessories = MutableLiveData<Resource<List<Product>>>()
 
-    val furniture = MutableLiveData<Resource<List<Product>>>()
-    val mostRequestedFurniture = MutableLiveData<Resource<List<Product>>>()
-
-    val mostRequestedCupboard = MutableLiveData<Resource<List<Product>>>()
-    val cupboard = MutableLiveData<Resource<List<Product>>>()
-    val addToCart = MutableLiveData<Resource<Boolean>>()
 
     val addAddress = MutableLiveData<Resource<Address>>()
     val updateAddress = MutableLiveData<Resource<Address>>()
@@ -63,44 +42,12 @@
 
     val uploadProfileImage = MutableLiveData<Resource<String>>()
     val updateUserInformation = MutableLiveData<Resource<User>>()
-
-    val userOrders = MutableLiveData<Resource<List<Order>>>()
-
     val passwordReset = MutableLiveData<Resource<String>>()
-
-    val orderAddress = MutableLiveData<Resource<Address>>()
-    val orderProducts = MutableLiveData<Resource<List<CartProduct>>>()
-
     val categories = MutableLiveData<Resource<List<Category>>>()
-
-
     val search = MutableLiveData<Resource<List<Product>>>()
 
-    private var homePage: Long = 10
-    private var clothesPaging: Long = 5
-    private var bestDealsPaging: Long = 5
-
-    private var cupboardPaging: Long = 4
-    private var mostOrderCupboardPaging: Long = 5
 
-    private var mostRequestedChairsPage: Long = 3
-    private var chairsPage: Long = 4
 
-    private var mostRequestedTablePage: Long = 3
-    private var tablePage: Long = 4
-
-    private var mostRequestedAccessoryPage: Long = 3
-    private var accessoryPage: Long = 4
-
-    private var mostRequestedFurniturePage: Long = 3
-    private var furniturePage: Long = 4
-
-
-    init {
-        getClothesProducts()
-        getBestDealsProduct()
-        getHomeProduct()
-    }
 
     // Fetch Materials from Firebase
     fun getMaterials() {
@@ -118,368 +65,6 @@
 
 
 
-
-    private var furnitureProducts: List<Product>? = null
-    fun getFurniture(size: Int = 0) {
-        if (furnitureProducts != null && size == 0) {
-            furniture.postValue(Resource.Success(furnitureProducts))
-            return
-        }
-        furniture.postValue(Resource.Loading())
-        shouldPaging(FURNITURE_CATEGORY, size) { shouldPaging ->
-            if (shouldPaging) {
-                tables.postValue(Resource.Loading())
-                firebaseDatabase.getProductsByCategory(FURNITURE_CATEGORY, furniturePage)
-                    .addOnCompleteListener {
-                        if (it.isSuccessful) {
-                            val documents = it.result
-                            if (!documents!!.isEmpty) {
-                                val productsList = documents.toObjects(Product::class.java)
-                                furnitureProducts = productsList
-                                furniture.postValue(Resource.Success(productsList))
-                                furniturePage += 4
-
-                            }
-                        } else
-                            furniture.postValue(Resource.Error(it.exception.toString()))
-                    }
-            } else
-                furniture.postValue(Resource.Error("Cannot paging"))
-
-        }
-    }
-
-    private var mostRequestedFurnitureProducts: List<Product>? = null
-    fun getMostRequestedFurniture(size: Int = 0) {
-        if (mostRequestedFurnitureProducts != null && size == 0) {
-            mostRequestedFurniture.postValue(Resource.Success(mostRequestedFurnitureProducts))
-            return
-        }
-        mostRequestedFurniture.postValue(Resource.Loading())
-        shouldPaging(FURNITURE_CATEGORY, size) { shouldPaging ->
-            if (shouldPaging) {
-                mostRequestedFurniture.postValue(Resource.Loading())
-                firebaseDatabase.getProductsByCategory(
-                    FURNITURE_CATEGORY,
-                    mostRequestedFurniturePage
-                )
-                    .addOnCompleteListener {
-                        if (it.isSuccessful) {
-                            val documents = it.result
-                            if (!documents!!.isEmpty) {
-                                val productsList = documents.toObjects(Product::class.java)
-                                mostRequestedFurnitureProducts = productsList
-                                mostRequestedFurniture.postValue(Resource.Success(productsList))
-                                mostRequestedFurniturePage += 4
-
-                            }
-                        } else
-                            mostRequestedFurniture.postValue(Resource.Error(it.exception.toString()))
-                    }
-            } else
-                mostRequestedFurniture.postValue(Resource.Error("Cannot paging"))
-        }
-    }
-
-    private var accessoriesProducts: List<Product>? = null
-    fun getAccessories(size: Int = 0) {
-        if (accessoriesProducts != null && size == 0) {
-            accessory.postValue(Resource.Success(accessoriesProducts))
-            return
-        }
-        accessory.postValue(Resource.Loading())
-        shouldPaging(ACCESSORY_CATEGORY, size) { shouldPaging ->
-            if (shouldPaging) {
-                Log.d("test", "paging")
-                firebaseDatabase.getProductsByCategory(ACCESSORY_CATEGORY, accessoryPage)
-                    .addOnCompleteListener {
-                        if (it.isSuccessful) {
-                            val documents = it.result
-                            if (!documents!!.isEmpty) {
-                                val productsList = documents.toObjects(Product::class.java)
-                                accessory.postValue(Resource.Success(productsList))
-                                accessoriesProducts = productsList
-                                accessoryPage += 4
-
-                            }
-                        } else
-                            accessory.postValue(Resource.Error(it.exception.toString()))
-                    }
-            } else {
-                accessory.postValue(Resource.Error("Cannot page"))
-            }
-        }
-    }
-
-    private var mostRequestedAccessoriesProducts: List<Product>? = null
-    fun getMostRequestedAccessories(size: Int = 0) {
-        if (mostRequestedAccessoriesProducts != null && size == 0) {
-            mostRequestedAccessories.postValue(Resource.Success(mostRequestedAccessoriesProducts))
-            return
-        }
-        mostRequestedAccessories.postValue(Resource.Loading())
-        shouldPaging(ACCESSORY_CATEGORY, size) { shouldPaging ->
-            if (shouldPaging) {
-                chairs.postValue(Resource.Loading())
-                firebaseDatabase.getProductsByCategory(
-                    ACCESSORY_CATEGORY,
-                    mostRequestedAccessoryPage
-                )
-                    .addOnCompleteListener {
-                        if (it.isSuccessful) {
-                            val documents = it.result
-                            if (!documents!!.isEmpty) {
-                                val productsList = documents.toObjects(Product::class.java)
-                                mostRequestedAccessories.postValue(Resource.Success(productsList))
-                                mostRequestedAccessoriesProducts = productsList
-                                mostRequestedAccessoryPage += 4
-
-                            }
-                        } else
-                            mostRequestedAccessories.postValue(Resource.Error(it.exception.toString()))
-                    }
-            } else
-                mostRequestedAccessories.postValue(Resource.Error("Cannot paging"))
-        }
-    }
-
-    private var chairsProducts: List<Product>? = null
-    fun getChairs(size: Int = 0) {
-        if (chairsProducts != null && size == 0) {
-            chairs.postValue(Resource.Success(chairsProducts))
-            return
-        }
-        chairs.postValue(Resource.Loading())
-        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->
-            if (shouldPaging) {
-
-                chairs.postValue(Resource.Loading())
-                firebaseDatabase.getProductsByCategory(CHAIR_CATEGORY, chairsPage)
-                    .addOnCompleteListener {
-                        if (it.isSuccessful) {
-                            val documents = it.result
-                            if (!documents!!.isEmpty) {
-                                val productsList = documents.toObjects(Product::class.java)
-                                chairsProducts = productsList
-                                chairs.postValue(Resource.Success(productsList))
-                                chairsPage += 4
-
-                            }
-                        } else
-                            chairs.postValue(Resource.Error(it.exception.toString()))
-                    }
-            } else
-                chairs.postValue(Resource.Error("Cannot paging"))
-        }
-    }
-
-    private var mostRequestedChairsProducts: List<Product>? = null
-    fun getMostRequestedChairs(size: Int = 0) {
-        if (mostRequestedChairsProducts != null && size == 0) {
-            mostRequestedChairs.postValue(Resource.Success(chairsProducts))
-            return
-        }
-        mostRequestedChairs.postValue(Resource.Loading())
-        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->
-            if (shouldPaging) {
-                chairs.postValue(Resource.Loading())
-                firebaseDatabase.getProductsByCategory(CHAIR_CATEGORY, mostRequestedChairsPage)
-                    .addOnCompleteListener {
-                        if (it.isSuccessful) {
-                            val documents = it.result
-                            if (!documents!!.isEmpty) {
-                                val productsList = documents.toObjects(Product::class.java)
-                                mostRequestedChairsProducts = productsList
-                                mostRequestedChairs.postValue(Resource.Success(productsList))
-                                mostRequestedChairsPage += 4
-
-                            }
-                        } else
-                            mostRequestedChairs.postValue(Resource.Error(it.exception.toString()))
-                    }
-            } else
-                chairs.postValue(Resource.Error("Cannot paging"))
-        }
-    }
-
-    private var tablesProducts: List<Product>? = null
-    fun getTables(size: Int = 0) {
-        if (tablesProducts != null && size == 0) {
-            tables.postValue(Resource.Success(tablesProducts))
-            return
-        }
-        tables.postValue(Resource.Loading())
-        shouldPaging(TABLES_CATEGORY, size) { shouldPaging ->
-            if (shouldPaging) {
-                tables.postValue(Resource.Loading())
-                firebaseDatabase.getProductsByCategory(TABLES_CATEGORY, tablePage)
-                    .addOnCompleteListener {
-                        if (it.isSuccessful) {
-                            val documents = it.result
-                            if (!documents!!.isEmpty) {
-                                val productsList = documents.toObjects(Product::class.java)
-                                tablesProducts = productsList
-                                tables.postValue(Resource.Success(productsList))
-                                tablePage += 4
-
-                            }
-                        } else
-                            tables.postValue(Resource.Error(it.exception.toString()))
-                    }
-            } else
-                home.postValue(Resource.Error("Cannot paging"))
-        }
-    }
-
-    private var mostRequestedTablesProducts: List<Product>? = null
-    fun getMostRequestedTables(size: Int = 0) {
-        if (mostRequestedTablesProducts != null && size == 0) {
-            tables.postValue(Resource.Success(mostRequestedTablesProducts))
-            return
-        }
-        mostRequestedTables.postValue(Resource.Loading())
-        shouldPaging(TABLES_CATEGORY, size) { shouldPaging ->
-            if (shouldPaging) {
-                mostRequestedTables.postValue(Resource.Loading())
-                firebaseDatabase.getProductsByCategory(TABLES_CATEGORY, mostRequestedTablePage)
-                    .addOnCompleteListener {
-                        if (it.isSuccessful) {
-                            val documents = it.result
-                            if (!documents!!.isEmpty) {
-                                val productsList = documents.toObjects(Product::class.java)
-                                mostRequestedTablesProducts = productsList
-                                mostRequestedTables.postValue(Resource.Success(productsList))
-                                mostRequestedTablePage += 3
-
-                            }
-                        } else
-                            mostRequestedTables.postValue(Resource.Error(it.exception.toString()))
-                    }
-            } else
-                mostRequestedTables.postValue(Resource.Error("Cannot paging"))
-        }
-    }
-
-
-    fun getClothesProducts() =
-        firebaseDatabase.getClothesProducts(clothesPaging).addOnCompleteListener {
-            if (it.isSuccessful) {
-                val documents = it.result
-                if (!documents!!.isEmpty) {
-                    val productsList = documents.toObjects(Product::class.java)
-                    clothes.postValue(productsList)
-                    clothesPaging += 5
-                } else
-                    emptyClothes.postValue(true)
-
-            } else
-                Log.e(TAG, it.exception.toString())
-
-        }
-
-    fun getBestDealsProduct() =
-        firebaseDatabase.getBestDealsProducts(bestDealsPaging).addOnCompleteListener {
-            if (it.isSuccessful) {
-                val documents = it.result
-                if (!documents!!.isEmpty) {
-                    val productsList = documents.toObjects(Product::class.java)
-                    bestDeals.postValue(productsList)
-                    bestDealsPaging += 5
-                } else
-                    emptyBestDeals.postValue(true)
-
-            } else
-                Log.e(TAG, it.exception.toString())
-        }
-
-    fun getHomeProduct(size: Int = 0) {
-        home.postValue(Resource.Loading())
-        shouldPagingHome(size)
-        { shouldPaging ->
-            if (shouldPaging) {
-                home.postValue(Resource.Loading())
-                firebaseDatabase.getHomeProducts(homePage)
-                    .addOnCompleteListener {
-                        if (it.isSuccessful) {
-                            val documents = it.result
-                            if (!documents!!.isEmpty) {
-                                val productsList = documents.toObjects(Product::class.java)
-                                home.postValue(Resource.Success(productsList))
-                                homePage += 4
-
-                            }
-                        } else
-                            home.postValue(Resource.Error(it.exception.toString()))
-                    }
-            } else
-                home.postValue(Resource.Error("Cannot paging"))
-        }
-    }
-
-    private var mostRequestedCupboardProducts: List<Product>? = null
-    fun getMostRequestedCupboards(size: Int = 0) {
-        if (mostRequestedCupboardProducts != null && size == 0) {
-            mostRequestedCupboard.postValue(Resource.Success(mostRequestedCupboardProducts))
-            return
-        }
-
-        mostRequestedCupboard.postValue(Resource.Loading())
-        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->
-            if (shouldPaging) {
-                mostRequestedCupboard.postValue(Resource.Loading())
-                firebaseDatabase.getMostOrderedCupboard(mostOrderCupboardPaging)
-                    .addOnCompleteListener {
-                        if (it.isSuccessful) {
-                            val documents = it.result
-                            if (!documents!!.isEmpty) {
-                                val productsList = documents.toObjects(Product::class.java)
-                                mostRequestedCupboardProducts = productsList
-                                mostRequestedCupboard.postValue(Resource.Success(productsList))
-                                mostOrderCupboardPaging += 5
-
-                            }
-                        } else
-                            mostRequestedCupboard.postValue(Resource.Error(it.exception.toString()))
-                    }
-
-
-            } else
-                mostRequestedCupboard.postValue(Resource.Error("Cannot paging"))
-        }
-    }
-
-    private var dCupboardProducts: List<Product>? = null
-    fun getCupboardProduct(size: Int = 0) {
-        if (dCupboardProducts != null && size == 0) {
-            cupboard.postValue(Resource.Success(dCupboardProducts))
-            return
-        }
-        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->
-            if (shouldPaging) {
-                cupboard.postValue(Resource.Loading())
-                firebaseDatabase.getCupboards(cupboardPaging).addOnCompleteListener {
-                    if (it.isSuccessful) {
-
-                        val documents = it.result
-                        if (!documents!!.isEmpty) {
-                            val productsList = documents.toObjects(Product::class.java)
-                            dCupboardProducts = productsList
-                            cupboard.postValue(Resource.Success(productsList))
-                            cupboardPaging += 10
-                        }
-
-                    } else
-                        cupboard.postValue(Resource.Error(it.exception.toString()))
-                }
-            } else
-                cupboard.postValue(Resource.Error("Cannot paging"))
-        }
-    }
-
-    /*
-    * TODO : Move these functions to firebaseDatabase class
-     */
-
     private fun shouldPaging(category: String, listSize: Int, onSuccess: (Boolean) -> Unit) {
         FirebaseFirestore.getInstance()
             .collection("categories")
@@ -511,44 +96,25 @@
     }
 
 
-    private fun checkIfProductAlreadyAdded(
-        product: CartProduct,
-        onSuccess: (Boolean, String) -> Unit
-    ) {
-        addToCart.postValue(Resource.Loading())
-        firebaseDatabase.getProductInCart(product).addOnCompleteListener {
-            if (it.isSuccessful) {
-                val documents = it.result!!.documents
-                if (documents.isNotEmpty())
-                    onSuccess(true, documents[0].id) // true ---> product is already in cart
-                else
-                    onSuccess(false, "") // false ---> product is not in cart
-            } else
-                addToCart.postValue(Resource.Error(it.exception.toString()))
-
-        }
-    }
+//    private fun checkIfProductAlreadyAdded(
+//        product: CartProduct,
+//        onSuccess: (Boolean, String) -> Unit
+//    ) {
+//        addToCart.postValue(Resource.Loading())
+//        firebaseDatabase.getProductInCart(product).addOnCompleteListener {
+//            if (it.isSuccessful) {
+//                val documents = it.result!!.documents
+//                if (documents.isNotEmpty())
+//                    onSuccess(true, documents[0].id) // true ---> product is already in cart
+//                else
+//                    onSuccess(false, "") // false ---> product is not in cart
+//            } else
+//                addToCart.postValue(Resource.Error(it.exception.toString()))
+//
+//        }
+//    }
 
 
-    fun addProductToCart(product: CartProduct) =
-        checkIfProductAlreadyAdded(product) { isAdded, id ->
-            if (isAdded) {
-                firebaseDatabase.increaseProductQuantity(id).addOnCompleteListener {
-                    if (it.isSuccessful)
-                        addToCart.postValue(Resource.Success(true))
-                    else
-                        addToCart.postValue(Resource.Error(it.exception!!.message))
-
-                }
-            } else {
-                firebaseDatabase.addProductToCart(product).addOnCompleteListener {
-                    if (it.isSuccessful)
-                        addToCart.postValue(Resource.Success(true))
-                    else
-                        addToCart.postValue(Resource.Error(it.exception!!.message))
-                }
-            }
-        }
 
 
     fun saveAddress(address: Address) {
@@ -659,15 +225,6 @@
         }
     }
 
-    fun getUserOrders() {
-        userOrders.postValue(Resource.Loading())
-        firebaseDatabase.getUserOrders().addOnCompleteListener {
-            if (it.isSuccessful)
-                userOrders.postValue(Resource.Success(it.result?.toObjects(Order::class.java)))
-            else
-                userOrders.postValue(Resource.Error(it.exception.toString()))
-        }
-    }
 
     fun resetPassword(email: String) {
         passwordReset.postValue(Resource.Loading())
@@ -679,36 +236,26 @@
         }
     }
 
-    fun getOrderAddressAndProducts(order: Order) {
-        orderAddress.postValue(Resource.Loading())
-        orderProducts.postValue(Resource.Loading())
-        firebaseDatabase.getOrderAddressAndProducts(order, { address, aError ->
-            if (aError != null)
-                orderAddress.postValue(Resource.Error(aError))
-            else
-                orderAddress.postValue(Resource.Success(address))
-        }, { products, pError ->
-
-            if (pError != null)
-                orderProducts.postValue(Resource.Error(pError))
-            else
-                orderProducts.postValue(Resource.Success(products))
 
-        })
-    }
 
-    fun searchProducts(searchQuery: String) {
-        search.postValue(Resource.Loading())
-        firebaseDatabase.searchProducts(searchQuery).addOnCompleteListener {
-            if (it.isSuccessful) {
-                val productsList = it.result!!.toObjects(Product::class.java)
-                search.postValue(Resource.Success(productsList))
+    fun searchMaterials(query: String) {
+        searchResults.postValue(Resource.Loading())
 
-            } else
-                search.postValue(Resource.Error(it.exception.toString()))
+        // Using the collection called "Materials" and assuming the field for the material name is "name"
+        val searchQuery = firestore.collection("Materials")
+            .orderBy("name")
+            .startAt(query)
+            .endAt(query + "\uf8ff")
 
+        searchQuery.get().addOnSuccessListener { documents ->
+            val results = documents.map { document -> document.toObject(Material::class.java) }
+            searchResults.postValue(Resource.Success(results))
+        }.addOnFailureListener { exception ->
+            searchResults.postValue(Resource.Error("Error fetching data"))
+            Log.e(TAG, "Error getting documents: ", exception)
         }
     }
+
 
     private var categoriesSafe: List<Category>? = null
     fun getCategories() {
@@ -726,7 +273,6 @@
                 categories.postValue(Resource.Error(it.exception.toString()))
         }
 
-
     }
 
 }
\ No newline at end of file
Index: app/src/main/java/com/example/kleine/adapters/recyclerview/CategoriesRecyclerAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.adapters.recyclerview\n\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.databinding.RecyclerViewCategoryItemBinding\nimport com.example.kleine.model.Category\n\nclass CategoriesRecyclerAdapter : RecyclerView.Adapter<CategoriesRecyclerAdapter.CategoriesRecyclerAdapterViewHolder>() {\n    inner class CategoriesRecyclerAdapterViewHolder(val binding:RecyclerViewCategoryItemBinding) : RecyclerView.ViewHolder(binding.root)\n    private val diffCallback = object : DiffUtil.ItemCallback<Category>(){\n        override fun areItemsTheSame(oldItem: Category, newItem: Category): Boolean {\n            return oldItem.rank == newItem.rank\n        }\n\n        override fun areContentsTheSame(oldItem: Category, newItem: Category): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this,diffCallback)\n\n    override fun onCreateViewHolder(\n        parent: ViewGroup,\n        viewType: Int\n    ): CategoriesRecyclerAdapter.CategoriesRecyclerAdapterViewHolder {\n        return CategoriesRecyclerAdapterViewHolder(\n            RecyclerViewCategoryItemBinding.inflate(\n                LayoutInflater.from(parent.context),\n                parent,\n                false\n            )\n        )\n    }\n\n    override fun onBindViewHolder(\n        holder: CategoriesRecyclerAdapter.CategoriesRecyclerAdapterViewHolder,\n        position: Int\n    ) {\n        val category = differ.currentList[position]\n        holder.binding.apply {\n            Glide.with(holder.itemView).load(category.image).into(imgCategory)\n            tvCategoryName.text = category.name\n        }\n        holder.itemView.setOnClickListener {\n            onItemClick?.invoke(category)\n        }\n    }\n\n    override fun getItemCount(): Int {\n        return differ.currentList.size\n    }\n\n     var onItemClick :((Category)->Unit)?=null\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/adapters/recyclerview/CategoriesRecyclerAdapter.kt b/app/src/main/java/com/example/kleine/adapters/recyclerview/CategoriesRecyclerAdapter.kt
--- a/app/src/main/java/com/example/kleine/adapters/recyclerview/CategoriesRecyclerAdapter.kt	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/java/com/example/kleine/adapters/recyclerview/CategoriesRecyclerAdapter.kt	(date 1696093291899)
@@ -8,25 +8,23 @@
 import com.bumptech.glide.Glide
 import com.example.kleine.databinding.RecyclerViewCategoryItemBinding
 import com.example.kleine.model.Category
+import com.example.kleine.model.Material
 
 class CategoriesRecyclerAdapter : RecyclerView.Adapter<CategoriesRecyclerAdapter.CategoriesRecyclerAdapterViewHolder>() {
     inner class CategoriesRecyclerAdapterViewHolder(val binding:RecyclerViewCategoryItemBinding) : RecyclerView.ViewHolder(binding.root)
-    private val diffCallback = object : DiffUtil.ItemCallback<Category>(){
-        override fun areItemsTheSame(oldItem: Category, newItem: Category): Boolean {
-            return oldItem.rank == newItem.rank
+    private val diffCallback = object : DiffUtil.ItemCallback<Material>() {
+        override fun areItemsTheSame(oldItem: Material, newItem: Material): Boolean {
+            return oldItem.id == newItem.id
         }
 
-        override fun areContentsTheSame(oldItem: Category, newItem: Category): Boolean {
+        override fun areContentsTheSame(oldItem: Material, newItem: Material): Boolean {
             return oldItem == newItem
         }
     }
 
     val differ = AsyncListDiffer(this,diffCallback)
 
-    override fun onCreateViewHolder(
-        parent: ViewGroup,
-        viewType: Int
-    ): CategoriesRecyclerAdapter.CategoriesRecyclerAdapterViewHolder {
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CategoriesRecyclerAdapterViewHolder {
         return CategoriesRecyclerAdapterViewHolder(
             RecyclerViewCategoryItemBinding.inflate(
                 LayoutInflater.from(parent.context),
@@ -36,17 +34,16 @@
         )
     }
 
-    override fun onBindViewHolder(
-        holder: CategoriesRecyclerAdapter.CategoriesRecyclerAdapterViewHolder,
-        position: Int
-    ) {
-        val category = differ.currentList[position]
+    override fun onBindViewHolder(holder: CategoriesRecyclerAdapterViewHolder, position: Int) {
+        val material = differ.currentList[position]
         holder.binding.apply {
-            Glide.with(holder.itemView).load(category.image).into(imgCategory)
-            tvCategoryName.text = category.name
+            // Assuming you want to display an image related to the difficulty level.
+            // You might need to adjust this logic.
+            Glide.with(holder.itemView).load(material.imageUrl).into(imgCategory)
+            tvCategoryName.text = material.category
         }
         holder.itemView.setOnClickListener {
-            onItemClick?.invoke(category)
+            onItemClick?.invoke(material)
         }
     }
 
@@ -54,5 +51,5 @@
         return differ.currentList.size
     }
 
-     var onItemClick :((Category)->Unit)?=null
+     var onItemClick :((Material)->Unit)?=null
 }
\ No newline at end of file
Index: app/src/main/res/layout/fragment_search.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.core.widget.NestedScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".fragments.shopping.SearchFragment\"\n    android:fillViewport=\"true\">\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n    <EditText\n        android:id=\"@+id/ed_search\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"@dimen/_40sdp\"\n        android:background=\"@drawable/search_box_background\"\n        android:fontFamily=\"@font/poppins_thin\"\n        android:gravity=\"center_vertical\"\n        android:hint=\"@string/g_search_now\"\n        android:paddingStart=\"@dimen/_12sdp\"\n        android:singleLine=\"true\"\n        android:textColor=\"@color/g_icon_tint\"\n        android:textSize=\"@dimen/_12ssp\"\n        app:layout_constraintEnd_toEndOf=\"@id/guideline3\"\n        android:layout_marginTop=\"@dimen/_7sdp\"\n        app:layout_constraintHorizontal_bias=\"0.0\"\n        app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"1.0\"\n        android:drawableEnd=\"@drawable/ic_search\"\n        android:drawablePadding=\"10dp\"\n        />\n\n\n    <FrameLayout\n        android:id=\"@+id/frame_scan\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"@dimen/_40sdp\"\n        android:background=\"@drawable/favorite_background\"\n        android:backgroundTint=\"@color/g_search_and_icons\"\n        android:orientation=\"vertical\"\n        app:layout_constraintTop_toTopOf=\"@id/ed_search\"\n        app:layout_constraintBottom_toBottomOf=\"@id/ed_search\"\n        app:layout_constraintStart_toEndOf=\"@id/guideline3\"\n        app:layout_constraintEnd_toEndOf=\"@id/guideline8\"\n        android:layout_marginStart=\"@dimen/_5sdp\"\n        android:layout_marginEnd=\"@dimen/_5sdp\"\n        app:layout_constraintVertical_bias=\"0.533\">\n\n        <ImageView\n            android:id=\"@+id/img_scan\"\n            android:layout_width=\"@dimen/_15sdp\"\n            android:layout_height=\"@dimen/_15sdp\"\n            android:layout_gravity=\"center\"\n            android:src=\"@drawable/ic_scan\"/>\n    </FrameLayout>\n\n    <FrameLayout\n        android:id=\"@+id/fragme_microhpone\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"@dimen/_40sdp\"\n        android:layout_marginStart=\"@dimen/_5sdp\"\n        android:background=\"@drawable/favorite_background\"\n        android:backgroundTint=\"@color/g_search_and_icons\"\n        android:orientation=\"vertical\"\n        app:layout_constraintBottom_toBottomOf=\"@id/ed_search\"\n        app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n        app:layout_constraintStart_toEndOf=\"@id/guideline8\"\n        app:layout_constraintTop_toTopOf=\"@id/ed_search\">\n\n        <ImageView\n            android:id=\"@+id/img_mic\"\n            android:layout_width=\"@dimen/_15sdp\"\n            android:layout_height=\"@dimen/_15sdp\"\n            android:layout_gravity=\"center\"\n            android:src=\"@drawable/ic_microphone\" />\n\n    </FrameLayout>\n\n        <TextView\n            android:id=\"@+id/tv_cancel\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"0dp\"\n            android:textSize=\"@dimen/_15ssp\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline3\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toTopOf=\"@id/ed_search\"\n            app:layout_constraintBottom_toBottomOf=\"@id/ed_search\"\n            android:gravity=\"center\"\n            android:text=\"@string/g_cancel\"\n            android:fontFamily=\"@font/poppins_light\"\n            android:textColor=\"#919394\"\n            android:visibility=\"gone\"\n            />\n\n\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/rv_search\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"10dp\"\n        app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n        app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n        app:layout_constraintTop_toBottomOf=\"@id/ed_search\"\n        />\n\n    <TextView\n        android:id=\"@+id/tv_categories\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/_15sdp\"\n        android:fontFamily=\"@font/poppins_thin\"\n        android:gravity=\"center\"\n        android:text=\"@string/g_categories\"\n        android:textColor=\"@color/g_black\"\n        android:textSize=\"@dimen/_20sdp\"\n        app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n        app:layout_constraintTop_toBottomOf=\"@id/rv_search\" />\n\n        <androidx.recyclerview.widget.RecyclerView\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/tv_categories\"\n            android:layout_marginTop=\"10dp\"\n            android:id=\"@+id/rv_categories\"\n            android:scrollbars=\"none\"\n            android:overScrollMode=\"never\"\n\n            />\n\n        <ProgressBar\n            android:id=\"@+id/progressbar_categories\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:indeterminateTint=\"@color/g_hint\"\n            app:layout_constraintTop_toBottomOf=\"@id/tv_categories\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            android:visibility=\"gone\"/>\n\n    <androidx.constraintlayout.widget.Guideline\n        android:id=\"@+id/guideline8\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        app:layout_constraintGuide_percent=\"0.83\" />\n\n    <androidx.constraintlayout.widget.Guideline\n        android:id=\"@+id/guideline2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        app:layout_constraintGuide_percent=\"0.96\" />\n\n    <androidx.constraintlayout.widget.Guideline\n        android:id=\"@+id/guideline4\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        app:layout_constraintGuide_percent=\"0.08\" />\n\n    <androidx.constraintlayout.widget.Guideline\n        android:id=\"@+id/guideline5\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        app:layout_constraintGuide_percent=\"0.01\" />\n\n    <androidx.constraintlayout.widget.Guideline\n        android:id=\"@+id/guideline3\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        app:layout_constraintGuide_percent=\"0.68\" />\n\n    <androidx.constraintlayout.widget.Guideline\n        android:id=\"@+id/guideline1\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        app:layout_constraintGuide_percent=\"0.04\" />\n\n    <androidx.constraintlayout.widget.Guideline\n        android:id=\"@+id/guideline9\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        app:layout_constraintGuide_percent=\"0.46785226\" />\n    </androidx.constraintlayout.widget.ConstraintLayout>\n\n</androidx.core.widget.NestedScrollView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_search.xml b/app/src/main/res/layout/fragment_search.xml
--- a/app/src/main/res/layout/fragment_search.xml	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/res/layout/fragment_search.xml	(date 1696094007051)
@@ -105,41 +105,7 @@
         app:layout_constraintTop_toBottomOf="@id/ed_search"
         />
 
-    <TextView
-        android:id="@+id/tv_categories"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginTop="@dimen/_15sdp"
-        android:fontFamily="@font/poppins_thin"
-        android:gravity="center"
-        android:text="@string/g_categories"
-        android:textColor="@color/g_black"
-        android:textSize="@dimen/_20sdp"
-        app:layout_constraintStart_toStartOf="@id/guideline1"
-        app:layout_constraintTop_toBottomOf="@id/rv_search" />
-
-        <androidx.recyclerview.widget.RecyclerView
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            app:layout_constraintStart_toStartOf="@id/guideline1"
-            app:layout_constraintEnd_toEndOf="@id/guideline2"
-            app:layout_constraintTop_toBottomOf="@id/tv_categories"
-            android:layout_marginTop="10dp"
-            android:id="@+id/rv_categories"
-            android:scrollbars="none"
-            android:overScrollMode="never"
 
-            />
-
-        <ProgressBar
-            android:id="@+id/progressbar_categories"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:indeterminateTint="@color/g_hint"
-            app:layout_constraintTop_toBottomOf="@id/tv_categories"
-            app:layout_constraintStart_toStartOf="@id/guideline1"
-            app:layout_constraintEnd_toEndOf="@id/guideline2"
-            android:visibility="gone"/>
 
     <androidx.constraintlayout.widget.Guideline
         android:id="@+id/guideline8"
Index: app/src/main/res/navigation/shopping_nav_graph.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/shopping_nav_graph\"\n    app:startDestination=\"@id/homeFragment\">\n\n    <fragment\n        android:id=\"@+id/addMaterialFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.AddMaterialFragment\"\n        android:label=\"Add Material\">\n    </fragment>\n\n\n\n    <fragment\n        android:id=\"@+id/homeFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.HomeFragment\"\n        android:label=\"fragment_home\"\n        tools:layout=\"@layout/fragment_home\">\n\n        <action\n            android:id=\"@+id/action_homeFragment_to_addMaterialFragment\"\n            app:destination=\"@id/addMaterialFragment\" />\n\n        <action\n            android:id=\"@+id/action_homeFragment_to_searchFragment\"\n            app:destination=\"@id/searchFragment\"\n            app:popUpTo=\"@id/homeFragment\" />\n        <argument\n            android:name=\"position\"\n            app:argType=\"integer\"\n            android:defaultValue=\"0\" />\n\n        <action\n            android:id=\"@+id/action_homeFragment_to_materialDetailsFragment\"\n            app:destination=\"@id/materialDetailsFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n    </fragment>\n\n\n    <fragment\n        android:id=\"@+id/materialDetailsFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.MaterialPreviewFragment\"\n        tools:layout=\"@layout/fragment_product_preview\">\n        <argument\n            android:name=\"material\"\n            app:argType=\"com.example.kleine.model.Material\"\n            app:nullable=\"true\" />\n    </fragment>\n\n\n    <fragment\n        android:id=\"@+id/searchFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.SearchFragment\"\n        android:label=\"fragment_search\"\n        tools:layout=\"@layout/fragment_search\">\n\n        <action\n            android:id=\"@+id/action_searchFragment_to_homeFragment\"\n            app:destination=\"@id/homeFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/profileFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.ProfileFragment\"\n        android:label=\"fragment_profile\"\n        tools:layout=\"@layout/fragment_profile\">\n\n\n        <action\n            android:id=\"@+id/action_profileFragment_to_billingFragment\"\n            app:destination=\"@id/billingFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_editUserInformation\"\n            app:destination=\"@id/editUserInformation\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_allOrdersFragment\"\n            app:destination=\"@id/allOrdersFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_languageFragment\"\n            app:destination=\"@id/languageFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_viewPartnershipFragment\"\n            app:destination=\"@id/viewPartnershipFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_helpFragment\"\n            app:destination=\"@id/helpFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_joinPartnerFragment\"\n            app:destination=\"@id/joinPartnerFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_adminDashboardFragment\"\n            app:destination=\"@id/adminDashboardFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_passedQuizzesFragment\"\n            app:destination=\"@id/passedQuizzesFragment\" />\n        <action\n            android:id=\"@+id/action_profileFragment_to_rewardFragment\"\n            app:destination=\"@id/rewardFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/cartFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.CartFragment\"\n        android:label=\"fragment_cart\"\n        tools:layout=\"@layout/fragment_cart\">\n\n        <action\n            android:id=\"@+id/action_cartFragment_to_billingFragment\"\n            app:destination=\"@id/billingFragment\" />\n    </fragment>\n\n    <fragment\n        android:id=\"@+id/billingFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.BillingFragment\"\n        android:label=\"fragment_billing\"\n        tools:layout=\"@layout/fragment_billing\">\n        <action\n            android:id=\"@+id/action_billingFragment_to_addressFragment\"\n            app:destination=\"@id/addressFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\" />\n        <argument\n            android:name=\"clickFlag\"\n            app:argType=\"string\" />\n        <argument\n            android:name=\"price\"\n            android:defaultValue=\"null\"\n            app:argType=\"string\"\n            app:nullable=\"true\" />\n        <argument\n            android:name=\"products\"\n            android:defaultValue=\"@null\"\n            app:argType=\"com.example.kleine.model.CartProductsList\"\n            app:nullable=\"true\" />\n        <action\n            android:id=\"@+id/action_billingFragment_to_orderCompletion\"\n            app:destination=\"@id/orderCompletion\"\n            app:popUpTo=\"@id/billingFragment\"\n            app:popUpToInclusive=\"true\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/addressFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.AddressFragment\"\n        android:label=\"fragment_address\"\n        tools:layout=\"@layout/fragment_address\">\n\n        <argument\n            android:name=\"address\"\n            android:defaultValue=\"@null\"\n            app:argType=\"com.example.kleine.model.Address\"\n            app:nullable=\"true\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/orderCompletion\"\n        android:name=\"com.example.kleine.fragments.shopping.OrderCompletion\"\n        android:label=\"fragment_order_completion\"\n        tools:layout=\"@layout/fragment_order_completion\">\n        <argument\n            android:name=\"order_completion_flag\"\n            app:argType=\"string\" />\n        <argument\n            android:name=\"orderNumber\"\n            android:defaultValue=\"null\"\n            app:argType=\"string\"\n            app:nullable=\"true\" />\n        <action\n            android:id=\"@+id/action_orderCompletion_to_orderDetails\"\n            app:destination=\"@id/orderDetails\" />\n        <argument\n            android:name=\"order\"\n            app:argType=\"com.example.kleine.model.Order\"\n            app:nullable=\"true\"\n            android:defaultValue=\"@null\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/editUserInformation\"\n        android:name=\"com.example.kleine.fragments.settings.EditUserInformationFragment\"\n        android:label=\"fragment_edit_user_information\"\n        tools:layout=\"@layout/fragment_edit_user_information\">\n        <argument\n            android:name=\"user\"\n            app:argType=\"com.example.kleine.model.User\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/allOrdersFragment\"\n        android:name=\"com.example.kleine.fragments.settings.AllOrdersFragment\"\n        android:label=\"fragment_all_orders\"\n        tools:layout=\"@layout/fragment_all_orders\" >\n\n        <action\n            android:id=\"@+id/action_allOrdersFragment_to_orderDetails\"\n            app:destination=\"@id/orderDetails\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\">\n            <argument\n                android:name=\"documentId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n        </action>\n\n        <action\n            android:id=\"@+id/action_allOrdersFragment_to_materialDetailsFragment\"\n            app:destination=\"@id/materialDetailsFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\" />\n\n\n\n\n    </fragment>\n    <fragment\n        android:id=\"@+id/orderDetails\"\n        android:name=\"com.example.kleine.fragments.settings.OrderDetails\"\n        android:label=\"fragment_order_details\"\n        tools:layout=\"@layout/fragment_order_details\" >\n\n        <argument\n            android:name=\"material\"\n            app:argType=\"com.example.kleine.model.Material\" />\n\n        <argument\n            android:name=\"courseDocument\"\n            app:argType=\"com.example.kleine.model.CourseDocument\" />\n        <action\n            android:id=\"@+id/action_orderDetails_to_quizFragment\"\n            app:destination=\"@id/quizFragment\" >\n            <argument\n                android:name=\"materialDocId\"\n                app:argType=\"string\" />\n        </action>\n\n    </fragment>\n    <fragment\n        android:id=\"@+id/languageFragment\"\n        android:name=\"com.example.kleine.fragments.settings.LanguageFragment\"\n        android:label=\"fragment_language\"\n        tools:layout=\"@layout/fragment_language\" />\n    <fragment\n        android:id=\"@+id/viewPartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.ViewPartnershipFragment\"\n        android:label=\"fragment_view_partnership\"\n        tools:layout=\"@layout/fragment_view_partnership\">\n        <action\n            android:id=\"@+id/action_viewPartnershipFragment_to_partnershipViewMaterialFragment\"\n            app:destination=\"@id/partnershipViewMaterialFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_viewPartnershipFragment_to_updatePartnershipFragment\"\n            app:destination=\"@id/updatePartnershipFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/helpFragment\"\n        android:name=\"com.example.kleine.fragments.settings.HelpFragment\"\n        android:label=\"HelpFragment\"\n        tools:layout=\"@layout/fragment_help\"/>\n    <fragment\n        android:id=\"@+id/partnershipViewMaterialFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialFragment\"\n        android:label=\"fragment_partnership_view_material\"\n        tools:layout=\"@layout/fragment_partnership_view_material\" >\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_partnershipViewMaterialDetailFragment\"\n            app:destination=\"@id/partnershipViewMaterialDetailFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\">\n            <argument\n                android:name=\"documentId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n        </action>\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_setsFragment\"\n            app:destination=\"@id/setsFragment\" />\n\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_editMaterialFragment\"\n            app:destination=\"@id/editMaterialFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/partnershipViewMaterialDetailFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialDetailFragment\"\n        android:label=\"fragment_partnership_view_material_detail\"\n        tools:layout=\"@layout/fragment_partnership_view_material_detail\" >\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialDetailFragment_to_replyCommentFragment\"\n            app:destination=\"@id/replyCommentFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\">\n            <argument\n                android:name=\"documentId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n        </action>\n    </fragment>\n    <fragment\n        android:id=\"@+id/replyCommentFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.ReplyCommentFragment\"\n        android:label=\"fragment_reply_comment\"\n        tools:layout=\"@layout/fragment_reply_comment\" />\n    <fragment\n        android:id=\"@+id/joinPartnerFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.JoinPartnerFragment\"\n        android:label=\"fragment_join__partner_\"\n        tools:layout=\"@layout/fragment_join__partner_\" />\n    <fragment\n        android:id=\"@+id/adminDashboardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminDashboardFragment\"\n        android:label=\"fragment_admin_dashboard\"\n        tools:layout=\"@layout/fragment_admin_dashboard\" >\n        <action\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewPartnershipFragment\"\n            app:destination=\"@id/adminViewPartnershipFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n        <action\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewRewardFragment\"\n            app:destination=\"@id/adminViewRewardFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/adminViewPartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipFragment\"\n        android:label=\"fragment_admin_view_partnership\"\n        tools:layout=\"@layout/fragment_admin_view_partnership\" >\n        <action\n            android:id=\"@+id/action_adminViewPartnershipFragment_to_adminViewPartnershipRequestFragment\"\n            app:destination=\"@id/adminViewPartnershipRequestFragment\" />\n    </fragment>\n\n\n    <fragment\n        android:id=\"@+id/adminViewPartnershipRequestFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipRequestFragment\"\n        android:label=\"fragment_admin_view_partnership_request\"\n        tools:layout=\"@layout/fragment_admin_view_partnership_request\" />\n    <fragment\n        android:id=\"@+id/updatePartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.UpdatePartnershipFragment\"\n        android:label=\"UpdatePartnershipFragment\"\n        tools:layout=\"@layout/fragment_update_partnership\"/>\n\n<!--    quiz-->\n    <fragment\n        android:id=\"@+id/setsFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.SetsFragment\"\n        android:label=\"SetsFragment\"\n        tools:layout=\"@layout/fragment_sets\" >\n        <action\n            android:id=\"@+id/action_setsFragment_to_questionFragment\"\n            app:destination=\"@id/questionFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/questionFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.QuestionFragment\"\n        android:label=\"QuestionFragment\"\n        tools:layout=\"@layout/fragment_question\" >\n        <action\n            android:id=\"@+id/action_questionFragment_to_addUpdateQuestionFragment\"\n            app:destination=\"@id/addUpdateQuestionFragment\" />\n    </fragment>\n\n    <fragment\n        android:id=\"@+id/editMaterialFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.EditMaterialFragment\"\n        android:label=\"Edit Material\"\n        tools:layout=\"@layout/edit_material\">\n        <argument\n            android:name=\"materialId\"\n            app:argType=\"string\"\n            app:nullable=\"false\" />\n    </fragment>\n\n    <fragment\n        android:id=\"@+id/addUpdateQuestionFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.AddUpdateQuestionFragment\"\n        android:label=\"AddUpdateQuestionFragment\"\n        tools:layout=\"@layout/fragment_add_update_question\" />\n    <fragment\n        android:id=\"@+id/quizFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.QuizFragment\"\n        android:label=\"QuizFragment\"\n        tools:layout=\"@layout/fragment_quiz\" >\n        <action\n            android:id=\"@+id/action_quizFragment_to_playFragment\"\n            app:destination=\"@id/playFragment\" >\n            <argument\n                android:name=\"materialDocId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n            <argument\n                android:name=\"randomSetId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n        </action>\n        <action\n            android:id=\"@+id/action_quizFragment_to_orderDetails\"\n            app:destination=\"@id/orderDetails\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/playFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.PlayFragment\"\n        android:label=\"PlayFragment\"\n        tools:layout=\"@layout/fragment_play\" >\n        <action\n            android:id=\"@+id/action_playFragment_to_resultFragment\"\n            app:destination=\"@id/resultFragment\" />\n        <action\n            android:id=\"@+id/action_playFragment_to_quizFragment\"\n            app:destination=\"@id/quizFragment\" />\n        <argument\n            android:name=\"materialDocId\"\n            app:argType=\"string\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/resultFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.ResultFragment\"\n        android:label=\"ResultFragment\"\n        tools:layout=\"@layout/fragment_result\" >\n        <action\n            android:id=\"@+id/action_resultFragment_to_quizFragment\"\n            app:destination=\"@id/quizFragment\">\n            <argument\n                android:name=\"materialDocId\"\n                app:argType=\"string\"\n                app:nullable=\"true\" />\n        </action>\n        <action\n            android:id=\"@+id/action_resultFragment_to_orderDetails\"\n            app:destination=\"@id/orderDetails\" />\n    </fragment>\n\n\n    <fragment\n        android:id=\"@+id/passedQuizzesFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.PassedQuizzesFragment\"\n        android:label=\"PassedQuizzesFragment\"\n        tools:layout=\"@layout/fragment_passed_quizzes\" />\n    <!--    end quiz-->\n\n<!--    reward-->\n    <fragment\n        android:id=\"@+id/adminViewRewardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewRewardFragment\"\n        android:label=\"AdminViewRewardFragment\"\n        tools:layout=\"@layout/fragment_admin_view_reward\">\n        <action\n            android:id=\"@+id/action_adminViewRewardFragment_to_adminAddRewardFragment\"\n            app:destination=\"@id/adminAddRewardFragment\" />\n        <action\n            android:id=\"@+id/action_adminViewRewardFragment_to_adminUpdateRewardFragment\"\n            app:destination=\"@id/adminUpdateRewardFragment\" >\n            <argument\n            android:name=\"documentId\"\n            app:argType=\"string\" />\n        </action>\n    </fragment>\n    <fragment\n        android:id=\"@+id/adminAddRewardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminAddRewardFragment\"\n        android:label=\"AdminAddRewardFragment\"\n        tools:layout=\"@layout/fragment_admin_add_reward\"/>\n    <fragment\n        android:id=\"@+id/adminUpdateRewardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminUpdateRewardFragment\"\n        android:label=\"AdminUpdateRewardFragment\"\n        tools:layout=\"@layout/fragment_admin_update_reward\"/>\n    <fragment\n        android:id=\"@+id/rewardFragment\"\n        android:name=\"com.example.kleine.fragments.reward.RewardFragment\"\n        android:label=\"RewardFragment\"\n        tools:layout=\"@layout/fragment_reward\"/>\n<!--    end reward-->\n</navigation>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/navigation/shopping_nav_graph.xml b/app/src/main/res/navigation/shopping_nav_graph.xml
--- a/app/src/main/res/navigation/shopping_nav_graph.xml	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/res/navigation/shopping_nav_graph.xml	(date 1696092322817)
@@ -62,6 +62,11 @@
         <action
             android:id="@+id/action_searchFragment_to_homeFragment"
             app:destination="@id/homeFragment" />
+
+        <action
+            android:id="@+id/action_searchFragment_to_materialPreviewFragment"
+            app:destination="@+id/materialDetailsFragment" />
+
     </fragment>
     <fragment
         android:id="@+id/profileFragment"
Index: app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.settings\n\nimport android.app.AlertDialog\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.AllOrdersAdapter\nimport com.example.kleine.adapters.recyclerview.MaterialAdapter\nimport com.example.kleine.databinding.FragmentAllOrdersBinding\nimport com.example.kleine.model.Enrollment\nimport com.example.kleine.model.Material\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.firestore.FieldPath\nimport com.google.firebase.firestore.FirebaseFirestore\n\n\nclass AllOrdersFragment : Fragment() {\n\n    val TAG = \"AllOrdersFragment\"\n    private lateinit var viewModel: ShoppingViewModel\n    private lateinit var binding: FragmentAllOrdersBinding\n    private lateinit var allOrdersAdapter: AllOrdersAdapter\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getUserOrders()\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        binding = FragmentAllOrdersBinding.inflate(inflater)\n        activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)?.visibility = View.GONE\n        return binding.root\n    }\n\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        fetchEnrolledMaterials()\n        setupRecyclerView()\n        onCloseClick()\n        onItemClick()\n        onItemLongClick()\n        setupEnrollmentListener()\n    }\n\n\n    private fun fetchEnrolledMaterials() {\n        val userId = FirebaseAuth.getInstance().currentUser?.uid\n\n        if (userId != null) {\n            val firestore = FirebaseFirestore.getInstance()\n            firestore.collection(\"enrollments\")\n                .whereEqualTo(\"userId\", userId)\n                .whereEqualTo(\"archived\", false)\n                .get()\n                .addOnSuccessListener { querySnapshot ->\n                    val enrollments = querySnapshot.documents.mapNotNull { document ->\n                        document.toObject(Enrollment::class.java)\n                    }\n\n                    if (enrollments.isEmpty()) {\n                        // If no enrollments, directly show the message and update UI\n                        Toast.makeText(context, \"You have not yet enrolled in any course\", Toast.LENGTH_SHORT).show()\n                        displayMaterials(emptyList())\n                    } else {\n                        fetchMaterialsForEnrollments(enrollments)\n                        Log.d(TAG, \"Number of enrollments fetched: ${enrollments.size}\")\n                    }\n                }\n                .addOnFailureListener { exception ->\n                    Log.e(TAG, \"Error fetching user enrollments\", exception)\n                    // Handle the error appropriately\n                }\n        } else {\n            // Handle the case where the user is not logged in\n        }\n    }\n\n    private fun fetchMaterialsForEnrollments(enrollments: List<Enrollment>) {\n        val firestore = FirebaseFirestore.getInstance()\n\n        // Filter out empty strings and remove duplicate IDs\n        val materialIds = enrollments.map { it.materialId }.filter { it.isNotEmpty() }.distinct()\n\n        // Log the IDs being used in the query for debugging purposes\n        Log.d(TAG, \"Attempting to fetch materials with IDs: $materialIds\")\n\n        // Split the materialIds list into chunks of size 10 or fewer\n        val chunks = materialIds.chunked(10)\n\n        // Initialize an empty list to hold the fetched materials\n        val materials = mutableListOf<Material>()\n\n        // Define a counter to keep track of completed queries\n        var completedQueries = 0\n\n        // Iterate over each chunk and perform a query\n        for (chunk in chunks) {\n            firestore.collection(\"Materials\")\n                .whereIn(FieldPath.documentId(), chunk)\n                .get()\n                .addOnSuccessListener { querySnapshot ->\n                    val chunkMaterials = querySnapshot.documents.mapNotNull { document ->\n                        val material = document.toObject(Material::class.java)\n                        material?.id = document.id // Set the id of the Material object\n                        material\n                    }\n                    Log.d(TAG, \"Materials fetched successfully: $chunkMaterials\")\n                    materials.addAll(chunkMaterials)\n\n                    // Check if all queries are completed\n                    completedQueries++\n                    if (completedQueries == chunks.size) {\n                        // All queries are completed, display the materials\n                        displayMaterials(materials)\n                    }\n                }\n                .addOnFailureListener { exception ->\n                    Log.e(TAG, \"Error fetching materials\", exception)\n                    // Handle the error appropriately\n                }\n        }\n    }\n\n\n    private fun onItemLongClick() {\n        allOrdersAdapter.onItemLongClick = { material ->\n            // Create an AlertDialog.Builder to build the confirmation dialog\n            val builder = AlertDialog.Builder(context)\n            builder.setTitle(\"Unenroll Course\")\n            builder.setMessage(\"Are you sure you want to unenroll from this course?\")\n            builder.setPositiveButton(\"Yes\") { dialog, _ ->\n                // User confirmed, proceed with unenrollment/archiving\n                val userId = FirebaseAuth.getInstance().currentUser?.uid\n                if (userId != null) {\n                    val firestore = FirebaseFirestore.getInstance()\n                    firestore.collection(\"enrollments\")\n                        .whereEqualTo(\"userId\", userId)\n                        .whereEqualTo(\"materialId\", material.id)\n                        .get()\n                        .addOnSuccessListener { querySnapshot ->\n                            for (document in querySnapshot.documents) {\n                                document.reference.update(\"archived\", true)\n                            }\n                            Toast.makeText(context, \"Material archived successfully\", Toast.LENGTH_SHORT).show()\n                            // No need to explicitly fetch enrolled materials here,\n                            // the snapshot listener will handle it\n                        }\n                        .addOnFailureListener { exception ->\n                            Log.e(TAG, \"Error archiving material\", exception)\n                            Toast.makeText(context, \"Error archiving material\", Toast.LENGTH_SHORT).show()\n                        }\n                }\n                dialog.dismiss()\n            }\n            builder.setNegativeButton(\"No\") { dialog, _ ->\n                // User canceled, dismiss the dialog\n                dialog.dismiss()\n            }\n            // Show the dialog\n            builder.show()\n        }\n    }\n\n\n\n\n    private fun displayMaterials(materials: List<Material>) {\n        Log.d(TAG, \"Displaying materials: ${materials.size}\")\n        allOrdersAdapter.differ.submitList(materials)\n        binding.rvAllOrders.invalidate()\n    }\n\n\n    private fun onItemClick() {\n        allOrdersAdapter.onItemClick = { material ->\n            val bundle = Bundle()\n            bundle.putString(\"materialDocId\", material.id)\n            findNavController().navigate(R.id.action_allOrdersFragment_to_orderDetails, bundle)\n        }\n\n    }\n\n    private fun setupEnrollmentListener() {\n        val userId = FirebaseAuth.getInstance().currentUser?.uid\n        if (userId != null) {\n            val firestore = FirebaseFirestore.getInstance()\n            firestore.collection(\"enrollments\")\n                .whereEqualTo(\"userId\", userId)\n                .whereEqualTo(\"archived\", false)\n                .addSnapshotListener { snapshots, e ->\n                    if (e != null) {\n                        Log.w(TAG, \"listen:error\", e)\n                        return@addSnapshotListener\n                    }\n\n                    Log.d(TAG, \"SnapshotListener triggered\")\n\n                    val enrollments = snapshots?.documents?.mapNotNull { document ->\n                        document.toObject(Enrollment::class.java)\n                    } ?: emptyList()\n\n                    Log.d(TAG, \"Updated enrollments: $enrollments\")\n\n                    if (enrollments.isEmpty()) {\n                        Toast.makeText(context, \"You have not yet enrolled in any course\", Toast.LENGTH_SHORT).show()\n                        displayMaterials(emptyList())\n                    } else {\n                        fetchMaterialsForEnrollments(enrollments)\n                    }\n                }\n        }\n    }\n\n\n\n\n\n    private fun onCloseClick() {\n        binding.imgCloseOrders.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n\n\n    private fun hideLoading() {\n        binding.progressbarAllOrders.visibility = View.GONE\n\n    }\n\n    private fun showLoading() {\n        binding.progressbarAllOrders.visibility = View.VISIBLE\n    }\n\n    private fun setupRecyclerView() {\n        allOrdersAdapter = AllOrdersAdapter()\n        binding.rvAllOrders.apply {\n            layoutManager = LinearLayoutManager(context)\n            adapter = allOrdersAdapter\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt b/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt	(date 1696091405658)
@@ -37,7 +37,6 @@
         super.onCreate(savedInstanceState)
 
         viewModel = (activity as ShoppingActivity).viewModel
-        viewModel.getUserOrders()
     }
 
     override fun onCreateView(
Index: app/src/main/java/com/example/kleine/fragments/shopping/SearchFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.shopping\n\nimport android.content.Context\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.inputmethod.InputMethodManager\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport androidx.core.widget.addTextChangedListener\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.Observer\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.SpacingDecorator.VerticalSpacingItemDecorator\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.CategoriesRecyclerAdapter\nimport com.example.kleine.adapters.recyclerview.SearchRecyclerAdapter\nimport com.example.kleine.databinding.FragmentSearchBinding\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport com.google.android.material.snackbar.Snackbar\nimport kotlinx.coroutines.*\n\nclass SearchFragment : Fragment() {\n    private val TAG = \"SearchFragment\"\n    private lateinit var binding: FragmentSearchBinding\n    private lateinit var inputMethodManger: InputMethodManager\n    private lateinit var viewModel: ShoppingViewModel\n    private lateinit var categoriesAdapter: CategoriesRecyclerAdapter\n    private lateinit var searchAdapter: SearchRecyclerAdapter\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getCategories()\n\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentSearchBinding.inflate(inflater)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        setupCategoryRecyclerView()\n        setupSearchRecyclerView()\n        showKeyboardAutomatically()\n        onHomeClick()\n\n        searchProducts()\n        observeSearch()\n\n        observeCategories()\n\n        onSearchTextClick()\n\n        onCancelTvClick()\n\n        onCategoryClick()\n\n        binding.frameScan.setOnClickListener {\n            val snackBar = requireActivity().findViewById<CoordinatorLayout>(R.id.snackBar_coordinator)\n            Snackbar.make(snackBar,resources.getText(R.string.g_coming_soon), Snackbar.LENGTH_SHORT).show()\n        }\n        binding.fragmeMicrohpone.setOnClickListener {\n            val snackBar = requireActivity().findViewById<CoordinatorLayout>(R.id.snackBar_coordinator)\n            Snackbar.make(snackBar,resources.getText(R.string.g_coming_soon), Snackbar.LENGTH_SHORT).show()\n        }\n\n    }\n\n    private fun onCategoryClick() {\n        categoriesAdapter.onItemClick = { category ->\n            var position = 0\n            when (category.name) {\n                resources.getString(R.string.g_chair) -> position = 1\n                resources.getString(R.string.g_cupboard) -> position = 2\n                resources.getString(R.string.g_table) -> position = 3\n                resources.getString(R.string.g_accessory) -> position = 4\n                resources.getString(R.string.g_furniture) -> position = 5\n            }\n\n            val bundle = Bundle()\n            bundle.putInt(\"position\", position)\n//            findNavController().navigate(R.id.action_searchFragment_to_homeFragment, bundle)\n        }\n    }\n\n    private fun onCancelTvClick() {\n        binding.tvCancel.setOnClickListener {\n            searchAdapter.differ.submitList(emptyList())\n            binding.edSearch.setText(\"\")\n            hideCancelTv()\n        }\n    }\n\n    private fun onSearchTextClick() {\n        searchAdapter.onItemClick = { product ->\n            val bundle = Bundle()\n            bundle.putParcelable(\"product\", product)\n\n            /**\n             * Hide the keyboard\n             */\n\n            val imm =\n                activity?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager?\n            imm!!.hideSoftInputFromWindow(requireView().windowToken, 0)\n\n//            findNavController().navigate(\n//                R.id.action_searchFragment_to_materialPreviewFragment,\n//                bundle\n//            )\n\n        }\n    }\n\n    private fun setupSearchRecyclerView() {\n        searchAdapter = SearchRecyclerAdapter()\n        binding.rvSearch.apply {\n            adapter = searchAdapter\n            layoutManager = LinearLayoutManager(context)\n        }\n    }\n\n    private fun setupCategoryRecyclerView() {\n        categoriesAdapter = CategoriesRecyclerAdapter()\n        binding.rvCategories.apply {\n            adapter = categoriesAdapter\n            layoutManager = GridLayoutManager(context, 2, GridLayoutManager.VERTICAL, false)\n            addItemDecoration(VerticalSpacingItemDecorator(40))\n        }\n    }\n\n    private fun observeCategories() {\n        viewModel.categories.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showCategoriesLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideCategoriesLoading()\n                    val categories = response.data\n                    categoriesAdapter.differ.submitList(categories?.toList())\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideCategoriesLoading()\n                    Log.e(TAG, response.message.toString())\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun hideCategoriesLoading() {\n        binding.progressbarCategories.visibility = View.GONE\n\n    }\n\n    private fun showCategoriesLoading() {\n        binding.progressbarCategories.visibility = View.VISIBLE\n\n    }\n\n\n    private fun observeSearch() {\n        viewModel.search.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    Log.d(\"test\", \"Loading\")\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    val products = response.data\n                    searchAdapter.differ.submitList(products)\n                    showChancelTv()\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    Log.e(TAG, response.message.toString())\n                    showChancelTv()\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    var job: Job? = null\n    private fun searchProducts() {\n        binding.edSearch.addTextChangedListener { query ->\n            val queryTrim = query.toString().trim()\n            if (queryTrim.isNotEmpty()) {\n                val searchQuery = query.toString().substring(0, 1).toUpperCase()\n                    .plus(query.toString().substring(1))\n                job?.cancel()\n                job = CoroutineScope(Dispatchers.IO).launch {\n                    delay(500L)\n                    viewModel.searchProducts(searchQuery)\n                }\n            } else {\n                searchAdapter.differ.submitList(emptyList())\n                hideCancelTv()\n            }\n        }\n\n\n    }\n\n    private fun showChancelTv() {\n        binding.tvCancel.visibility = View.VISIBLE\n        binding.imgMic.visibility = View.GONE\n        binding.imgScan.visibility = View.GONE\n        binding.fragmeMicrohpone.visibility = View.GONE\n        binding.frameScan.visibility = View.GONE\n\n    }\n\n    private fun hideCancelTv() {\n        binding.tvCancel.visibility = View.GONE\n        binding.imgMic.visibility = View.VISIBLE\n        binding.imgScan.visibility = View.VISIBLE\n        binding.fragmeMicrohpone.visibility = View.VISIBLE\n        binding.frameScan.visibility = View.VISIBLE\n    }\n\n    private fun onHomeClick() {\n        val btm = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        btm?.menu?.getItem(0)?.setOnMenuItemClickListener {\n            activity?.onBackPressed()\n            true\n        }\n    }\n\n    private fun showKeyboardAutomatically() {\n        inputMethodManger =\n            activity?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\n        inputMethodManger.toggleSoftInput(\n            InputMethodManager.SHOW_FORCED,\n            InputMethodManager.HIDE_IMPLICIT_ONLY\n        )\n\n        binding.edSearch.requestFocus()\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        binding.edSearch.clearFocus()\n    }\n\n    override fun onResume() {\n        super.onResume()\n\n        val bottomNav = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNav?.visibility = View.VISIBLE\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/SearchFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/SearchFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/shopping/SearchFragment.kt	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/java/com/example/kleine/fragments/shopping/SearchFragment.kt	(date 1696094167391)
@@ -53,21 +53,18 @@
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
 
-        setupCategoryRecyclerView()
         setupSearchRecyclerView()
         showKeyboardAutomatically()
         onHomeClick()
 
-        searchProducts()
-        observeSearch()
+        searchMaterials()
+        observeSearchResults()
 
-        observeCategories()
 
         onSearchTextClick()
 
         onCancelTvClick()
 
-        onCategoryClick()
 
         binding.frameScan.setOnClickListener {
             val snackBar = requireActivity().findViewById<CoordinatorLayout>(R.id.snackBar_coordinator)
@@ -80,22 +77,7 @@
 
     }
 
-    private fun onCategoryClick() {
-        categoriesAdapter.onItemClick = { category ->
-            var position = 0
-            when (category.name) {
-                resources.getString(R.string.g_chair) -> position = 1
-                resources.getString(R.string.g_cupboard) -> position = 2
-                resources.getString(R.string.g_table) -> position = 3
-                resources.getString(R.string.g_accessory) -> position = 4
-                resources.getString(R.string.g_furniture) -> position = 5
-            }
 
-            val bundle = Bundle()
-            bundle.putInt("position", position)
-//            findNavController().navigate(R.id.action_searchFragment_to_homeFragment, bundle)
-        }
-    }
 
     private fun onCancelTvClick() {
         binding.tvCancel.setOnClickListener {
@@ -106,23 +88,21 @@
     }
 
     private fun onSearchTextClick() {
-        searchAdapter.onItemClick = { product ->
+        searchAdapter.onItemClick = { material ->
             val bundle = Bundle()
-            bundle.putParcelable("product", product)
+            bundle.putParcelable("material", material)
 
             /**
              * Hide the keyboard
              */
-
             val imm =
                 activity?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager?
             imm!!.hideSoftInputFromWindow(requireView().windowToken, 0)
 
-//            findNavController().navigate(
-//                R.id.action_searchFragment_to_materialPreviewFragment,
-//                bundle
-//            )
-
+            findNavController().navigate(
+                R.id.action_searchFragment_to_materialPreviewFragment,
+                bundle
+            )
         }
     }
 
@@ -134,94 +114,58 @@
         }
     }
 
-    private fun setupCategoryRecyclerView() {
-        categoriesAdapter = CategoriesRecyclerAdapter()
-        binding.rvCategories.apply {
-            adapter = categoriesAdapter
-            layoutManager = GridLayoutManager(context, 2, GridLayoutManager.VERTICAL, false)
-            addItemDecoration(VerticalSpacingItemDecorator(40))
-        }
-    }
 
-    private fun observeCategories() {
-        viewModel.categories.observe(viewLifecycleOwner, Observer { response ->
-            when (response) {
-                is Resource.Loading -> {
-                    showCategoriesLoading()
-                    return@Observer
-                }
 
-                is Resource.Success -> {
-                    hideCategoriesLoading()
-                    val categories = response.data
-                    categoriesAdapter.differ.submitList(categories?.toList())
-                    return@Observer
-                }
 
-                is Resource.Error -> {
-                    hideCategoriesLoading()
-                    Log.e(TAG, response.message.toString())
-                    return@Observer
-                }
-            }
-        })
-    }
-
-    private fun hideCategoriesLoading() {
-        binding.progressbarCategories.visibility = View.GONE
 
-    }
 
-    private fun showCategoriesLoading() {
-        binding.progressbarCategories.visibility = View.VISIBLE
 
+    private fun showCancelTv() {
+        binding.tvCancel.visibility = View.VISIBLE
+        binding.imgMic.visibility = View.GONE
+        binding.imgScan.visibility = View.GONE
+        binding.fragmeMicrohpone.visibility = View.GONE
+        binding.frameScan.visibility = View.GONE
     }
 
 
-    private fun observeSearch() {
-        viewModel.search.observe(viewLifecycleOwner, Observer { response ->
+    private fun observeSearchResults() {
+        viewModel.searchResults.observe(viewLifecycleOwner, Observer { response ->
             when (response) {
                 is Resource.Loading -> {
-                    Log.d("test", "Loading")
-                    return@Observer
+                    Log.d(TAG, "Loading")
                 }
-
                 is Resource.Success -> {
-                    val products = response.data
-                    searchAdapter.differ.submitList(products)
-                    showChancelTv()
-                    return@Observer
+                    val materials = response.data
+                    searchAdapter.differ.submitList(materials)
+                    showCancelTv()
                 }
-
                 is Resource.Error -> {
                     Log.e(TAG, response.message.toString())
-                    showChancelTv()
-                    return@Observer
+                    showCancelTv()
                 }
             }
         })
     }
 
     var job: Job? = null
-    private fun searchProducts() {
+    private fun searchMaterials() {
         binding.edSearch.addTextChangedListener { query ->
             val queryTrim = query.toString().trim()
             if (queryTrim.isNotEmpty()) {
-                val searchQuery = query.toString().substring(0, 1).toUpperCase()
-                    .plus(query.toString().substring(1))
+                val searchQuery = queryTrim.capitalize()
                 job?.cancel()
                 job = CoroutineScope(Dispatchers.IO).launch {
                     delay(500L)
-                    viewModel.searchProducts(searchQuery)
+                    viewModel.searchMaterials(searchQuery)
                 }
             } else {
                 searchAdapter.differ.submitList(emptyList())
                 hideCancelTv()
             }
         }
-
+    }
 
-    }
 
     private fun showChancelTv() {
         binding.tvCancel.visibility = View.VISIBLE
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023_9_22_9_21__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023_9_22_9_21__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023_9_22_9_21__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023_9_22_9_21__Changes_.xml	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ /dev/null	(revision d1757b64c3798be216457dcc702dac99c820626f)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023_9_22_9_21_[Changes]" date="1695345706699" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023_9_22_9_21_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023/9/22 9:21 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_10_41_PM_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_10_41_PM_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_10_41_PM_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_10_41_PM_[Changes]/shelved.patch	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ /dev/null	(revision d1757b64c3798be216457dcc702dac99c820626f)
@@ -1,1409 +0,0 @@
-Index: app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt
-deleted file mode 100644
---- a/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ /dev/null	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-@@ -1,212 +0,0 @@
--package com.example.kleine.fragments.shopping
--
--import android.annotation.SuppressLint
--import android.graphics.Paint
--import android.os.Bundle
--import android.util.Log
--import androidx.fragment.app.Fragment
--import android.view.LayoutInflater
--import android.view.View
--import android.view.ViewGroup
--import android.widget.Toast
--import androidx.lifecycle.Observer
--import androidx.navigation.fragment.navArgs
--import androidx.recyclerview.widget.LinearLayoutManager
--import com.example.kleine.R
--import com.example.kleine.SpacingDecorator.HorizantalSpacingItemDecorator
--import com.example.kleine.activities.ShoppingActivity
--import com.example.kleine.adapters.recyclerview.ColorsAndSizesAdapter
--import com.example.kleine.adapters.viewpager.ViewPager2Images
--import com.example.kleine.databinding.FragmentProductPreviewBinding
--import com.example.kleine.model.CartProduct
--import com.example.kleine.model.Product
--import com.example.kleine.resource.Resource
--import com.example.kleine.util.Constants.Companion.COLORS
--import com.example.kleine.util.Constants.Companion.COLORS_TYPE
--import com.example.kleine.util.Constants.Companion.IMAGES
--import com.example.kleine.util.Constants.Companion.PRODUCT_FLAG
--import com.example.kleine.util.Constants.Companion.SIZES
--import com.example.kleine.util.Constants.Companion.SIZES_TYPE
--import com.example.kleine.viewmodel.shopping.ShoppingViewModel
--import com.google.android.material.bottomnavigation.BottomNavigationView
--import io.github.vejei.viewpagerindicator.indicator.CircleIndicator
--
--class ProductPreviewFragment : Fragment() {
--
--    val args by navArgs<MaterialPreviewFragmentArgs>()
--    val TAG = "ProductPreviewFragment"
--
--    private lateinit var binding: FragmentProductPreviewBinding
--    private lateinit var colorsAdapter: ColorsAndSizesAdapter
--    private lateinit var sizesAdapter: ColorsAndSizesAdapter
--    private lateinit var viewPagerAdapter: ViewPager2Images
--    private lateinit var viewModel: ShoppingViewModel
--
--    override fun onCreate(savedInstanceState: Bundle?) {
--        super.onCreate(savedInstanceState)
--        colorsAdapter = ColorsAndSizesAdapter(COLORS_TYPE)
--        sizesAdapter = ColorsAndSizesAdapter(SIZES_TYPE)
--        viewPagerAdapter = ViewPager2Images()
--        viewModel = (activity as ShoppingActivity).viewModel
--    }
--
--    override fun onCreateView(
--        inflater: LayoutInflater, container: ViewGroup?,
--        savedInstanceState: Bundle?
--    ): View? {
--
--        binding = FragmentProductPreviewBinding.inflate(inflater)
--        return binding.root
--    }
--
--    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
--        super.onViewCreated(view, savedInstanceState)
--
--        val bottomNavigation =
--            requireActivity().findViewById<BottomNavigationView>(R.id.bottom_navigation)
--        bottomNavigation.visibility = View.GONE
--
--        val product = args.material
--
--        setupViewpager()
--
--
--
--//        setProductInformation(product)
--
--        onImageCloseClick()
--        onBtnAddToCartClick()
--
--        observeAddToCart()
--
--        onColorClick()
--        onSizeClick()
--    }
--
--    private var selectedSize: String = ""
--    private fun onSizeClick() {
--        sizesAdapter.onItemClick = { size ->
--            selectedSize = size
--            binding.tvSizeError.visibility = View.INVISIBLE
--
--        }
--    }
--
--    private var selectedColor: String = ""
--    private fun onColorClick() {
--        colorsAdapter.onItemClick = { color ->
--            selectedColor = color
--            binding.tvColorError.visibility = View.INVISIBLE
--        }
--    }
--
--
--    private fun observeAddToCart() {
--        viewModel.addToCart.observe(viewLifecycleOwner, Observer { response ->
--            val btn = binding.btnAddToCart
--            when (response) {
--                is Resource.Loading -> {
--                    startLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    stopLoading()
--                    viewModel.addToCart.value = null
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    Toast.makeText(activity, "Oops! error occurred", Toast.LENGTH_SHORT).show()
--                    viewModel.addToCart.value = null
--                    Log.e(TAG, response.message.toString())
--                }
--            }
--        })
--    }
--
--    private fun stopLoading() {
--        binding.apply {
--            btnAddToCart.visibility = View.VISIBLE
--            progressbar.visibility = View.INVISIBLE
--        }
--    }
--
--    private fun startLoading() {
--        binding.apply {
--            btnAddToCart.visibility = View.INVISIBLE
--            progressbar.visibility = View.VISIBLE
--        }
--    }
--
--
--    private fun onBtnAddToCartClick() {
--        binding.btnAddToCart.apply {
--            setOnClickListener {
--                if (selectedColor.isEmpty()) {
--                    binding.tvColorError.visibility = View.VISIBLE
--                    return@setOnClickListener
--                }
--                if (selectedSize.isEmpty()) {
--                    binding.tvSizeError.visibility = View.VISIBLE
--                    return@setOnClickListener
--                }
--
--
--                setBackgroundResource(R.color.g_black)
--            }
--        }
--    }
--
--
--    private fun onImageCloseClick() {
--        binding.imgClose.setOnClickListener {
--            activity?.onBackPressed()
--        }
--    }
--
--//    @SuppressLint("SetTextI18n")
--//    private fun setProductInformation(product: Product) {
--//        val imagesList = product.images!![IMAGES] as List<String>
--//        val colors = product.colors!![COLORS] as List<String>
--//        val sizes = product.sizes!![SIZES] as List<String>
--//        binding.apply {
--//            viewPagerAdapter.differ.submitList(imagesList)
--//            if (colors.isNotEmpty() && colors[0] != "")
--//                colorsAdapter.differ.submitList(colors.toList())
--//            if (sizes.isNotEmpty() && sizes[0] != "")
--//                sizesAdapter.differ.submitList(sizes)
--//            tvProductName.text = product.title
--//            tvProductDescription.text = product.description
--//            tvProductPrice.text = "$${product.price}"
--//            tvProductOfferPrice.visibility = View.GONE
--//            product.newPrice?.let {
--//                if (product.newPrice.isNotEmpty() && product.newPrice != "0") {
--//                    tvProductPrice.paintFlags =
--//                        tvProductPrice.paintFlags or Paint.STRIKE_THRU_TEXT_FLAG
--//                    tvProductOfferPrice.text = "$${product.newPrice}"
--//                    tvProductOfferPrice.visibility = View.VISIBLE
--//                }
--//            }
--//            product.sizeUnit?.let {
--//                if (it.isNotEmpty()) {
--//                    binding.tvSizeUnit.visibility = View.VISIBLE
--//                    binding.tvSizeUnit.text = " ($it)"
--//                }
--//            }
--//        }
--//    }
--
--
--
--
--
--    private fun setupViewpager() {
--        binding.viewpager2Images.adapter = viewPagerAdapter
--        binding.circleIndicator.setWithViewPager2(binding.viewpager2Images)
--        binding.circleIndicator.itemCount = 1 // Only one image
--        binding.circleIndicator.setAnimationMode(CircleIndicator.AnimationMode.SLIDE)
--    }
--
--
--}
-\ No newline at end of file
-Index: app/src/main/res/layout/fragment_product_preview.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n    <data>\n        <variable\n            name=\"productModel\"\n            type=\"com.example.kleine.model.Material\" />\n    </data>\n\n\n<androidx.core.widget.NestedScrollView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".fragments.shopping.MaterialPreviewFragment\"\n    android:fillViewport=\"true\">\n\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <androidx.cardview.widget.CardView\n            android:id=\"@+id/viewpager_card\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_350sdp\"\n            android:layout_marginTop=\"20dp\"\n            app:cardCornerRadius=\"15dp\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:orientation=\"vertical\"\n            android:backgroundTint=\"@color/white\"\n            android:overScrollMode=\"never\"\n            app:cardElevation=\"0dp\"\n            >\n\n\n            <androidx.viewpager2.widget.ViewPager2\n                android:id=\"@+id/viewpager2Images\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"0dp\"\n                android:layout_weight=\"1\"/>\n\n\n\n\n            <ImageView\n                android:id=\"@+id/img_close\"\n                android:layout_width=\"@dimen/_20sdp\"\n                android:layout_height=\"@dimen/_20sdp\"\n                android:layout_marginStart=\"10dp\"\n                android:layout_marginTop=\"10dp\"\n                android:src=\"@drawable/ic_close\"\n                app:tint=\"@color/black\"\n                android:scaleType=\"centerInside\"\n                />\n\n\n\n\n        </androidx.cardview.widget.CardView>\n\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline1\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.04\" />\n\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline2\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.96\" />\n\n\n\n\n\n\n\n\n        <LinearLayout\n            android:id=\"@+id/linear_product_name\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@+id/circle_indicator\"\n            android:orientation=\"horizontal\"\n            android:layout_marginTop=\"35dp\">\n\n\n            <TextView\n                android:id=\"@+id/tv_product_name\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:fontFamily=\"@font/poppins_light\"\n                android:text=\"@{productModel.name}\"\n                android:textColor=\"@color/black\"\n                android:textSize=\"@dimen/_20ssp\"\n                android:textStyle=\"bold\"\n                app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n                app:layout_constraintTop_toBottomOf=\"@id/guideline3\" />\n\n\n            <!--        <TextView-->\n            <!--            android:id=\"@+id/tv_product_offer_price\"-->\n            <!--            android:layout_width=\"wrap_content\"-->\n            <!--            android:layout_height=\"wrap_content\"-->\n            <!--            android:fontFamily=\"@font/poppins_light\"-->\n            <!--            android:text=\"$300\"-->\n            <!--            android:textColor=\"@color/g_hint\"-->\n            <!--            android:textSize=\"@dimen/_20ssp\"-->\n            <!--            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"-->\n            <!--            app:layout_constraintBottom_toBottomOf=\"@id/tv_product_name\"-->\n            <!--            app:layout_constraintTop_toTopOf=\"@+id/tv_product_name\"-->\n            <!--            android:layout_marginEnd=\"5dp\"/>-->\n\n\n            <!--        <TextView-->\n            <!--            android:id=\"@+id/tv_product_price\"-->\n            <!--            android:layout_width=\"wrap_content\"-->\n            <!--            android:layout_height=\"wrap_content\"-->\n            <!--            android:fontFamily=\"@font/poppins_light\"-->\n            <!--            android:text=\"$300\"-->\n            <!--            android:textColor=\"@color/g_hint\"-->\n            <!--            android:textSize=\"@dimen/_20ssp\"-->\n            <!--            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"-->\n            <!--            app:layout_constraintBottom_toBottomOf=\"@id/tv_product_name\"-->\n            <!--            app:layout_constraintTop_toTopOf=\"@+id/tv_product_name\"/>-->\n\n\n        </LinearLayout>\n\n\n        <LinearLayout\n            android:id=\"@+id/linear_product_description\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_product_name\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\">\n\n\n            <TextView\n                android:id=\"@+id/tv_product_description\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:fontFamily=\"@font/poppins_light\"\n                android:text=\"@{String.valueOf(productModel.desc)}\"\n                android:textColor=\"@color/g_hint\"\n                android:textSize=\"@dimen/_10ssp\"\n                android:textStyle=\"bold\" />\n        </LinearLayout>\n\n\n        <View\n            android:id=\"@+id/line\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_1sdp\"\n            android:layout_marginTop=\"10dp\"\n            android:background=\"@drawable/line\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_product_description\" />\n\n\n        <LinearLayout\n            android:id=\"@+id/linear\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/line\"\n            android:layout_marginTop=\"20dp\">\n\n\n            <LinearLayout\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:orientation=\"vertical\">\n\n\n                <LinearLayout\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\">\n\n\n                    <TextView\n                        android:id=\"@+id/tv_color\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:fontFamily=\"@font/poppins_light\"\n                        android:text=\"@string/string_status\"\n                        android:textColor=\"@color/black\"\n                        android:textSize=\"@dimen/_15ssp\" />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_color_error\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:text=\"@string/g_please_select_color\"\n                        android:textColor=\"@color/g_red\"\n                        android:visibility=\"invisible\"\n                        android:layout_marginTop=\"14dp\"\n                        android:layout_marginStart=\"10dp\"\n                        android:textSize=\"@dimen/_9ssp\"\n                        />\n\n\n                </LinearLayout>\n\n\n\n\n\n            </LinearLayout>\n\n\n            <LinearLayout\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:orientation=\"vertical\">\n                <LinearLayout\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\">\n                    <TextView\n                        android:id=\"@+id/tv_size\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:fontFamily=\"@font/poppins_light\"\n                        android:text=\"@string/string_rating\"\n                        android:textColor=\"@color/black\"\n                        android:textSize=\"@dimen/_15ssp\" />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_size_unit\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:textSize=\"@dimen/_10ssp\"\n                        android:visibility=\"invisible\"\n                        />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_size_error\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:text=\"@string/g_please_select_size\"\n                        android:textSize=\"@dimen/_9ssp\"\n                        android:textColor=\"@color/g_red\"\n                        android:visibility=\"invisible\"\n                        android:layout_marginTop=\"14dp\"\n                        android:layout_marginStart=\"10dp\"/>\n\n\n                </LinearLayout>\n\n\n\n            </LinearLayout>\n        </LinearLayout>\n\n\n        <ProgressBar\n            android:id=\"@+id/progressbar\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:indeterminateTint=\"@color/g_icon_tint\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear\"\n            android:layout_marginTop=\"45dp\"\n            android:visibility=\"invisible\"\n            />\n\n\n        <androidx.appcompat.widget.AppCompatButton\n            android:id=\"@+id/btn_add_to_cart\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_40sdp\"\n            android:layout_marginBottom=\"20dp\"\n            android:background=\"@drawable/btn_background\"\n            android:fontFamily=\"@font/poppins_thin\"\n            android:text=\"@string/g_add_to_card\"\n            android:textAllCaps=\"false\"\n            android:textColor=\"@color/white\"\n            android:textSize=\"@dimen/_12sdp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintHorizontal_bias=\"1.0\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear\"\n            app:layout_constraintVertical_bias=\"0.494\"\n            android:layout_marginTop=\"45dp\"\n            android:visibility=\"visible\"\n            />\n\n\n        <io.github.vejei.viewpagerindicator.indicator.CircleIndicator\n            android:id=\"@+id/circle_indicator\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintTop_toBottomOf=\"@id/viewpager_card\"\n            app:layout_constraintStart_toStartOf=\"@id/viewpager_card\"\n            app:layout_constraintEnd_toEndOf=\"@+id/viewpager_card\"\n            android:layout_marginTop=\"10dp\"\n            app:indicatorGap=\"5dp\"\n            app:indicatorRadius=\"5dp\"\n            app:indicatorItemCount=\"4\"\n            app:indicatorSelectedColor=\"@color/g_black\"/>\n\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n</androidx.core.widget.NestedScrollView>\n</layout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_product_preview.xml b/app/src/main/res/layout/fragment_product_preview.xml
---- a/app/src/main/res/layout/fragment_product_preview.xml	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/res/layout/fragment_product_preview.xml	(date 1695479912819)
-@@ -12,7 +12,7 @@
- <androidx.core.widget.NestedScrollView
-     android:layout_width="match_parent"
-     android:layout_height="match_parent"
--    tools:context=".fragments.shopping.MaterialPreviewFragment"
-+    tools:context="fragments.shopping.MaterialPreviewFragment"
-     android:fillViewport="true">
- 
- 
-@@ -82,18 +82,18 @@
- 
- 
- 
--
-         <LinearLayout
-             android:id="@+id/linear_product_name"
-             android:layout_width="0dp"
-             android:layout_height="wrap_content"
-             app:layout_constraintStart_toStartOf="@id/guideline1"
-             app:layout_constraintEnd_toEndOf="@id/guideline2"
--            app:layout_constraintTop_toBottomOf="@+id/circle_indicator"
-+            app:layout_constraintTop_toBottomOf="@+id/viewpager_card"
-             android:orientation="horizontal"
-             android:layout_marginTop="35dp">
- 
- 
-+
-             <TextView
-                 android:id="@+id/tv_product_name"
-                 android:layout_width="wrap_content"
-@@ -201,22 +201,13 @@
-                         android:layout_height="wrap_content"
-                         android:layout_marginTop="15dp"
-                         android:fontFamily="@font/poppins_light"
--                        android:text="@string/string_status"
-+                        android:text="@{productModel.status}"
-                         android:textColor="@color/black"
-                         android:textSize="@dimen/_15ssp" />
- 
- 
--                    <TextView
--                        android:id="@+id/tv_color_error"
--                        android:layout_width="wrap_content"
--                        android:layout_height="wrap_content"
--                        android:text="@string/g_please_select_color"
--                        android:textColor="@color/g_red"
--                        android:visibility="invisible"
--                        android:layout_marginTop="14dp"
--                        android:layout_marginStart="10dp"
--                        android:textSize="@dimen/_9ssp"
--                        />
-+
-+
- 
- 
-                 </LinearLayout>
-@@ -243,7 +234,7 @@
-                         android:layout_height="wrap_content"
-                         android:layout_marginTop="15dp"
-                         android:fontFamily="@font/poppins_light"
--                        android:text="@string/string_rating"
-+                        android:text="@{productModel.requirement}"
-                         android:textColor="@color/black"
-                         android:textSize="@dimen/_15ssp" />
- 
-@@ -257,17 +248,6 @@
-                         android:visibility="invisible"
-                         />
- 
--
--                    <TextView
--                        android:id="@+id/tv_size_error"
--                        android:layout_width="wrap_content"
--                        android:layout_height="wrap_content"
--                        android:text="@string/g_please_select_size"
--                        android:textSize="@dimen/_9ssp"
--                        android:textColor="@color/g_red"
--                        android:visibility="invisible"
--                        android:layout_marginTop="14dp"
--                        android:layout_marginStart="10dp"/>
- 
- 
-                 </LinearLayout>
-@@ -293,7 +273,7 @@
- 
- 
-         <androidx.appcompat.widget.AppCompatButton
--            android:id="@+id/btn_add_to_cart"
-+            android:id="@+id/btnEnroll"
-             android:layout_width="0dp"
-             android:layout_height="@dimen/_40sdp"
-             android:layout_marginBottom="20dp"
-@@ -314,20 +294,11 @@
-             />
- 
- 
--        <io.github.vejei.viewpagerindicator.indicator.CircleIndicator
--            android:id="@+id/circle_indicator"
--            android:layout_width="wrap_content"
--            android:layout_height="wrap_content"
--            app:layout_constraintTop_toBottomOf="@id/viewpager_card"
--            app:layout_constraintStart_toStartOf="@id/viewpager_card"
--            app:layout_constraintEnd_toEndOf="@+id/viewpager_card"
--            android:layout_marginTop="10dp"
--            app:indicatorGap="5dp"
--            app:indicatorRadius="5dp"
--            app:indicatorItemCount="4"
--            app:indicatorSelectedColor="@color/g_black"/>
-+
-+
- 
- 
-     </androidx.constraintlayout.widget.ConstraintLayout>
-+
- </androidx.core.widget.NestedScrollView>
- </layout>
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.adapters.recyclerview\n\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.navigation.NavDirections\nimport androidx.navigation.findNavController\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.R\nimport com.example.kleine.databinding.ProductLayoutRowBinding\nimport com.example.kleine.model.Material\nimport com.google.firebase.storage.FirebaseStorage\n\nclass MaterialAdapter : RecyclerView.Adapter<MaterialAdapter.MaterialViewHolder>() {\n\n    var onItemClick: ((Material) -> Unit)? = null\n\n    inner class MaterialViewHolder(val binding: ProductLayoutRowBinding) : RecyclerView.ViewHolder(binding.root) {\n        init {\n            itemView.setOnClickListener {\n                val material = differ.currentList[adapterPosition]\n                val actionId = R.id.action_homeFragment_to_materialDetailsFragment\n                it.findNavController().navigate(actionId)\n            }\n        }\n    }\n\n    private val diffCallback = object : DiffUtil.ItemCallback<Material>() {\n        override fun areItemsTheSame(oldItem: Material, newItem: Material): Boolean {\n            return oldItem == newItem\n        }\n\n        override fun areContentsTheSame(oldItem: Material, newItem: Material): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallback)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MaterialViewHolder {\n        Log.d(\"MaterialAdapter\", \"onCreateViewHolder called\")\n        return MaterialViewHolder(\n            ProductLayoutRowBinding.inflate(\n                LayoutInflater.from(parent.context),\n                parent,\n                false\n            )\n        )\n    }\n\n\n    override fun onBindViewHolder(holder: MaterialViewHolder, position: Int) {\n        Log.d(\"MaterialAdapter\", \"onBindViewHolder called for position $position\")\n\n        val material = differ.currentList[position]\n        holder.binding.apply {\n            productModel = material\n\n            val storage = FirebaseStorage.getInstance()\n            val storageRef = storage.reference\n\n            if (material.imageUrl.isNotEmpty()) {\n                val pathToImage = \"materialImages/${material.imageUrl}\"\n                Log.d(\"MaterialAdapter\", \"Dynamic Path to image: $pathToImage\")\n                Log.d(\"MaterialAdapter\", \"Material image URL: ${material.imageUrl}\")\n\n                val pathReference = storageRef.child(pathToImage)\n\n                pathReference.downloadUrl.addOnSuccessListener { uri ->\n                    Log.d(\"MaterialAdapter\", \"Successfully fetched URI: $uri\")\n                    Glide.with(holder.itemView).load(uri).into(imageView)\n                }.addOnFailureListener { exception ->\n                    Log.e(\"MaterialAdapter\", \"Failed to load image\", exception)\n                    imageView.setImageResource(R.drawable.default_book_logo)\n                }\n            } else {\n                imageView.setImageResource(R.drawable.default_book_logo)\n            }\n        }\n    }\n\n\n\n\n    override fun getItemCount(): Int {\n        val count = differ.currentList.size\n        Log.d(\"MaterialAdapter\", \"Item count: $count\")\n        return count\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt b/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt
---- a/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt	(date 1695479912877)
-@@ -2,6 +2,7 @@
- 
- import android.util.Log
- import android.view.LayoutInflater
-+import android.view.View
- import android.view.ViewGroup
- import androidx.navigation.NavDirections
- import androidx.navigation.findNavController
-@@ -11,6 +12,7 @@
- import com.bumptech.glide.Glide
- import com.example.kleine.R
- import com.example.kleine.databinding.ProductLayoutRowBinding
-+import com.example.kleine.fragments.shopping.HomeFragmentDirections
- import com.example.kleine.model.Material
- import com.google.firebase.storage.FirebaseStorage
- 
-@@ -19,13 +21,7 @@
-     var onItemClick: ((Material) -> Unit)? = null
- 
-     inner class MaterialViewHolder(val binding: ProductLayoutRowBinding) : RecyclerView.ViewHolder(binding.root) {
--        init {
--            itemView.setOnClickListener {
--                val material = differ.currentList[adapterPosition]
--                val actionId = R.id.action_homeFragment_to_materialDetailsFragment
--                it.findNavController().navigate(actionId)
--            }
--        }
-+
-     }
- 
-     private val diffCallback = object : DiffUtil.ItemCallback<Material>() {
-@@ -51,6 +47,16 @@
-         )
-     }
- 
-+    // Define a helper function for debounced clicks
-+    fun View.setDebouncedOnClickListener(debounceTime: Long = 500L, onClick: (view: View) -> Unit) {
-+        var lastClickTime = 0L
-+        this.setOnClickListener {
-+            if (System.currentTimeMillis() - lastClickTime >= debounceTime) {
-+                onClick(it)
-+                lastClickTime = System.currentTimeMillis()
-+            }
-+        }
-+    }
- 
-     override fun onBindViewHolder(holder: MaterialViewHolder, position: Int) {
-         Log.d("MaterialAdapter", "onBindViewHolder called for position $position")
-@@ -67,6 +73,7 @@
-                 Log.d("MaterialAdapter", "Dynamic Path to image: $pathToImage")
-                 Log.d("MaterialAdapter", "Material image URL: ${material.imageUrl}")
- 
-+
-                 val pathReference = storageRef.child(pathToImage)
- 
-                 pathReference.downloadUrl.addOnSuccessListener { uri ->
-@@ -77,9 +84,18 @@
-                     imageView.setImageResource(R.drawable.default_book_logo)
-                 }
-             } else {
--                imageView.setImageResource(R.drawable.default_book_logo)
-+                Log.e("MaterialAdapter", "Failed to load image because of empty")
-             }
-         }
-+        // Set an onClick listener for the item
-+        holder.itemView.setDebouncedOnClickListener {
-+            Log.d("MaterialAdapter", "Navigating with Material ID: ${material.id}")
-+            val action = HomeFragmentDirections.actionHomeFragmentToMaterialDetailsFragment(material)
-+            it.findNavController().navigate(action)
-+        }
-+
-+
-+
-     }
- 
- 
-Index: app/src/main/res/layout/fragment_order_details.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.core.widget.NestedScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".fragments.settings.OrderDetails\"\n    android:fillViewport=\"true\">\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar_all_order_details\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"?actionBarSize\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toTopOf=\"parent\">\n\n            <androidx.constraintlayout.widget.ConstraintLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\">\n\n                <ImageView\n                    android:id=\"@+id/img_close_order\"\n                    android:layout_width=\"@dimen/_20sdp\"\n                    android:layout_height=\"@dimen/_20sdp\"\n                    android:src=\"@drawable/ic_close\"\n                    android:scaleType=\"centerInside\"\n                    app:layout_constraintBottom_toBottomOf=\"parent\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toTopOf=\"parent\"\n                    app:tint=\"@color/black\" />\n\n                <TextView\n                    android:id=\"@+id/tv_order_id\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginStart=\"25dp\"\n                    android:fontFamily=\"@font/poppins_light\"\n                    android:textColor=\"@color/black\"\n                    android:textSize=\"@dimen/_20ssp\"\n                    app:layout_constraintBottom_toBottomOf=\"parent\"\n                    app:layout_constraintStart_toEndOf=\"@id/img_close_order\"\n                    app:layout_constraintTop_toTopOf=\"parent\" />\n            </androidx.constraintlayout.widget.ConstraintLayout>\n\n        </androidx.appcompat.widget.Toolbar>\n\n        <com.google.android.material.progressindicator.LinearProgressIndicator\n            android:id=\"@+id/progressbar_order\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintTop_toBottomOf=\"@id/toolbar_all_order_details\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            android:indeterminate=\"true\"\n            android:visibility=\"invisible\"/>\n\n        <LinearLayout\n            android:id=\"@+id/linear_steps_view\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/toolbar_all_order_details\">\n\n           <com.shuhart.stepview.StepView\n               android:id=\"@+id/step_view\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"wrap_content\"\n               android:padding=\"16dp\"\n               app:sv_selectedCircleColor=\"@color/g_orange\"\n               app:sv_selectedTextColor=\"@color/g_hint\"\n               app:sv_stepLineWidth=\"3dp\"\n               app:sv_stepPadding=\"4dp\"\n               app:sv_nextTextColor=\"@color/g_hint\"\n               app:sv_nextStepLineColor=\"@color/g_hint\"\n               app:sv_doneCircleColor=\"@color/g_orange\"\n               app:sv_doneStepLineColor=\"@color/g_orange\"\n               app:sv_doneCircleRadius=\"@dimen/_14sdp\"\n               app:sv_selectedCircleRadius=\"@dimen/_14sdp\"\n               app:sv_selectedStepNumberColor=\"@color/colorPrimary\"\n               app:sv_stepViewStyle=\"@style/StepView\"\n               app:sv_doneStepMarkColor=\"@color/colorPrimary\"\n               app:sv_stepNumberTextSize=\"@dimen/_12ssp\"\n               app:sv_animationType=\"Line\"\n               app:sv_doneTextColor=\"@color/g_hint\"\n               />\n        </LinearLayout>\n\n\n\n        <TextView\n            android:id=\"@+id/tv_shopping_addresses\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/g_address\"\n            android:fontFamily=\"@font/poppins_thin\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            android:textColor=\"@color/black\"\n            android:textSize=\"@dimen/_15ssp\"\n            android:layout_marginTop=\"20dp\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_steps_view\"\n            app:drawableTint=\"@color/black\"\n            app:drawableLeftCompat=\"@drawable/ic_baseline_location_on_24\" />\n\n        <LinearLayout\n            android:id=\"@+id/linear_address\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/tv_shopping_addresses\">\n\n\n                <TextView\n                    android:id=\"@+id/tv_full_name\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"@string/g_full_name\"\n                    android:textSize=\"@dimen/_13ssp\" />\n\n            <TextView\n                android:id=\"@+id/tv_address\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/g_address\"\n                android:textSize=\"@dimen/_13ssp\" />\n\n            <TextView\n                android:id=\"@+id/tv_phone_number\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/g_phone\"\n                android:textSize=\"@dimen/_13ssp\" />\n\n        </LinearLayout>\n\n        <View\n            android:id=\"@+id/line1\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_1sdp\"\n            android:layout_marginTop=\"15dp\"\n            android:background=\"@drawable/line\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_address\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            android:backgroundTint=\"@color/g_icon_tint\"\n            />\n\n        <TextView\n            android:id=\"@+id/tv_products\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/g_products\"\n            android:fontFamily=\"@font/poppins_thin\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            android:textColor=\"@color/black\"\n            android:textSize=\"@dimen/_15ssp\"\n            android:layout_marginTop=\"20dp\"\n            app:layout_constraintTop_toBottomOf=\"@id/line1\"\n            app:drawableTint=\"@color/black\"\n            app:drawableLeftCompat=\"@drawable/ic_cart\"\n            android:drawablePadding=\"5dp\"/>\n\n        <androidx.recyclerview.widget.RecyclerView\n            android:id=\"@+id/rv_products\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/line1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/tv_products\"\n            android:layout_marginTop=\"10dp\"\n            tools:listitem=\"@layout/cart_item\"\n            />\n\n        <androidx.constraintlayout.widget.ConstraintLayout\n            android:id=\"@+id/linear\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/rv_products\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            android:layout_marginTop=\"40dp\"\n            android:layout_marginBottom=\"20dp\"\n            android:background=\"@drawable/total_box_background\">\n\n            <TextView\n                android:layout_width=\"0dp\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/g_total\"\n                android:textSize=\"@dimen/_16ssp\"\n                android:textColor=\"@color/black\"\n                android:fontFamily=\"@font/sf_pro_display\"\n                android:layout_marginStart=\"10dp\"\n                android:layout_weight=\"1\"\n                android:layout_marginTop=\"@dimen/_15sdp\"\n                android:layout_marginBottom=\"@dimen/_15sdp\"\n                android:layout_gravity=\"start|center_vertical\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"/>\n\n            <TextView\n                android:id=\"@+id/tv_totalprice\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginEnd=\"10dp\"\n                android:textSize=\"@dimen/_16ssp\"\n                android:textColor=\"@color/black\"\n                android:fontFamily=\"@font/sf_pro_display\"\n                android:layout_marginTop=\"@dimen/_15sdp\"\n                android:layout_marginBottom=\"@dimen/_15sdp\"\n                android:layout_gravity=\"end|center_vertical\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"\n                />\n\n        </androidx.constraintlayout.widget.ConstraintLayout>\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline1\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.04\" />\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline2\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.96\" />\n    </androidx.constraintlayout.widget.ConstraintLayout>\n\n</androidx.core.widget.NestedScrollView>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_order_details.xml b/app/src/main/res/layout/fragment_order_details.xml
---- a/app/src/main/res/layout/fragment_order_details.xml	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/res/layout/fragment_order_details.xml	(date 1695479912897)
-@@ -115,31 +115,10 @@
-             android:orientation="vertical"
-             app:layout_constraintStart_toStartOf="@id/guideline1"
-             app:layout_constraintEnd_toEndOf="@id/guideline2"
--            app:layout_constraintTop_toBottomOf="@id/tv_shopping_addresses">
--
-+            app:layout_constraintTop_toBottomOf="@id/tv_shopping_addresses"/>
- 
--                <TextView
--                    android:id="@+id/tv_full_name"
--                    android:layout_width="wrap_content"
--                    android:layout_height="wrap_content"
--                    android:text="@string/g_full_name"
--                    android:textSize="@dimen/_13ssp" />
- 
--            <TextView
--                android:id="@+id/tv_address"
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:text="@string/g_address"
--                android:textSize="@dimen/_13ssp" />
- 
--            <TextView
--                android:id="@+id/tv_phone_number"
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:text="@string/g_phone"
--                android:textSize="@dimen/_13ssp" />
--
--        </LinearLayout>
- 
-         <View
-             android:id="@+id/line1"
-@@ -157,7 +136,7 @@
-             android:id="@+id/tv_products"
-             android:layout_width="wrap_content"
-             android:layout_height="wrap_content"
--            android:text="@string/g_products"
-+            android:text="Courses Material"
-             android:fontFamily="@font/poppins_thin"
-             app:layout_constraintStart_toStartOf="@id/guideline1"
-             android:textColor="@color/black"
-Index: app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.settings\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.AllOrdersAdapter\nimport com.example.kleine.databinding.FragmentAllOrdersBinding\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\n\n\nclass AllOrdersFragment : Fragment() {\n\n    val TAG = \"AllOrdersFragment\"\n    private lateinit var viewModel: ShoppingViewModel\n    private lateinit var binding: FragmentAllOrdersBinding\n    private lateinit var allOrdersAdapter: AllOrdersAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getUserOrders()\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        // Inflate the layout for this fragment\n        binding = FragmentAllOrdersBinding.inflate(inflater)\n        activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)?.visibility = View.GONE\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        setupRecyclerView()\n        observeAllOrders()\n        onCloseClick()\n        onItemClick()\n        binding.imgCloseOrders.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun onItemClick() {\n        allOrdersAdapter.onItemClick = {order ->\n            val bundle = Bundle()\n            bundle.putParcelable(\"order\",order)\n            findNavController().navigate(R.id.action_allOrdersFragment_to_orderDetails,bundle)\n\n        }\n    }\n\n    private fun onCloseClick() {\n        binding.imgCloseOrders.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun observeAllOrders() {\n        viewModel.userOrders.observe(viewLifecycleOwner) { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@observe\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n                    val orders = response.data\n                    if (orders!!.isEmpty())\n                        binding.apply {\n                            imgEmptyBox.visibility = View.VISIBLE\n                            imgEmptyBoxTexture.visibility = View.VISIBLE\n                            tvEmptyOrders.visibility = View.VISIBLE\n                            return@observe\n                        }\n                    binding.apply {\n                        imgEmptyBox.visibility = View.GONE\n                        imgEmptyBoxTexture.visibility = View.GONE\n                        tvEmptyOrders.visibility = View.GONE\n                    }\n                    allOrdersAdapter.differ.submitList(orders)\n                    return@observe\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@observe\n                }\n            }\n        }\n    }\n\n    private fun hideLoading() {\n        binding.progressbarAllOrders.visibility = View.GONE\n\n    }\n\n    private fun showLoading() {\n        binding.progressbarAllOrders.visibility = View.VISIBLE\n    }\n\n    private fun setupRecyclerView() {\n        allOrdersAdapter = AllOrdersAdapter()\n        binding.rvAllOrders.apply {\n            layoutManager = LinearLayoutManager(context)\n            adapter = allOrdersAdapter\n        }\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt b/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt	(date 1695479912919)
-@@ -12,10 +12,16 @@
- import com.example.kleine.R
- import com.example.kleine.activities.ShoppingActivity
- import com.example.kleine.adapters.recyclerview.AllOrdersAdapter
-+import com.example.kleine.adapters.recyclerview.MaterialAdapter
- import com.example.kleine.databinding.FragmentAllOrdersBinding
-+import com.example.kleine.model.Enrollment
-+import com.example.kleine.model.Material
- import com.example.kleine.resource.Resource
- import com.example.kleine.viewmodel.shopping.ShoppingViewModel
- import com.google.android.material.bottomnavigation.BottomNavigationView
-+import com.google.firebase.auth.FirebaseAuth
-+import com.google.firebase.firestore.FieldPath
-+import com.google.firebase.firestore.FirebaseFirestore
- 
- 
- class AllOrdersFragment : Fragment() {
-@@ -24,6 +30,8 @@
-     private lateinit var viewModel: ShoppingViewModel
-     private lateinit var binding: FragmentAllOrdersBinding
-     private lateinit var allOrdersAdapter: AllOrdersAdapter
-+    private lateinit var materialAdapter: MaterialAdapter
-+
- 
-     override fun onCreate(savedInstanceState: Bundle?) {
-         super.onCreate(savedInstanceState)
-@@ -45,6 +53,7 @@
-     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-         super.onViewCreated(view, savedInstanceState)
- 
-+        fetchEnrolledMaterials()
-         setupRecyclerView()
-         observeAllOrders()
-         onCloseClick()
-@@ -54,14 +63,85 @@
-         }
-     }
- 
-+
-+    private fun fetchEnrolledMaterials() {
-+        val userId = FirebaseAuth.getInstance().currentUser?.uid
-+
-+        if (userId != null) {
-+            val firestore = FirebaseFirestore.getInstance()
-+            firestore.collection("enrollments")
-+                .whereEqualTo("userId", userId)
-+                .get()
-+                .addOnSuccessListener { querySnapshot ->
-+                    val enrollments = querySnapshot.documents.mapNotNull { document ->
-+                        document.toObject(Enrollment::class.java)
-+                    }
-+                    fetchMaterialsForEnrollments(enrollments)
-+                    Log.d(TAG, "Number of enrollments fetched: ${enrollments.size}")
-+
-+                }
-+                .addOnFailureListener { exception ->
-+                    Log.e(TAG, "Error fetching user enrollments", exception)
-+                    // Handle the error appropriately
-+                }
-+        } else {
-+            // Handle the case where the user is not logged in
-+        }
-+    }
-+
-+    private fun fetchMaterialsForEnrollments(enrollments: List<Enrollment>) {
-+        val firestore = FirebaseFirestore.getInstance()
-+
-+        // Filter out empty strings and remove duplicate IDs
-+        val materialIds = enrollments.map { it.materialId }.filter { it.isNotEmpty() }.distinct()
-+
-+        // Log the IDs being used in the query for debugging purposes
-+        Log.d(TAG, "Attempting to fetch materials with IDs: $materialIds")
-+
-+        // Only proceed with the query if there are valid IDs to search for
-+        if (materialIds.isNotEmpty()) {
-+            firestore.collection("Materials")
-+                .whereIn(FieldPath.documentId(), materialIds) // Updated line
-+                .get()
-+                .addOnSuccessListener { querySnapshot ->
-+                    val materials = querySnapshot.documents.mapNotNull { document ->
-+                        val material = document.toObject(Material::class.java)
-+                        material?.id = document.id // Set the id of the Material object
-+                        material
-+                    }
-+                    Log.d(TAG, "Materials fetched successfully: $materials")
-+                    displayMaterials(materials)
-+                }
-+                .addOnFailureListener { exception ->
-+                    Log.e(TAG, "Error fetching materials", exception)
-+                    // Handle the error appropriately
-+                }
-+        } else {
-+            Log.w(TAG, "No valid material IDs to fetch")
-+            // Handle the case where there are no valid material IDs
-+        }
-+    }
-+
-+
-+
-+
-+    private fun displayMaterials(materials: List<Material>) {
-+        Log.d(TAG, "Displaying materials: ${materials.size}")
-+        materialAdapter.differ.submitList(materials)
-+        materialAdapter.notifyDataSetChanged() // Force redraw
-+    }
-+
-+
-+
-     private fun onItemClick() {
--        allOrdersAdapter.onItemClick = {order ->
-+        materialAdapter.onItemClick = { material ->
-             val bundle = Bundle()
--            bundle.putParcelable("order",order)
--            findNavController().navigate(R.id.action_allOrdersFragment_to_orderDetails,bundle)
--
-+            bundle.putParcelable("material", material)
-+            findNavController().navigate(R.id.action_allOrdersFragment_to_orderDetails, bundle)
-         }
-     }
-+
-+
- 
-     private fun onCloseClick() {
-         binding.imgCloseOrders.setOnClickListener {
-@@ -120,10 +200,10 @@
-     }
- 
-     private fun setupRecyclerView() {
--        allOrdersAdapter = AllOrdersAdapter()
-+        materialAdapter = MaterialAdapter()
-         binding.rvAllOrders.apply {
-             layoutManager = LinearLayoutManager(context)
--            adapter = allOrdersAdapter
-+            adapter = materialAdapter
-         }
-     }
- }
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/model/Material.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.model\n\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.parcelize.Parcelize\n\n@Parcelize\n@Entity(tableName = \"material\")\ndata class Material(\n    @PrimaryKey(autoGenerate = true) // ID as auto increment\n    val desc: String = \"\",\n    val name: String = \"\", // Course name\n    val pass: Int = 0, // Number of students who passed this course/subject\n    val rating: Float = 0f, // Rating (1 - 5)\n    val requirement: String = \"\", // Requirement (e.g., Free)\n    val status: String = \"\", // Status (Available/Unavailable)\n    val view: Int = 0, // Number of students who viewed this course/subject\n    val imageUrl: String = \"\", // URL for the course banner\n    val enroll: Int = 0, // Number of students enrolled in this course/subject\n    val partnershipsID: String? = null  // partnership ID\n\n): Parcelable\n\n@Parcelize\ndata class MaterialData(\n    var id: String = \"\",\n    var name: String = \"\",\n    var desc: String = \"\",\n    var requirement: String = \"\",\n    var rating: Double = 0.0,\n    var imageUrl: String = \"\"\n): Parcelable {\n    constructor() : this(\"\", \"\", \"\", \"\", 0.0, \"\")\n}\n\n@Parcelize\ndata class MaterialEngageData(\n    val name: String = \"\",\n    val view: Long = 0,\n    val enroll: Long = 0,\n    val graduate: Long = 0,\n    val imageUrl: String = \"\"\n): Parcelable {\n    constructor() : this(\"\", 0,0,0,\"\")\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/model/Material.kt b/app/src/main/java/com/example/kleine/model/Material.kt
---- a/app/src/main/java/com/example/kleine/model/Material.kt	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/java/com/example/kleine/model/Material.kt	(date 1695479912924)
-@@ -8,7 +8,8 @@
- @Parcelize
- @Entity(tableName = "material")
- data class Material(
--    @PrimaryKey(autoGenerate = true) // ID as auto increment
-+//    @PrimaryKey(autoGenerate = true) // ID as auto increment
-+    var id: String = "",
-     val desc: String = "",
-     val name: String = "", // Course name
-     val pass: Int = 0, // Number of students who passed this course/subject
-Index: app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.firebaseDatabase\n\nimport android.util.Log\nimport com.example.kleine.model.*\nimport com.example.kleine.util.Constants.Companion.ADDRESS_COLLECTION\nimport com.example.kleine.util.Constants.Companion.BEST_DEALS\nimport com.example.kleine.util.Constants.Companion.CART_COLLECTION\nimport com.example.kleine.util.Constants.Companion.CATEGORIES_COLLECTION\nimport com.example.kleine.util.Constants.Companion.CATEGORY\nimport com.example.kleine.util.Constants.Companion.CHAIR_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CLOTHES\nimport com.example.kleine.util.Constants.Companion.COLOR\nimport com.example.kleine.util.Constants.Companion.CUPBOARD_CATEGORY\nimport com.example.kleine.util.Constants.Companion.ID\nimport com.example.kleine.util.Constants.Companion.ORDERS\nimport com.example.kleine.util.Constants.Companion.ORDER_CONFIRM_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_PLACED_STATE\nimport com.example.kleine.util.Constants.Companion.PRICE\nimport com.example.kleine.util.Constants.Companion.PRODUCTS_COLLECTION\nimport com.example.kleine.util.Constants.Companion.QUANTITY\nimport com.example.kleine.util.Constants.Companion.SIZE\nimport com.example.kleine.util.Constants.Companion.STORES_COLLECTION\nimport com.example.kleine.util.Constants.Companion.TITLE\nimport com.example.kleine.util.Constants.Companion.USERS_COLLECTION\n\n\nimport com.google.android.gms.tasks.Task\nimport com.google.firebase.auth.AuthCredential\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.ktx.auth\nimport com.google.firebase.firestore.DocumentSnapshot\nimport com.google.firebase.firestore.FirebaseFirestore\nimport com.google.firebase.firestore.Query\nimport com.google.firebase.firestore.QuerySnapshot\nimport com.google.firebase.firestore.Transaction\nimport com.google.firebase.firestore.ktx.firestore\nimport com.google.firebase.ktx.Firebase\nimport com.google.firebase.storage.FirebaseStorage\nimport com.google.firebase.storage.UploadTask\nimport com.google.firebase.storage.ktx.storage\nimport java.util.*\nimport kotlin.collections.ArrayList\nimport kotlin.collections.HashMap\nimport kotlin.random.Random\n\nclass FirebaseDb {\n    private val usersCollectionRef = Firebase.firestore.collection(USERS_COLLECTION)\n    private val productsCollection = Firebase.firestore.collection(PRODUCTS_COLLECTION)\n    private val categoriesCollection = Firebase.firestore.collection(CATEGORIES_COLLECTION)\n    private val storesCollection = Firebase.firestore.collection(STORES_COLLECTION)\n\n\n    private val firebaseStorage = Firebase.storage.reference\n\n    val userUid = FirebaseAuth.getInstance().currentUser?.uid\n\n    private val userCartCollection = userUid?.let {\n        Firebase.firestore.collection(USERS_COLLECTION).document(it).collection(CART_COLLECTION)\n    }\n    private val userAddressesCollection = userUid?.let {\n        Firebase.firestore.collection(USERS_COLLECTION).document(it).collection(ADDRESS_COLLECTION)\n\n    }\n\n\n    private val firebaseAuth = Firebase.auth\n\n    fun getProductsByCategory(category: String,page:Long) =\n        productsCollection.whereEqualTo(CATEGORY,category).limit(page).get()\n\n\n    fun getMostRequestedProducts(category: String,page:Long) =\n        productsCollection.whereEqualTo(CATEGORY, category)\n            .orderBy(ORDERS, Query.Direction.DESCENDING).limit(page).get()\n\n\n    fun createNewUser(\n        email: String, password: String\n    ) = firebaseAuth.createUserWithEmailAndPassword(email, password)\n\n    fun saveUserInformation(userUid: String, user: User, completion: (Exception?) -> Unit) {\n        usersCollectionRef.document(userUid).set(user)\n            .addOnSuccessListener { completion(null) }\n            .addOnFailureListener { e -> completion(e) }\n    }\n\n\n\n\n    fun loginUser(\n        email: String,\n        password: String\n    ) = firebaseAuth.signInWithEmailAndPassword(email, password)\n\n    fun getClothesProducts(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, CLOTHES).limit(pagingPage).get()\n\n    fun getBestDealsProducts(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, BEST_DEALS).limit(pagingPage).get()\n\n    fun getHomeProducts(pagingPage: Long) =\n        productsCollection.limit(pagingPage).get()\n\n    //add order by orders\n    fun getMostOrderedCupboard(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, CUPBOARD_CATEGORY).limit(pagingPage)\n            .orderBy(ORDERS, Query.Direction.DESCENDING).limit(pagingPage).get()\n\n    fun getCupboards(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, CUPBOARD_CATEGORY).limit(pagingPage)\n            .limit(pagingPage).get()\n\n    fun addProductToCart(product: CartProduct) = userCartCollection?.document()!!.set(product)\n\n    fun getProductInCart(product: CartProduct) = userCartCollection!!\n        .whereEqualTo(ID, product.id)\n        .whereEqualTo(COLOR, product.color)\n        .whereEqualTo(SIZE, product.size).get()\n\n    fun increaseProductQuantity(documentId: String): Task<Transaction> {\n        val document = userCartCollection!!.document(documentId)\n        return Firebase.firestore.runTransaction { transaction ->\n            val productBefore = transaction.get(document)\n            var quantity = productBefore.getLong(QUANTITY)\n            quantity = quantity!! + 1\n            transaction.update(document, QUANTITY, quantity)\n        }\n\n    }\n\n    fun getItemsInCart() = userCartCollection!!\n\n    fun decreaseProductQuantity(documentId: String): Task<Transaction> {\n        val document = userCartCollection!!.document(documentId)\n        return Firebase.firestore.runTransaction { transaction ->\n            val productBefore = transaction.get(document)\n            var quantity = productBefore.getLong(QUANTITY)\n            quantity = if (quantity!!.toInt() == 1)\n                1\n            else\n                quantity - 1\n            transaction.update(document, QUANTITY, quantity)\n\n        }\n\n    }\n\n    fun getMaterials(page: Long): Task<QuerySnapshot> {\n        return FirebaseFirestore.getInstance().collection(\"Materials\").limit(page).get()\n    }\n\n\n\n    fun deleteProductFromCart(documentId: String) =\n        userCartCollection!!.document(documentId).delete()\n\n\n    fun searchProducts(searchQuery: String) = productsCollection\n        .orderBy(\"title\")\n        .startAt(searchQuery)\n        .endAt(\"\\u03A9+$searchQuery\")\n        .limit(5)\n        .get()\n\n    fun getCategories() = categoriesCollection.orderBy(\"rank\").get()\n\n    fun getProductFromCartProduct(cartProduct: CartProduct) =\n        productsCollection.whereEqualTo(ID, cartProduct.id)\n            .whereEqualTo(TITLE, cartProduct.name)\n            .whereEqualTo(PRICE, cartProduct.price).get()\n\n    fun saveNewAddress(address: Address) = userAddressesCollection?.add(address)\n\n    fun getAddresses() = userAddressesCollection\n\n    fun findAddress(address: Address) = userAddressesCollection!!\n        .whereEqualTo(\"addressTitle\", address.addressTitle)\n        .whereEqualTo(\"fullName\", address.fullName).get()\n\n    fun updateAddress(documentUid: String, address: Address) =\n        userAddressesCollection?.document(documentUid)?.set(address)\n\n    fun deleteAddress(documentUid: String, address: Address) =\n        userAddressesCollection?.document(documentUid)?.delete()\n\n    fun placeOrder(products: List<CartProduct>, address: Address, order: Order) =\n        Firebase.firestore.runBatch { batch ->\n            //filter every product to its store\n            /**\n             * create a map of products that has the size of stores list,\n            the map has stores name as keys\n             */\n\n            val stores = ArrayList<String>()\n            products.forEach { cartProduct ->\n                if (!stores.contains(cartProduct.store)) {\n                    stores.add(cartProduct.store)\n                }\n            }\n\n            val productsMap = HashMap<String, ArrayList<CartProduct>>(stores.size)\n            stores.forEach { storeName ->\n                val tempList = ArrayList<CartProduct>()\n                products.forEach { cartProduct ->\n                    if (cartProduct.store == storeName)\n                        tempList.add(cartProduct)\n                    productsMap[storeName] = tempList\n                }\n            }\n\n\n            /**\n            // Adding order,address and products to each store\n             */\n            productsMap.forEach {\n                val store = it.key\n                val orderProducts = it.value\n                val orderNum = order.id\n                var price = 0\n\n                orderProducts.forEach { it2 ->\n                    if (it2.newPrice != null && it2.newPrice.isNotEmpty()) {\n                        price += it2.newPrice.toInt() * it2.quantity\n                    } else\n                        price += it2.price.toInt() * it2.quantity\n                }\n\n                Log.d(\"test\", \"$store $price\")\n\n                val storeOrder = Order(\n                    orderNum.toString(),\n                    Calendar.getInstance().time,\n                    price.toString(),\n                    ORDER_PLACED_STATE\n                )\n\n                val storeDocument = storesCollection\n                    .document(store)\n                    .collection(\"orders\")\n                    .document()\n\n                batch.set(storeDocument, storeOrder)\n\n                val storeOrderAddress = storeDocument.collection(ADDRESS_COLLECTION).document()\n                batch.set(storeOrderAddress, address)\n\n\n                orderProducts.forEach {\n                    val storeOrderProducts =\n                        storeDocument.collection(PRODUCTS_COLLECTION).document()\n                    batch.set(storeOrderProducts, it)\n                }\n\n\n            }\n\n            /**\n            // Adding order,address and products to the user\n             */\n            val userOrderDocument =\n                usersCollectionRef.document(FirebaseAuth.getInstance().currentUser!!.uid)\n                    .collection(\"orders\").document()\n            batch.set(userOrderDocument, order)\n\n            products.forEach {\n                val userProductDocument =\n                    userOrderDocument.collection(PRODUCTS_COLLECTION).document()\n                batch.set(userProductDocument, it)\n            }\n\n            val userAddressDocument = userOrderDocument.collection(ADDRESS_COLLECTION).document()\n\n            batch.set(userAddressDocument, address)\n\n        }.also {\n            deleteCartItems()\n        }\n\n    private fun deleteCartItems() {\n        userCartCollection?.get()?.addOnSuccessListener {\n            Firebase.firestore.runBatch { batch ->\n                it.documents.forEach {\n                    val document = userCartCollection.document(it.id)\n                    batch.delete(document)\n                }\n            }\n        }\n    }\n\n\n    fun getUser() = usersCollectionRef\n        .document(FirebaseAuth.getInstance().currentUser!!.uid)\n\n\n    fun uploadUserProfileImage(image: ByteArray, imageName: String): UploadTask {\n        val imageRef = firebaseStorage.child(\"profileImages\")\n            .child(firebaseAuth.currentUser!!.uid)\n            .child(imageName)\n\n        return imageRef.putBytes(image)\n\n    }\n\n    fun getImageUrl(\n        firstName: String,\n        lastName: String,\n        email: String,\n        imageName: String,\n        onResult: (User?, String?) -> Unit,\n    ) {\n        if (imageName.isNotEmpty())\n            firebaseStorage.child(\"profileImages\")\n                .child(firebaseAuth.currentUser!!.uid)\n                .child(imageName).downloadUrl.addOnCompleteListener {\n                    if (it.isSuccessful) {\n                        val imageUrl = it.result.toString()\n                        val user = User(firstName, lastName, email, imageUrl)\n                        onResult(user, null)\n                    } else\n                        onResult(null, it.exception.toString())\n\n                } else {\n            val user = User(firstName, lastName, email, \"\")\n            onResult(user, null)\n        }\n    }\n\n    fun updateUserInformation(user: User) =\n        Firebase.firestore.runTransaction { transaction ->\n            val userPath = usersCollectionRef.document(Firebase.auth.currentUser!!.uid)\n            if (user.imagePath.isNotEmpty()) {\n                transaction.set(userPath, user)\n            } else {\n                val imagePath = transaction.get(userPath)[\"imagePath\"] as String\n                user.imagePath = imagePath\n                transaction.set(userPath, user)\n            }\n\n        }\n\n\n    fun getUserOrders() = usersCollectionRef\n        .document(FirebaseAuth.getInstance().currentUser!!.uid)\n        .collection(ORDERS)\n        .orderBy(\"date\", Query.Direction.DESCENDING)\n        .get()\n\n    fun resetPassword(email: String) = firebaseAuth.sendPasswordResetEmail(email)\n\n    fun getOrderAddressAndProducts(\n        order: Order,\n        address: (Address?, String?) -> Unit,\n        products: (List<CartProduct>?, String?) -> Unit\n    ) {\n        usersCollectionRef\n            .document(Firebase.auth.currentUser!!.uid).collection(ORDERS)\n            .whereEqualTo(\"id\", order.id)\n            .get().addOnCompleteListener {\n                if (it.isSuccessful) {\n                    val id = it.result?.documents?.get(0)?.id\n                    usersCollectionRef.document(Firebase.auth.currentUser!!.uid)\n                        .collection(ORDERS).document(id!!).collection(ADDRESS_COLLECTION).get()\n                        .addOnCompleteListener { it2 ->\n                            if (it2.isSuccessful) {\n                                val address2 = it2.result?.toObjects(Address::class.java)\n                                Log.d(\"test\", address2!!.size.toString())\n                                address(address2?.get(0), null)\n                            } else\n                                address(null, it2.exception.toString())\n                        }\n\n                    usersCollectionRef.document(Firebase.auth.currentUser!!.uid)\n                        .collection(ORDERS).document(id).collection(PRODUCTS_COLLECTION).get()\n                        .addOnCompleteListener { it2 ->\n                            if (it2.isSuccessful) {\n                                val products2 = it2.result?.toObjects(CartProduct::class.java)\n                                Log.d(\"test\", products2!!.size.toString())\n                                products(products2, null)\n                            } else\n                                products(null, it2.exception.toString())\n                        }\n\n\n                } else {\n                    address(null, it.exception.toString())\n                    products(null, it.exception.toString())\n                }\n            }\n    }\n\n    //true -> already existed account\n    //false -> new account\n    fun checkUserByEmail(email: String, onResult: (String?, Boolean?) -> Unit) {\n        usersCollectionRef.whereEqualTo(\"email\", email).get()\n            .addOnCompleteListener {\n                if (it.isSuccessful) {\n                    val user = it.result.toObjects(User::class.java)\n                    if (user.isEmpty())\n                        onResult(null, false)\n                    else\n                        onResult(null, true)\n                } else\n                    onResult(it.exception.toString(), null)\n            }\n    }\n\n    fun signInWithGoogle(credential: AuthCredential) =\n        FirebaseAuth.getInstance().signInWithCredential(credential)\n\n    fun fetchStore(uid:String) = storesCollection.whereEqualTo(\"uid\",uid).get()\n\n\n\n    fun logout() = Firebase.auth.signOut()\n\n\n\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt b/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt
---- a/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt	(date 1695479912967)
-@@ -25,6 +25,7 @@
- 
- 
- import com.google.android.gms.tasks.Task
-+import com.google.android.gms.tasks.TaskCompletionSource
- import com.google.firebase.auth.AuthCredential
- import com.google.firebase.auth.FirebaseAuth
- import com.google.firebase.auth.ktx.auth
-@@ -145,9 +146,28 @@
- 
-     }
- 
--    fun getMaterials(page: Long): Task<QuerySnapshot> {
--        return FirebaseFirestore.getInstance().collection("Materials").limit(page).get()
-+    fun getMaterials(page: Long): Task<List<Material>> {
-+        val taskCompletionSource = TaskCompletionSource<List<Material>>()
-+
-+        FirebaseFirestore.getInstance().collection("Materials").limit(page).get()
-+            .addOnSuccessListener { querySnapshot ->
-+                val materials = querySnapshot.documents.mapNotNull { document ->
-+                    val material = document.toObject(Material::class.java)
-+                    material?.id = document.id // Set the id of the Material object
-+                    material
-+                }
-+                // Set the result to the TaskCompletionSource
-+                taskCompletionSource.setResult(materials)
-+            }
-+            .addOnFailureListener { exception ->
-+                // Set the exception to the TaskCompletionSource
-+                taskCompletionSource.setException(exception)
-+            }
-+
-+        return taskCompletionSource.task
-     }
-+
-+
- 
- 
- 
-Index: app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.settings\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.LinearLayout\nimport android.widget.Toast\nimport androidx.lifecycle.Observer\nimport androidx.navigation.fragment.findNavController\nimport androidx.navigation.fragment.navArgs\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.SpacingDecorator.VerticalSpacingItemDecorator\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.CartRecyclerAdapter\nimport com.example.kleine.databinding.FragmentOrderDetailsBinding\nimport com.example.kleine.model.Address\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.ORDER_CONFIRM_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_Delivered_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_PLACED_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_SHIPPED_STATE\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\n\nclass OrderDetails : Fragment() {\n    val TAG = \"OrderDetails\"\n    val args by navArgs<OrderDetailsArgs>()\n    private lateinit var binding: FragmentOrderDetailsBinding\n    private lateinit var viewModel: ShoppingViewModel\n    private lateinit var productsAdapter: CartRecyclerAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getOrderAddressAndProducts(args.order)\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentOrderDetailsBinding.inflate(inflater)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        binding.tvOrderId.text = resources.getText(R.string.g_order)\n            .toString().plus(\"# ${args.order.id}\")\n        setupRecyclerview()\n        observeOrderAddress()\n\n        observeProducts()\n        onCloseImageClick()\n        setupStepView()\n\n    }\n\n    private fun onCloseImageClick() {\n        binding.imgCloseOrder.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun observeProducts() {\n        viewModel.orderProducts.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n\n                is Resource.Loading -> {\n                    showProductsLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideProductsLoading()\n                    productsAdapter.differ.submitList(response.data)\n                    binding.tvTotalprice.text = args.order.totalPrice\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideAddressLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@Observer\n                }\n            }\n\n        })\n    }\n\n    private fun hideProductsLoading() {\n        binding.apply {\n            progressbarOrder.visibility = View.GONE\n            rvProducts.visibility = View.VISIBLE\n            tvProducts.visibility = View.VISIBLE\n            linear.visibility = View.VISIBLE\n            line1.visibility = View.VISIBLE\n        }\n    }\n\n    private fun showProductsLoading() {\n        binding.apply {\n            progressbarOrder.visibility = View.VISIBLE\n            rvProducts.visibility = View.INVISIBLE\n            tvProducts.visibility = View.INVISIBLE\n            linear.visibility = View.INVISIBLE\n            line1.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun setupRecyclerview() {\n        productsAdapter = CartRecyclerAdapter(\"From Order Detail\")\n        binding.rvProducts.apply {\n            adapter = productsAdapter\n            layoutManager = LinearLayoutManager(context)\n            addItemDecoration(VerticalSpacingItemDecorator(23))\n        }\n    }\n\n    private fun observeOrderAddress() {\n        viewModel.orderAddress.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n\n                is Resource.Loading -> {\n                    showAddressLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideAddressLoading()\n                    val address = response.data\n                    binding.apply {\n                        tvFullName.text = address?.fullName\n                        tvAddress.text = address?.street\n                            .plus(\", ${address?.city}\")\n                            .plus(\", ${address?.state}\")\n                        tvPhoneNumber.text = address?.phone\n                    }\n\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideAddressLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@Observer\n                }\n            }\n\n        })\n    }\n\n    private fun hideAddressLoading() {\n        binding.apply {\n            progressbarOrder.visibility = View.GONE\n            stepView.visibility = View.VISIBLE\n            tvShoppingAddresses.visibility = View.VISIBLE\n            linearAddress.visibility = View.VISIBLE\n        }\n    }\n\n    private fun showAddressLoading() {\n        binding.apply {\n            binding.apply {\n                progressbarOrder.visibility = View.VISIBLE\n                stepView.visibility = View.INVISIBLE\n                tvShoppingAddresses.visibility = View.INVISIBLE\n                linearAddress.visibility = View.INVISIBLE\n            }\n        }\n    }\n\n    private fun setupStepView() {\n        val state = when (args.order.state) {\n            ORDER_PLACED_STATE -> 1\n            ORDER_CONFIRM_STATE -> 2\n            ORDER_SHIPPED_STATE -> 3\n            ORDER_Delivered_STATE -> 4\n            else -> {\n                2\n            }\n        }\n\n        Log.d(\"test2\", args.order.state)\n        Log.d(\"test2\", state.toString())\n        val steps = arrayOf<String>(\n            resources.getText(R.string.g_order_placed).toString(),\n            resources.getText(R.string.g_confirm).toString(),\n            resources.getText(R.string.g_shipped).toString(),\n            resources.getText(R.string.g_delivered).toString()\n        )\n\n        binding.stepView.apply {\n            getState().stepsNumber(4)\n                .steps(steps.toMutableList())\n                .commit()\n            if (state == 4) {\n                go(3,false)\n                done(true)\n            }else{\n                go(state, false)\n            }\n\n        }\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt b/app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt
---- a/app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt	(date 1695479912976)
-@@ -52,7 +52,6 @@
-         binding.tvOrderId.text = resources.getText(R.string.g_order)
-             .toString().plus("# ${args.order.id}")
-         setupRecyclerview()
--        observeOrderAddress()
- 
-         observeProducts()
-         onCloseImageClick()
-@@ -126,43 +125,7 @@
-         }
-     }
- 
--    private fun observeOrderAddress() {
--        viewModel.orderAddress.observe(viewLifecycleOwner, Observer { response ->
--            when (response) {
--
--                is Resource.Loading -> {
--                    showAddressLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideAddressLoading()
--                    val address = response.data
--                    binding.apply {
--                        tvFullName.text = address?.fullName
--                        tvAddress.text = address?.street
--                            .plus(", ${address?.city}")
--                            .plus(", ${address?.state}")
--                        tvPhoneNumber.text = address?.phone
--                    }
--
--                    return@Observer
--                }
- 
--                is Resource.Error -> {
--                    hideAddressLoading()
--                    Toast.makeText(
--                        activity,
--                        resources.getText(R.string.error_occurred),
--                        Toast.LENGTH_SHORT
--                    ).show()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--
--        })
--    }
- 
-     private fun hideAddressLoading() {
-         binding.apply {
-Index: app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.viewmodel.shopping\n\nimport android.util.Log\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.kleine.firebaseDatabase.FirebaseDb\nimport com.example.kleine.model.*\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.ACCESSORY_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CHAIR_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CUPBOARD_CATEGORY\nimport com.example.kleine.util.Constants.Companion.FURNITURE_CATEGORY\nimport com.example.kleine.util.Constants.Companion.TABLES_CATEGORY\nimport com.google.firebase.firestore.FirebaseFirestore\nimport java.util.*\n\nprivate const val TAG = \"ShoppingViewModel\"\n\nclass ShoppingViewModel(\n    private val firebaseDatabase: FirebaseDb\n) : ViewModel() {\n\n\n    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()\n//    val materialsLiveData: MutableLiveData<Resource<List<Material>>> = MutableLiveData()\n    val materials: MutableLiveData<Resource<List<Material>>> = MutableLiveData()\n\n    private val _materialsLiveData = MutableLiveData<Resource<List<Material>>>()\n    val materialsLiveData: LiveData<Resource<List<Material>>> get() = _materialsLiveData\n\n\n//    val materials = MutableLiveData<Resource<List<Material>>>()\n\n    val clothes = MutableLiveData<List<Product>>()\n    val emptyClothes = MutableLiveData<Boolean>()\n    val bestDeals = MutableLiveData<List<Product>>()\n    val emptyBestDeals = MutableLiveData<Boolean>()\n\n    val home = MutableLiveData<Resource<List<Product>>>()\n\n    val chairs = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedChairs = MutableLiveData<Resource<List<Product>>>()\n\n    val tables = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedTables = MutableLiveData<Resource<List<Product>>>()\n\n    val accessory = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedAccessories = MutableLiveData<Resource<List<Product>>>()\n\n    val furniture = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedFurniture = MutableLiveData<Resource<List<Product>>>()\n\n    val mostRequestedCupboard = MutableLiveData<Resource<List<Product>>>()\n    val cupboard = MutableLiveData<Resource<List<Product>>>()\n    val addToCart = MutableLiveData<Resource<Boolean>>()\n\n    val addAddress = MutableLiveData<Resource<Address>>()\n    val updateAddress = MutableLiveData<Resource<Address>>()\n    val deleteAddress = MutableLiveData<Resource<Address>>()\n\n    val profile = MutableLiveData<Resource<User>>()\n\n    val uploadProfileImage = MutableLiveData<Resource<String>>()\n    val updateUserInformation = MutableLiveData<Resource<User>>()\n\n    val userOrders = MutableLiveData<Resource<List<Order>>>()\n\n    val passwordReset = MutableLiveData<Resource<String>>()\n\n    val orderAddress = MutableLiveData<Resource<Address>>()\n    val orderProducts = MutableLiveData<Resource<List<CartProduct>>>()\n\n    val categories = MutableLiveData<Resource<List<Category>>>()\n\n\n    val search = MutableLiveData<Resource<List<Product>>>()\n\n    private var homePage: Long = 10\n    private var clothesPaging: Long = 5\n    private var bestDealsPaging: Long = 5\n\n    private var cupboardPaging: Long = 4\n    private var mostOrderCupboardPaging: Long = 5\n\n    private var mostRequestedChairsPage: Long = 3\n    private var chairsPage: Long = 4\n\n    private var mostRequestedTablePage: Long = 3\n    private var tablePage: Long = 4\n\n    private var mostRequestedAccessoryPage: Long = 3\n    private var accessoryPage: Long = 4\n\n    private var mostRequestedFurniturePage: Long = 3\n    private var furniturePage: Long = 4\n\n\n    init {\n        getClothesProducts()\n        getBestDealsProduct()\n        getHomeProduct()\n    }\n\n\n    // Fetch Materials from Firebase\n    fun getMaterials() {\n        _materialsLiveData.postValue(Resource.Loading())\n\n        firebaseDatabase.getMaterials(10)\n            .addOnSuccessListener { documents ->\n                val materials = documents.toObjects(Material::class.java)\n                _materialsLiveData.postValue(Resource.Success(materials))\n            }\n            .addOnFailureListener { exception ->\n                _materialsLiveData.postValue(Resource.Error(exception.message ?: \"An unknown error occurred\"))\n            }\n    }\n\n\n\n    private var furnitureProducts: List<Product>? = null\n    fun getFurniture(size: Int = 0) {\n        if (furnitureProducts != null && size == 0) {\n            furniture.postValue(Resource.Success(furnitureProducts))\n            return\n        }\n        furniture.postValue(Resource.Loading())\n        shouldPaging(FURNITURE_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                tables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(FURNITURE_CATEGORY, furniturePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                furnitureProducts = productsList\n                                furniture.postValue(Resource.Success(productsList))\n                                furniturePage += 4\n\n                            }\n                        } else\n                            furniture.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                furniture.postValue(Resource.Error(\"Cannot paging\"))\n\n        }\n    }\n\n    private var mostRequestedFurnitureProducts: List<Product>? = null\n    fun getMostRequestedFurniture(size: Int = 0) {\n        if (mostRequestedFurnitureProducts != null && size == 0) {\n            mostRequestedFurniture.postValue(Resource.Success(mostRequestedFurnitureProducts))\n            return\n        }\n        mostRequestedFurniture.postValue(Resource.Loading())\n        shouldPaging(FURNITURE_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedFurniture.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(\n                    FURNITURE_CATEGORY,\n                    mostRequestedFurniturePage\n                )\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedFurnitureProducts = productsList\n                                mostRequestedFurniture.postValue(Resource.Success(productsList))\n                                mostRequestedFurniturePage += 4\n\n                            }\n                        } else\n                            mostRequestedFurniture.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedFurniture.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var accessoriesProducts: List<Product>? = null\n    fun getAccessories(size: Int = 0) {\n        if (accessoriesProducts != null && size == 0) {\n            accessory.postValue(Resource.Success(accessoriesProducts))\n            return\n        }\n        accessory.postValue(Resource.Loading())\n        shouldPaging(ACCESSORY_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                Log.d(\"test\", \"paging\")\n                firebaseDatabase.getProductsByCategory(ACCESSORY_CATEGORY, accessoryPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                accessory.postValue(Resource.Success(productsList))\n                                accessoriesProducts = productsList\n                                accessoryPage += 4\n\n                            }\n                        } else\n                            accessory.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else {\n                accessory.postValue(Resource.Error(\"Cannot page\"))\n            }\n        }\n    }\n\n    private var mostRequestedAccessoriesProducts: List<Product>? = null\n    fun getMostRequestedAccessories(size: Int = 0) {\n        if (mostRequestedAccessoriesProducts != null && size == 0) {\n            mostRequestedAccessories.postValue(Resource.Success(mostRequestedAccessoriesProducts))\n            return\n        }\n        mostRequestedAccessories.postValue(Resource.Loading())\n        shouldPaging(ACCESSORY_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(\n                    ACCESSORY_CATEGORY,\n                    mostRequestedAccessoryPage\n                )\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedAccessories.postValue(Resource.Success(productsList))\n                                mostRequestedAccessoriesProducts = productsList\n                                mostRequestedAccessoryPage += 4\n\n                            }\n                        } else\n                            mostRequestedAccessories.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedAccessories.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var chairsProducts: List<Product>? = null\n    fun getChairs(size: Int = 0) {\n        if (chairsProducts != null && size == 0) {\n            chairs.postValue(Resource.Success(chairsProducts))\n            return\n        }\n        chairs.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(CHAIR_CATEGORY, chairsPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                chairsProducts = productsList\n                                chairs.postValue(Resource.Success(productsList))\n                                chairsPage += 4\n\n                            }\n                        } else\n                            chairs.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                chairs.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedChairsProducts: List<Product>? = null\n    fun getMostRequestedChairs(size: Int = 0) {\n        if (mostRequestedChairsProducts != null && size == 0) {\n            mostRequestedChairs.postValue(Resource.Success(chairsProducts))\n            return\n        }\n        mostRequestedChairs.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(CHAIR_CATEGORY, mostRequestedChairsPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedChairsProducts = productsList\n                                mostRequestedChairs.postValue(Resource.Success(productsList))\n                                mostRequestedChairsPage += 4\n\n                            }\n                        } else\n                            mostRequestedChairs.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                chairs.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var tablesProducts: List<Product>? = null\n    fun getTables(size: Int = 0) {\n        if (tablesProducts != null && size == 0) {\n            tables.postValue(Resource.Success(tablesProducts))\n            return\n        }\n        tables.postValue(Resource.Loading())\n        shouldPaging(TABLES_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                tables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(TABLES_CATEGORY, tablePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                tablesProducts = productsList\n                                tables.postValue(Resource.Success(productsList))\n                                tablePage += 4\n\n                            }\n                        } else\n                            tables.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                home.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedTablesProducts: List<Product>? = null\n    fun getMostRequestedTables(size: Int = 0) {\n        if (mostRequestedTablesProducts != null && size == 0) {\n            tables.postValue(Resource.Success(mostRequestedTablesProducts))\n            return\n        }\n        mostRequestedTables.postValue(Resource.Loading())\n        shouldPaging(TABLES_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedTables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(TABLES_CATEGORY, mostRequestedTablePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedTablesProducts = productsList\n                                mostRequestedTables.postValue(Resource.Success(productsList))\n                                mostRequestedTablePage += 3\n\n                            }\n                        } else\n                            mostRequestedTables.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedTables.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n\n    fun getClothesProducts() =\n        firebaseDatabase.getClothesProducts(clothesPaging).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result\n                if (!documents!!.isEmpty) {\n                    val productsList = documents.toObjects(Product::class.java)\n                    clothes.postValue(productsList)\n                    clothesPaging += 5\n                } else\n                    emptyClothes.postValue(true)\n\n            } else\n                Log.e(TAG, it.exception.toString())\n\n        }\n\n    fun getBestDealsProduct() =\n        firebaseDatabase.getBestDealsProducts(bestDealsPaging).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result\n                if (!documents!!.isEmpty) {\n                    val productsList = documents.toObjects(Product::class.java)\n                    bestDeals.postValue(productsList)\n                    bestDealsPaging += 5\n                } else\n                    emptyBestDeals.postValue(true)\n\n            } else\n                Log.e(TAG, it.exception.toString())\n        }\n\n    fun getHomeProduct(size: Int = 0) {\n        home.postValue(Resource.Loading())\n        shouldPagingHome(size)\n        { shouldPaging ->\n            if (shouldPaging) {\n                home.postValue(Resource.Loading())\n                firebaseDatabase.getHomeProducts(homePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                home.postValue(Resource.Success(productsList))\n                                homePage += 4\n\n                            }\n                        } else\n                            home.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                home.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedCupboardProducts: List<Product>? = null\n    fun getMostRequestedCupboards(size: Int = 0) {\n        if (mostRequestedCupboardProducts != null && size == 0) {\n            mostRequestedCupboard.postValue(Resource.Success(mostRequestedCupboardProducts))\n            return\n        }\n\n        mostRequestedCupboard.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedCupboard.postValue(Resource.Loading())\n                firebaseDatabase.getMostOrderedCupboard(mostOrderCupboardPaging)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedCupboardProducts = productsList\n                                mostRequestedCupboard.postValue(Resource.Success(productsList))\n                                mostOrderCupboardPaging += 5\n\n                            }\n                        } else\n                            mostRequestedCupboard.postValue(Resource.Error(it.exception.toString()))\n                    }\n\n\n            } else\n                mostRequestedCupboard.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var dCupboardProducts: List<Product>? = null\n    fun getCupboardProduct(size: Int = 0) {\n        if (dCupboardProducts != null && size == 0) {\n            cupboard.postValue(Resource.Success(dCupboardProducts))\n            return\n        }\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                cupboard.postValue(Resource.Loading())\n                firebaseDatabase.getCupboards(cupboardPaging).addOnCompleteListener {\n                    if (it.isSuccessful) {\n\n                        val documents = it.result\n                        if (!documents!!.isEmpty) {\n                            val productsList = documents.toObjects(Product::class.java)\n                            dCupboardProducts = productsList\n                            cupboard.postValue(Resource.Success(productsList))\n                            cupboardPaging += 10\n                        }\n\n                    } else\n                        cupboard.postValue(Resource.Error(it.exception.toString()))\n                }\n            } else\n                cupboard.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    /*\n    * TODO : Move these functions to firebaseDatabase class\n     */\n\n    private fun shouldPaging(category: String, listSize: Int, onSuccess: (Boolean) -> Unit) {\n        FirebaseFirestore.getInstance()\n            .collection(\"categories\")\n            .whereEqualTo(\"name\", category).get().addOnSuccessListener {\n                val tempCategory = it.toObjects(Category::class.java)\n                val products = tempCategory[0].products\n                Log.d(\"test\", \" $category : prodcuts ${tempCategory[0].products}, size $listSize\")\n                if (listSize == products)\n                    onSuccess(false).also { Log.d(TAG, \"$category Paging:false\") }\n                else\n                    onSuccess(true).also { Log.d(TAG, \"$category Paging:true\") }\n            }\n    }\n\n    private fun shouldPagingHome(listSize: Int, onSuccess: (Boolean) -> Unit) {\n        FirebaseFirestore.getInstance()\n            .collection(\"categories\").get().addOnSuccessListener {\n                var productsCount = 0\n                it.toObjects(Category::class.java).forEach { category ->\n                    productsCount += category.products!!.toInt()\n                }\n\n                if (listSize == productsCount)\n                    onSuccess(false)\n                else\n                    onSuccess(true)\n\n            }\n    }\n\n\n    private fun checkIfProductAlreadyAdded(\n        product: CartProduct,\n        onSuccess: (Boolean, String) -> Unit\n    ) {\n        addToCart.postValue(Resource.Loading())\n        firebaseDatabase.getProductInCart(product).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result!!.documents\n                if (documents.isNotEmpty())\n                    onSuccess(true, documents[0].id) // true ---> product is already in cart\n                else\n                    onSuccess(false, \"\") // false ---> product is not in cart\n            } else\n                addToCart.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n\n    fun addProductToCart(product: CartProduct) =\n        checkIfProductAlreadyAdded(product) { isAdded, id ->\n            if (isAdded) {\n                firebaseDatabase.increaseProductQuantity(id).addOnCompleteListener {\n                    if (it.isSuccessful)\n                        addToCart.postValue(Resource.Success(true))\n                    else\n                        addToCart.postValue(Resource.Error(it.exception!!.message))\n\n                }\n            } else {\n                firebaseDatabase.addProductToCart(product).addOnCompleteListener {\n                    if (it.isSuccessful)\n                        addToCart.postValue(Resource.Success(true))\n                    else\n                        addToCart.postValue(Resource.Error(it.exception!!.message))\n                }\n            }\n        }\n\n\n    fun saveAddress(address: Address) {\n        addAddress.postValue(Resource.Loading())\n        firebaseDatabase.saveNewAddress(address)?.addOnCompleteListener {\n            if (it.isSuccessful)\n                addAddress.postValue(Resource.Success(address))\n            else\n                addAddress.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun updateAddress(oldAddress: Address, newAddress: Address) {\n        updateAddress.postValue(Resource.Loading())\n        firebaseDatabase.findAddress(oldAddress).addOnCompleteListener { addressResponse ->\n            if (addressResponse.isSuccessful) {\n                val documentUid = addressResponse.result!!.documents[0].id\n                firebaseDatabase.updateAddress(documentUid, newAddress)?.addOnCompleteListener {\n                    if (it.isSuccessful)\n                        updateAddress.postValue(Resource.Success(newAddress))\n                    else\n                        updateAddress.postValue(Resource.Error(it.exception.toString()))\n\n                }\n\n            } else\n                updateAddress.postValue(Resource.Error(addressResponse.exception.toString()))\n\n        }\n    }\n\n    fun deleteAddress(address: Address) {\n        deleteAddress.postValue(Resource.Loading())\n        firebaseDatabase.findAddress(address).addOnCompleteListener { addressResponse ->\n            if (addressResponse.isSuccessful) {\n                val documentUid = addressResponse.result!!.documents[0].id\n                firebaseDatabase.deleteAddress(documentUid, address)?.addOnCompleteListener {\n                    if (it.isSuccessful)\n                        deleteAddress.postValue(Resource.Success(address))\n                    else\n                        deleteAddress.postValue(Resource.Error(it.exception.toString()))\n\n                }\n\n            } else\n                deleteAddress.postValue(Resource.Error(addressResponse.exception.toString()))\n\n        }\n    }\n\n    private val user: User? = null\n    fun getUser() {\n        if (user != null) {\n            profile.postValue(Resource.Success(user))\n            return\n        }\n\n        profile.postValue(Resource.Loading())\n        firebaseDatabase.getUser().addSnapshotListener { value, error ->\n            if (error != null)\n                profile.postValue(Resource.Error(error.message))\n            else\n                profile.postValue(Resource.Success(value?.toObject(User::class.java)))\n\n        }\n    }\n\n    fun uploadProfileImage(image: ByteArray) {\n        Log.d(\"ViewModel\", \"Image byte array size: ${image.size}\")\n        uploadProfileImage.postValue(Resource.Loading())\n        val name = UUID.nameUUIDFromBytes(image).toString()\n        Log.d(\"ViewModel\", \"Generated UUID: $name\")\n\n        firebaseDatabase.uploadUserProfileImage(image, name).addOnCompleteListener {\n            if (it.isSuccessful) {\n                Log.d(\"ViewModel\", \"Upload successful with name: $name\")\n                uploadProfileImage.postValue(Resource.Success(name))\n            } else {\n                Log.e(\"ViewModel\", \"Upload failed: ${it.exception}\")\n                uploadProfileImage.postValue(Resource.Error(it.exception.toString()))\n            }\n        }\n    }\n\n\n    fun updateInformation(firstName: String, lastName: String, email: String, imageName: String) {\n        updateUserInformation.postValue(Resource.Loading())\n\n        firebaseDatabase.getImageUrl(firstName, lastName, email, imageName) { user, exception ->\n\n            if (exception != null)\n                updateUserInformation.postValue(Resource.Error(exception))\n                    .also { Log.d(\"test1\", \"up\") }\n            else\n                user?.let {\n                    onUpdateInformation(user).also { Log.d(\"test1\", \"down\") }\n                }\n        }\n    }\n\n    private fun onUpdateInformation(user: User) {\n        firebaseDatabase.updateUserInformation(user).addOnCompleteListener {\n            if (it.isSuccessful)\n                updateUserInformation.postValue(Resource.Success(user))\n            else\n                updateUserInformation.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n    fun getUserOrders() {\n        userOrders.postValue(Resource.Loading())\n        firebaseDatabase.getUserOrders().addOnCompleteListener {\n            if (it.isSuccessful)\n                userOrders.postValue(Resource.Success(it.result?.toObjects(Order::class.java)))\n            else\n                userOrders.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun resetPassword(email: String) {\n        passwordReset.postValue(Resource.Loading())\n        firebaseDatabase.resetPassword(email).addOnCompleteListener {\n            if (it.isSuccessful)\n                passwordReset.postValue(Resource.Success(email))\n            else\n                passwordReset.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun getOrderAddressAndProducts(order: Order) {\n        orderAddress.postValue(Resource.Loading())\n        orderProducts.postValue(Resource.Loading())\n        firebaseDatabase.getOrderAddressAndProducts(order, { address, aError ->\n            if (aError != null)\n                orderAddress.postValue(Resource.Error(aError))\n            else\n                orderAddress.postValue(Resource.Success(address))\n        }, { products, pError ->\n\n            if (pError != null)\n                orderProducts.postValue(Resource.Error(pError))\n            else\n                orderProducts.postValue(Resource.Success(products))\n\n        })\n    }\n\n    fun searchProducts(searchQuery: String) {\n        search.postValue(Resource.Loading())\n        firebaseDatabase.searchProducts(searchQuery).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val productsList = it.result!!.toObjects(Product::class.java)\n                search.postValue(Resource.Success(productsList))\n\n            } else\n                search.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n    private var categoriesSafe: List<Category>? = null\n    fun getCategories() {\n        if(categoriesSafe != null){\n            categories.postValue(Resource.Success(categoriesSafe))\n            return\n        }\n        categories.postValue(Resource.Loading())\n        firebaseDatabase.getCategories().addOnCompleteListener {\n            if (it.isSuccessful) {\n                val categoriesList = it.result!!.toObjects(Category::class.java)\n                categoriesSafe = categoriesList\n                categories.postValue(Resource.Success(categoriesList))\n            } else\n                categories.postValue(Resource.Error(it.exception.toString()))\n        }\n\n\n    }\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt b/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt
---- a/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt	(date 1695479913051)
-@@ -102,14 +102,13 @@
-         getHomeProduct()
-     }
- 
--
-     // Fetch Materials from Firebase
-     fun getMaterials() {
-         _materialsLiveData.postValue(Resource.Loading())
- 
-         firebaseDatabase.getMaterials(10)
--            .addOnSuccessListener { documents ->
--                val materials = documents.toObjects(Material::class.java)
-+            .addOnSuccessListener { materials ->
-+                // materials is already a List<Material>
-                 _materialsLiveData.postValue(Resource.Success(materials))
-             }
-             .addOnFailureListener { exception ->
-@@ -119,6 +118,7 @@
- 
- 
- 
-+
-     private var furnitureProducts: List<Product>? = null
-     fun getFurniture(size: Int = 0) {
-         if (furnitureProducts != null && size == 0) {
-Index: app/src/main/res/navigation/shopping_nav_graph.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/shopping_nav_graph\"\n    app:startDestination=\"@id/homeFragment\">\n\n    <fragment\n        android:id=\"@+id/homeFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.HomeFragment\"\n        android:label=\"fragment_home\"\n        tools:layout=\"@layout/fragment_home\">\n        <action\n            android:id=\"@+id/action_homeFragment_to_searchFragment\"\n            app:destination=\"@id/searchFragment\"\n            app:popUpTo=\"@id/homeFragment\" />\n        <argument\n            android:name=\"position\"\n            app:argType=\"integer\"\n            android:defaultValue=\"0\" />\n    </fragment>\n\n    <action\n        android:id=\"@+id/action_homeFragment_to_materialDetailsFragment\"\n        app:destination=\"@id/materialDetailsFragment\"\n        app:enterAnim=\"@anim/nav_default_enter_anim\"\n        app:exitAnim=\"@anim/nav_default_exit_anim\"\n        app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n        app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n\n\n    <fragment\n        android:id=\"@+id/materialDetailsFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.MaterialPreviewFragment\"\n        android:label=\"Material Details\">\n\n        <argument\n            android:name=\"material\"\n            app:argType=\"com.example.kleine.model.Material\"\n            android:defaultValue=\"@null\"\n            app:nullable=\"true\" />\n\n\n    </fragment>\n\n\n    <fragment\n        android:id=\"@+id/searchFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.SearchFragment\"\n        android:label=\"fragment_search\"\n        tools:layout=\"@layout/fragment_search\">\n\n        <action\n            android:id=\"@+id/action_searchFragment_to_homeFragment\"\n            app:destination=\"@id/homeFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/profileFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.ProfileFragment\"\n        android:label=\"fragment_profile\"\n        tools:layout=\"@layout/fragment_profile\">\n        <action\n            android:id=\"@+id/action_profileFragment_to_billingFragment\"\n            app:destination=\"@id/billingFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_editUserInformation\"\n            app:destination=\"@id/editUserInformation\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_allOrdersFragment\"\n            app:destination=\"@id/allOrdersFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_languageFragment\"\n            app:destination=\"@id/languageFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_viewPartnershipFragment\"\n            app:destination=\"@id/viewPartnershipFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_helpFragment\"\n            app:destination=\"@id/helpFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_joinPartnerFragment\"\n            app:destination=\"@id/joinPartnerFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_adminDashboardFragment\"\n            app:destination=\"@id/adminDashboardFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_tempCommentFragment\"\n            app:destination=\"@id/tempCommentFragment\">\n            <argument\n                android:name=\"documentId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n        </action>\n\n    </fragment>\n    <fragment\n        android:id=\"@+id/cartFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.CartFragment\"\n        android:label=\"fragment_cart\"\n        tools:layout=\"@layout/fragment_cart\">\n\n        <action\n            android:id=\"@+id/action_cartFragment_to_billingFragment\"\n            app:destination=\"@id/billingFragment\" />\n    </fragment>\n\n    <fragment\n        android:id=\"@+id/billingFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.BillingFragment\"\n        android:label=\"fragment_billing\"\n        tools:layout=\"@layout/fragment_billing\">\n        <action\n            android:id=\"@+id/action_billingFragment_to_addressFragment\"\n            app:destination=\"@id/addressFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\" />\n        <argument\n            android:name=\"clickFlag\"\n            app:argType=\"string\" />\n        <argument\n            android:name=\"price\"\n            android:defaultValue=\"null\"\n            app:argType=\"string\"\n            app:nullable=\"true\" />\n        <argument\n            android:name=\"products\"\n            android:defaultValue=\"@null\"\n            app:argType=\"com.example.kleine.model.CartProductsList\"\n            app:nullable=\"true\" />\n        <action\n            android:id=\"@+id/action_billingFragment_to_orderCompletion\"\n            app:destination=\"@id/orderCompletion\"\n            app:popUpTo=\"@id/billingFragment\"\n            app:popUpToInclusive=\"true\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/addressFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.AddressFragment\"\n        android:label=\"fragment_address\"\n        tools:layout=\"@layout/fragment_address\">\n\n        <argument\n            android:name=\"address\"\n            android:defaultValue=\"@null\"\n            app:argType=\"com.example.kleine.model.Address\"\n            app:nullable=\"true\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/orderCompletion\"\n        android:name=\"com.example.kleine.fragments.shopping.OrderCompletion\"\n        android:label=\"fragment_order_completion\"\n        tools:layout=\"@layout/fragment_order_completion\">\n        <argument\n            android:name=\"order_completion_flag\"\n            app:argType=\"string\" />\n        <argument\n            android:name=\"orderNumber\"\n            android:defaultValue=\"null\"\n            app:argType=\"string\"\n            app:nullable=\"true\" />\n        <action\n            android:id=\"@+id/action_orderCompletion_to_orderDetails\"\n            app:destination=\"@id/orderDetails\" />\n        <argument\n            android:name=\"order\"\n            app:argType=\"com.example.kleine.model.Order\"\n            app:nullable=\"true\"\n            android:defaultValue=\"@null\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/editUserInformation\"\n        android:name=\"com.example.kleine.fragments.settings.EditUserInformationFragment\"\n        android:label=\"fragment_edit_user_information\"\n        tools:layout=\"@layout/fragment_edit_user_information\">\n        <argument\n            android:name=\"user\"\n            app:argType=\"com.example.kleine.model.User\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/allOrdersFragment\"\n        android:name=\"com.example.kleine.fragments.settings.AllOrdersFragment\"\n        android:label=\"fragment_all_orders\"\n        tools:layout=\"@layout/fragment_all_orders\" >\n        <action\n            android:id=\"@+id/action_allOrdersFragment_to_orderDetails\"\n            app:destination=\"@id/orderDetails\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/orderDetails\"\n        android:name=\"com.example.kleine.fragments.settings.OrderDetails\"\n        android:label=\"fragment_order_details\"\n        tools:layout=\"@layout/fragment_order_details\" >\n        <argument\n            android:name=\"order\"\n            app:argType=\"com.example.kleine.model.Order\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/languageFragment\"\n        android:name=\"com.example.kleine.fragments.settings.LanguageFragment\"\n        android:label=\"fragment_language\"\n        tools:layout=\"@layout/fragment_language\" />\n    <fragment\n        android:id=\"@+id/viewPartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.ViewPartnershipFragment\"\n        android:label=\"fragment_view_partnership\"\n        tools:layout=\"@layout/fragment_view_partnership\">\n        <action\n            android:id=\"@+id/action_viewPartnershipFragment_to_partnershipViewMaterialFragment\"\n            app:destination=\"@id/partnershipViewMaterialFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_viewPartnershipFragment_to_updatePartnershipFragment\"\n            app:destination=\"@id/updatePartnershipFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/helpFragment\"\n        android:name=\"com.example.kleine.fragments.settings.HelpFragment\"\n        android:label=\"HelpFragment\"\n        tools:layout=\"@layout/fragment_help\"/>\n    <fragment\n        android:id=\"@+id/partnershipViewMaterialFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialFragment\"\n        android:label=\"fragment_partnership_view_material\"\n        tools:layout=\"@layout/fragment_partnership_view_material\" >\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_partnershipViewMaterialDetailFragment\"\n            app:destination=\"@id/partnershipViewMaterialDetailFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\">\n            <argument\n                android:name=\"documentId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n        </action>\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_setsFragment\"\n            app:destination=\"@id/setsFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/partnershipViewMaterialDetailFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialDetailFragment\"\n        android:label=\"fragment_partnership_view_material_detail\"\n        tools:layout=\"@layout/fragment_partnership_view_material_detail\" >\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialDetailFragment_to_replyCommentFragment\"\n            app:destination=\"@id/replyCommentFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/replyCommentFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.ReplyCommentFragment\"\n        android:label=\"fragment_reply_comment\"\n        tools:layout=\"@layout/fragment_reply_comment\" />\n    <fragment\n        android:id=\"@+id/joinPartnerFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.JoinPartnerFragment\"\n        android:label=\"fragment_join__partner_\"\n        tools:layout=\"@layout/fragment_join__partner_\" />\n    <fragment\n        android:id=\"@+id/adminDashboardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminDashboardFragment\"\n        android:label=\"fragment_admin_dashboard\"\n        tools:layout=\"@layout/fragment_admin_dashboard\" >\n        <action\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewPartnershipFragment\"\n            app:destination=\"@id/adminViewPartnershipFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n        <action\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewRewardFragment\"\n            app:destination=\"@id/adminViewRewardFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/adminViewPartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipFragment\"\n        android:label=\"fragment_admin_view_partnership\"\n        tools:layout=\"@layout/fragment_admin_view_partnership\" >\n        <action\n            android:id=\"@+id/action_adminViewPartnershipFragment_to_adminViewPartnershipRequestFragment\"\n            app:destination=\"@id/adminViewPartnershipRequestFragment\" />\n    </fragment>\n\n\n    <fragment\n        android:id=\"@+id/adminViewPartnershipRequestFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipRequestFragment\"\n        android:label=\"fragment_admin_view_partnership_request\"\n        tools:layout=\"@layout/fragment_admin_view_partnership_request\" />\n    <fragment\n        android:id=\"@+id/updatePartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.UpdatePartnershipFragment\"\n        android:label=\"UpdatePartnershipFragment\"\n        tools:layout=\"@layout/fragment_update_partnership\"/>\n\n<!--    quiz-->\n    <fragment\n        android:id=\"@+id/setsFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.SetsFragment\"\n        android:label=\"SetsFragment\"\n        tools:layout=\"@layout/fragment_sets\" >\n        <action\n            android:id=\"@+id/action_setsFragment_to_questionFragment\"\n            app:destination=\"@id/questionFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/questionFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.QuestionFragment\"\n        android:label=\"QuestionFragment\"\n        tools:layout=\"@layout/fragment_question\" >\n        <action\n            android:id=\"@+id/action_questionFragment_to_addUpdateQuestionFragment\"\n            app:destination=\"@id/addUpdateQuestionFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/addUpdateQuestionFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.AddUpdateQuestionFragment\"\n        android:label=\"AddUpdateQuestionFragment\"\n        tools:layout=\"@layout/fragment_add_update_question\" />\n    <fragment\n        android:id=\"@+id/quizFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.QuizFragment\"\n        android:label=\"QuizFragment\"\n        tools:layout=\"@layout/fragment_quiz\" >\n        <action\n            android:id=\"@+id/action_quizFragment_to_playFragment\"\n            app:destination=\"@id/playFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/playFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.PlayFragment\"\n        android:label=\"PlayFragment\"\n        tools:layout=\"@layout/fragment_play\" >\n        <action\n            android:id=\"@+id/action_playFragment_to_resultFragment\"\n            app:destination=\"@id/resultFragment\" />\n        <action\n            android:id=\"@+id/action_playFragment_to_quizFragment\"\n            app:destination=\"@id/quizFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/resultFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.ResultFragment\"\n        android:label=\"ResultFragment\"\n        tools:layout=\"@layout/fragment_result\" >\n        <action\n            android:id=\"@+id/action_resultFragment_to_quizFragment\"\n            app:destination=\"@id/quizFragment\" />\n    </fragment>\n    <!--    end quiz-->\n\n<!--    reward-->\n    <fragment\n        android:id=\"@+id/adminViewRewardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewRewardFragment\"\n        android:label=\"AdminViewRewardFragment\"\n        tools:layout=\"@layout/fragment_admin_view_reward\">\n        <action\n            android:id=\"@+id/action_adminViewRewardFragment_to_adminAddRewardFragment\"\n            app:destination=\"@id/adminAddRewardFragment\" />\n        <action\n            android:id=\"@+id/action_adminViewRewardFragment_to_adminUpdateRewardFragment\"\n            app:destination=\"@id/adminUpdateRewardFragment\" >\n            <argument\n            android:name=\"documentId\"\n            app:argType=\"string\" />\n        </action>\n    </fragment>\n    <fragment\n        android:id=\"@+id/adminAddRewardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminAddRewardFragment\"\n        android:label=\"AdminAddRewardFragment\"\n        tools:layout=\"@layout/fragment_admin_add_reward\"/>\n    <fragment\n        android:id=\"@+id/adminUpdateRewardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminUpdateRewardFragment\"\n        android:label=\"AdminUpdateRewardFragment\"\n        tools:layout=\"@layout/fragment_admin_update_reward\"/>\n<!--    end reward-->\n    <fragment\n        android:id=\"@+id/tempCommentFragment\"\n        android:name=\"com.example.kleine.fragments.TempCommentFragment\"\n        android:label=\"fragment_temp_comment\"\n        tools:layout=\"@layout/fragment_temp_comment\"/>\n</navigation>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/navigation/shopping_nav_graph.xml b/app/src/main/res/navigation/shopping_nav_graph.xml
---- a/app/src/main/res/navigation/shopping_nav_graph.xml	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/res/navigation/shopping_nav_graph.xml	(date 1695479913080)
-@@ -5,11 +5,15 @@
-     android:id="@+id/shopping_nav_graph"
-     app:startDestination="@id/homeFragment">
- 
-+
-+
-+
-     <fragment
-         android:id="@+id/homeFragment"
-         android:name="com.example.kleine.fragments.shopping.HomeFragment"
-         android:label="fragment_home"
-         tools:layout="@layout/fragment_home">
-+
-         <action
-             android:id="@+id/action_homeFragment_to_searchFragment"
-             app:destination="@id/searchFragment"
-@@ -18,29 +22,25 @@
-             android:name="position"
-             app:argType="integer"
-             android:defaultValue="0" />
--    </fragment>
- 
--    <action
--        android:id="@+id/action_homeFragment_to_materialDetailsFragment"
--        app:destination="@id/materialDetailsFragment"
--        app:enterAnim="@anim/nav_default_enter_anim"
--        app:exitAnim="@anim/nav_default_exit_anim"
--        app:popEnterAnim="@anim/nav_default_pop_enter_anim"
--        app:popExitAnim="@anim/nav_default_pop_exit_anim"/>
-+        <action
-+            android:id="@+id/action_homeFragment_to_materialDetailsFragment"
-+            app:destination="@id/materialDetailsFragment"
-+            app:enterAnim="@anim/nav_default_enter_anim"
-+            app:exitAnim="@anim/nav_default_exit_anim"
-+            app:popEnterAnim="@anim/nav_default_pop_enter_anim"
-+            app:popExitAnim="@anim/nav_default_pop_exit_anim"/>
-+    </fragment>
- 
- 
-     <fragment
-         android:id="@+id/materialDetailsFragment"
-         android:name="com.example.kleine.fragments.shopping.MaterialPreviewFragment"
--        android:label="Material Details">
--
-+        tools:layout="@layout/fragment_product_preview">
-         <argument
-             android:name="material"
-             app:argType="com.example.kleine.model.Material"
--            android:defaultValue="@null"
-             app:nullable="true" />
--
--
-     </fragment>
- 
- 
-@@ -59,6 +59,8 @@
-         android:name="com.example.kleine.fragments.shopping.ProfileFragment"
-         android:label="fragment_profile"
-         tools:layout="@layout/fragment_profile">
-+
-+
-         <action
-             android:id="@+id/action_profileFragment_to_billingFragment"
-             app:destination="@id/billingFragment"
-@@ -222,6 +224,14 @@
-             app:exitAnim="@anim/to_left"
-             app:popEnterAnim="@anim/from_left"
-             app:popExitAnim="@anim/to_right"/>
-+
-+        <action
-+            android:id="@+id/action_allOrdersFragment_to_materialDetailsFragment"
-+            app:destination="@id/materialDetailsFragment"
-+            app:enterAnim="@anim/from_right"
-+            app:exitAnim="@anim/to_left"
-+            app:popEnterAnim="@anim/from_left"
-+            app:popExitAnim="@anim/to_right"/>
-     </fragment>
-     <fragment
-         android:id="@+id/orderDetails"
-Index: app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport com.example.kleine.databinding.FragmentProductPreviewBinding\nimport com.example.kleine.model.Material\n\nclass MaterialPreviewFragment : Fragment() {\n    private var _binding: FragmentProductPreviewBinding? = null\n    private val binding get() = _binding!!\n    private var material: Material? = null\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        _binding = FragmentProductPreviewBinding.inflate(inflater, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        // Retrieve the passed argument\n        material = arguments?.getParcelable(\"material\")\n\n        // Check if the material is not null\n        if (material != null) {\n            // Bind the material data to the views using data binding\n            binding.productModel = material\n        } else {\n            // Handle the case where material is null\n            // For instance, you can show a message to the user or navigate back\n            fragmentManager?.popBackStack()\n\n        }\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt	(date 1695479913152)
-@@ -1,18 +1,35 @@
- package com.example.kleine.fragments.shopping
- 
- import android.os.Bundle
-+import android.util.Log
- import android.view.LayoutInflater
- import android.view.View
- import android.view.ViewGroup
-+import android.widget.Toast
- import androidx.fragment.app.Fragment
-+import androidx.navigation.Navigation.findNavController
-+import androidx.navigation.fragment.findNavController
-+import androidx.viewpager2.widget.ViewPager2
-+import com.example.kleine.R
-+import com.example.kleine.adapters.viewpager.ViewPager2Images
- import com.example.kleine.databinding.FragmentProductPreviewBinding
-+import com.example.kleine.model.Enrollment
- import com.example.kleine.model.Material
-+import com.google.firebase.auth.FirebaseAuth
-+import com.google.firebase.firestore.FirebaseFirestore
-+
- 
- class MaterialPreviewFragment : Fragment() {
-     private var _binding: FragmentProductPreviewBinding? = null
-     private val binding get() = _binding!!
-     private var material: Material? = null
- 
-+    private val viewPagerAdapter = ViewPager2Images()
-+
-+    private val firebaseAuth: FirebaseAuth = FirebaseAuth.getInstance()
-+    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()
-+
-+
-     override fun onCreateView(
-         inflater: LayoutInflater, container: ViewGroup?,
-         savedInstanceState: Bundle?
-@@ -23,21 +40,77 @@
- 
-     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-         super.onViewCreated(view, savedInstanceState)
-+        onEnrollClick()
-+
-+
-+        // Set up the ViewPager2
-+        binding.viewpager2Images.adapter = viewPagerAdapter
- 
-         // Retrieve the passed argument
-         material = arguments?.getParcelable("material")
- 
--        // Check if the material is not null
--        if (material != null) {
--            // Bind the material data to the views using data binding
--            binding.productModel = material
--        } else {
--            // Handle the case where material is null
--            // For instance, you can show a message to the user or navigate back
--            fragmentManager?.popBackStack()
-+        material?.let { mat ->
-+            binding.productModel = mat
-+
-+            // Convert the single imageUrl into a list and submit to the adapter
-+            viewPagerAdapter.differ.submitList(listOf(mat.imageUrl))
- 
-+        } ?: run {
-+            Log.e("MaterialPreviewFragment", "Material is null!")
-         }
-+
-+        // Assuming you have one image per material for now
-+        // If there are multiple images, then update this value accordingly
-+        // binding.circleIndicator.indicatorItemCount = 1
-+        // Update: Commented the above line as it might not be available based on the library version.
-+
-+        binding.viewpager2Images.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {
-+            override fun onPageSelected(position: Int) {
-+                super.onPageSelected(position)
-+                // Update the CircleIndicator's selected position
-+                // You might need to check if such a method is available in your library version
-+                // binding.circleIndicator.setSelection(position)
-+                // Update: Commented the above line as it might not be available based on the library version.
-+            }
-+        })
-     }
-+
-+
-+
-+    private fun onEnrollClick() {
-+        binding.btnEnroll.setOnClickListener {
-+            Log.d("MaterialPreviewFragment", "Button Clicked")
-+
-+            // Get the current user ID
-+            val userId = firebaseAuth.currentUser?.uid ?: run {
-+                Toast.makeText(context, "User not logged in!", Toast.LENGTH_SHORT).show()
-+                return@setOnClickListener
-+            }
-+
-+            // Get the selected material ID
-+            val materialId = material?.id ?: run {
-+                Toast.makeText(context, "Material ID is null!", Toast.LENGTH_SHORT).show()
-+                return@setOnClickListener
-+            }
-+
-+            // Create a new Enrollment object
-+            val enrollment = Enrollment(userId = userId, materialId = materialId)
-+
-+            // Save the enrollment to Firebase Firestore
-+            firestore.collection("enrollments").add(enrollment)
-+                .addOnSuccessListener {
-+                    Toast.makeText(context, "Successfully enrolled in the course!", Toast.LENGTH_SHORT).show()
-+
-+                    // Navigate back to HomeFragment
-+                    findNavController().navigateUp()
-+                }
-+                .addOnFailureListener { exception ->
-+                    Log.w("MaterialPreviewFragment", "Error adding document", exception)
-+                    Toast.makeText(context, "Error enrolling in the course!", Toast.LENGTH_SHORT).show()
-+                }
-+        }
-+    }
-+
- 
-     override fun onDestroyView() {
-         super.onDestroyView()
-Index: app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport androidx.navigation.fragment.findNavController\nimport com.bumptech.glide.Glide\nimport com.example.kleine.BuildConfig\nimport com.example.kleine.R\nimport com.example.kleine.activities.LunchActivity\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.databinding.FragmentProfileBinding\nimport com.example.kleine.model.User\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.UPDATE_ADDRESS_FLAG\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport com.google.android.material.snackbar.Snackbar\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.firestore.FirebaseFirestore\n\n\nclass ProfileFragment : Fragment() {\n    val TAG = \"ProfileFragment\"\n    private lateinit var binding: FragmentProfileBinding\n    private lateinit var viewModel: ShoppingViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getUser()\n    }\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentProfileBinding.inflate(inflater, container, false)\n        val currentUser = FirebaseAuth.getInstance().currentUser\n\n        if (currentUser != null) {\n            val userId = currentUser.uid\n            val db = FirebaseFirestore.getInstance()\n            db.collection(\"users\").document(userId)\n                .get()\n                .addOnSuccessListener { document ->\n                    if (document != null) {\n                        val status = document.getString(\"status\")\n                        Log.d(TAG, \"User Status: $status\")\n                        if (status == \"ADMINS\") {\n                            // Admin user, show the fragment\n                            binding.adminOrders.visibility = View.VISIBLE\n                            binding.linearAdmin.visibility = View.VISIBLE\n                            binding.linearJoinPartnership.visibility = View.GONE\n                        }else if(status == \"PARTNERS\"){\n                            binding.adminOrders.visibility = View.GONE\n                            binding.linearAdmin.visibility = View.GONE\n                            binding.linearJoinPartnership.visibility = View.GONE\n                            binding.linearViewPartnership.visibility = View.VISIBLE\n                        }else{\n                            binding.linearJoinPartnership.visibility = View.VISIBLE\n                            binding.linearViewPartnership.visibility = View.GONE\n                            binding.adminOrders.visibility = View.GONE\n                            binding.linearAdmin.visibility = View.GONE\n                        }\n                    }\n                }\n        }\n\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        onHomeClick()\n        onLogoutClick()\n        onBillingAndAddressesClick()\n        onProfileClick()\n        onAllOrderClick()\n        onTrackOrderClick()\n        onJoinPartnershipCLick()\n        onViewPartnershipClick()\n        onAdminClick()\n        onHelpClick()\n\n        observeProfile()\n        binding.tvVersionCode.text =\n            \"${resources.getText(R.string.g_version)} ${BuildConfig.VERSION_NAME}\"\n\n\n        onTempCommentClick()\n    }\n\n    private fun onTempCommentClick() {\n        binding.linearComment.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"documentId\", \"5VlLkBQaULeJlawqN8Rq\")\n            findNavController().navigate(R.id.action_profileFragment_to_tempCommentFragment, bundle)\n        }\n    }\n\n    private fun onHelpClick() {\n        binding.linearHelp.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_helpFragment)\n        }\n    }\n\n    private fun onAdminClick() {\n        binding.linearAdmin.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_adminDashboardFragment)\n        }\n    }\n\n\n    private fun onJoinPartnershipCLick() {\n        binding.linearJoinPartnership.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_joinPartnerFragment)\n        }\n    }\n    private fun onViewPartnershipClick() {\n        binding.linearViewPartnership.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_viewPartnershipFragment)\n        }\n    }\n\n    private fun onTrackOrderClick() {\n        binding.linearTrackOrder.setOnClickListener {\n            val snackBar = requireActivity().findViewById<CoordinatorLayout>(R.id.snackBar_coordinator)\n            Snackbar.make(snackBar,resources.getText(R.string.g_coming_soon),Snackbar.LENGTH_SHORT).show()\n        }\n    }\n\n    private fun onAllOrderClick() {\n        binding.allOrders.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_allOrdersFragment)\n        }\n    }\n\n    private fun onProfileClick() {\n        binding.constraintProfile.setOnClickListener {\n            user?.let {\n                val bundle = Bundle()\n                bundle.putParcelable(\"user\",user)\n                findNavController().navigate(R.id.action_profileFragment_to_editUserInformation,bundle)\n            }\n        }\n\n\n    }\n\n    var user: User?=null\n    private fun observeProfile() {\n        viewModel.profile.observe(viewLifecycleOwner) { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@observe\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n                    val user = response.data\n                    this.user = user\n                    binding.apply {\n                        tvUserName.text = user?.firstName + \" \" + user?.lastName\n                        Glide.with(requireView()).load(user?.imagePath)\n                            .error(R.drawable.ic_default_profile_picture).into(binding.imgUser)\n                    }\n                    return@observe\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@observe\n                }\n            }\n        }\n    }\n\n    private fun hideLoading() {\n        binding.apply {\n            binding.progressbarSettings.visibility = View.GONE\n            constraintParnet.visibility = View.VISIBLE\n        }\n    }\n\n    private fun showLoading() {\n        binding.apply {\n            binding.progressbarSettings.visibility = View.VISIBLE\n            constraintParnet.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun onBillingAndAddressesClick() {\n        binding.linearBilling.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"clickFlag\", UPDATE_ADDRESS_FLAG)\n            findNavController().navigate(R.id.action_profileFragment_to_billingFragment, bundle)\n        }\n    }\n\n    private fun onLogoutClick() {\n\n        binding.linearOut.setOnClickListener {\n            FirebaseAuth.getInstance().signOut()\n            val intent = Intent(context, LunchActivity::class.java)\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\n            startActivity(intent)\n        }\n    }\n\n    private fun onHomeClick() {\n        val btm = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        btm?.menu?.getItem(0)?.setOnMenuItemClickListener {\n            activity?.onBackPressed()\n            true\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        val bottomNavigation = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNavigation?.visibility = View.VISIBLE\n    }\n\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt	(date 1695479913302)
-@@ -10,12 +10,17 @@
- import android.widget.Toast
- import androidx.coordinatorlayout.widget.CoordinatorLayout
- import androidx.navigation.fragment.findNavController
-+import androidx.recyclerview.widget.LinearLayoutManager
- import com.bumptech.glide.Glide
- import com.example.kleine.BuildConfig
- import com.example.kleine.R
- import com.example.kleine.activities.LunchActivity
- import com.example.kleine.activities.ShoppingActivity
-+import com.example.kleine.adapters.recyclerview.AllOrdersAdapter
-+import com.example.kleine.adapters.recyclerview.MaterialAdapter
- import com.example.kleine.databinding.FragmentProfileBinding
-+import com.example.kleine.model.Enrollment
-+import com.example.kleine.model.Material
- import com.example.kleine.model.User
- import com.example.kleine.resource.Resource
- import com.example.kleine.util.Constants.Companion.UPDATE_ADDRESS_FLAG
-@@ -30,6 +35,11 @@
-     val TAG = "ProfileFragment"
-     private lateinit var binding: FragmentProfileBinding
-     private lateinit var viewModel: ShoppingViewModel
-+    private lateinit var materialAdapter: MaterialAdapter
-+
-+    private lateinit var enrolledMaterials: List<Material>
-+
-+
- 
-     override fun onCreate(savedInstanceState: Bundle?) {
-         super.onCreate(savedInstanceState)
-@@ -79,6 +89,8 @@
-     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-         super.onViewCreated(view, savedInstanceState)
- 
-+        materialAdapter = MaterialAdapter()
-+
-         onHomeClick()
-         onLogoutClick()
-         onBillingAndAddressesClick()
-@@ -137,12 +149,69 @@
-         }
-     }
- 
-+
-+
-     private fun onAllOrderClick() {
-         binding.allOrders.setOnClickListener {
-+            fetchUserEnrollments()
-             findNavController().navigate(R.id.action_profileFragment_to_allOrdersFragment)
-         }
-     }
- 
-+
-+
-+    private fun fetchUserEnrollments() {
-+        val userId = FirebaseAuth.getInstance().currentUser?.uid
-+        if (userId != null) {
-+            val firestore = FirebaseFirestore.getInstance()
-+            firestore.collection("enrollments")
-+                .whereEqualTo("userId", userId)
-+                .get()
-+                .addOnSuccessListener { querySnapshot ->
-+                    val enrollments = querySnapshot.documents.mapNotNull { document ->
-+                        document.toObject(Enrollment::class.java)
-+                    }
-+                    fetchMaterialsForEnrollments(enrollments)
-+                }
-+                .addOnFailureListener { exception ->
-+                    Log.e(TAG, "Error fetching user enrollments", exception)
-+                    // Handle the error appropriately
-+                }
-+        } else {
-+            // Handle the case where the user is not logged in
-+        }
-+    }
-+
-+    private fun fetchMaterialsForEnrollments(enrollments: List<Enrollment>) {
-+        val firestore = FirebaseFirestore.getInstance()
-+        val materialIds = enrollments.map { it.materialId }
-+
-+        firestore.collection("Materials")
-+            .whereIn("id", materialIds)
-+            .get()
-+            .addOnSuccessListener { querySnapshot ->
-+                val materials = querySnapshot.documents.mapNotNull { document ->
-+                    document.toObject(Material::class.java)
-+                }
-+                displayMaterials(materials)
-+            }
-+            .addOnFailureListener { exception ->
-+                Log.e(TAG, "Error fetching materials", exception)
-+                // Handle the error appropriately
-+            }
-+    }
-+
-+
-+
-+    private fun displayMaterials(materials: List<Material>) {
-+        // Update your UI with the fetched materials
-+        // For example, update the RecyclerView Adapter with the materials
-+        materialAdapter.differ.submitList(materials)
-+    }
-+
-+
-+
-+
-     private fun onProfileClick() {
-         binding.constraintProfile.setOnClickListener {
-             user?.let {
-Index: app/src/main/res/layout/recycler_view_all_orders_item.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/parent_linear\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"8dp\">\n\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <ImageView\n            android:id=\"@+id/img_order_state\"\n            android:layout_width=\"@dimen/_10sdp\"\n            android:layout_height=\"@dimen/_10sdp\"\n            android:layout_gravity=\"center\"\n            android:src=\"@drawable/ic_circle\" />\n\n        <TextView\n            android:id=\"@+id/tv_order_id\"\n            style=\"@style/MediumTextViewThin\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginStart=\"5dp\"\n            android:layout_weight=\"1\"\n            tools:text=\"@tools:sample/lorem\" />\n\n        <ImageView\n            android:layout_width=\"@dimen/_15sdp\"\n            android:layout_height=\"@dimen/_15sdp\"\n            android:src=\"@drawable/ic_arrow\" />\n\n    </LinearLayout>\n\n    <TextView\n        android:id=\"@+id/tv_order_date\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        tools:text=\"@tools:sample/lorem\" />\n\n    <View\n        android:id=\"@+id/line\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"@dimen/_1sdp\"\n        android:layout_marginTop=\"15dp\"\n        android:background=\"@drawable/line\"\n        android:backgroundTint=\"@color/g_icon_tint\" />\n</LinearLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/recycler_view_all_orders_item.xml b/app/src/main/res/layout/recycler_view_all_orders_item.xml
---- a/app/src/main/res/layout/recycler_view_all_orders_item.xml	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/res/layout/recycler_view_all_orders_item.xml	(date 1695479913318)
-@@ -1,52 +1,62 @@
- <?xml version="1.0" encoding="utf-8"?>
--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
--    xmlns:tools="http://schemas.android.com/tools"
--    android:id="@+id/parent_linear"
--    android:layout_width="match_parent"
--    android:layout_height="wrap_content"
--    android:orientation="vertical"
--    android:padding="8dp">
-+<layout xmlns:android="http://schemas.android.com/apk/res/android"
-+    xmlns:tools="http://schemas.android.com/tools">
-+
-+    <data>
-+        <variable
-+            name="productModel"
-+            type="com.example.kleine.model.Material" />
-+    </data>
-+
-+    <LinearLayout
-+        android:id="@+id/parent_linear"
-+        android:layout_width="match_parent"
-+        android:layout_height="wrap_content"
-+        android:orientation="vertical"
-+        android:padding="8dp">
- 
--
--    <LinearLayout
--        android:layout_width="match_parent"
--        android:layout_height="wrap_content"
--        android:orientation="horizontal">
-+        <LinearLayout
-+            android:id="@+id/btnAllCourses"
-+            android:layout_width="match_parent"
-+            android:layout_height="wrap_content"
-+            android:orientation="horizontal"
-+            android:clickable="true"
-+            android:focusable="true">
- 
--        <ImageView
--            android:id="@+id/img_order_state"
--            android:layout_width="@dimen/_10sdp"
--            android:layout_height="@dimen/_10sdp"
--            android:layout_gravity="center"
--            android:src="@drawable/ic_circle" />
-+            <ImageView
-+                android:id="@+id/img_order_state"
-+                android:layout_width="@dimen/_10sdp"
-+                android:layout_height="@dimen/_10sdp"
-+                android:layout_gravity="center"
-+                android:src="@drawable/ic_circle" />
- 
--        <TextView
--            android:id="@+id/tv_order_id"
--            style="@style/MediumTextViewThin"
--            android:layout_width="wrap_content"
--            android:layout_height="wrap_content"
--            android:layout_marginStart="5dp"
--            android:layout_weight="1"
--            tools:text="@tools:sample/lorem" />
-+            <TextView
-+                android:id="@+id/tv_order_id"
-+                style="@style/MediumTextViewThin"
-+                android:layout_width="wrap_content"
-+                android:layout_height="wrap_content"
-+                android:layout_marginStart="5dp"
-+                android:layout_weight="1"
-+                android:text="@{productModel.name}" />
- 
--        <ImageView
--            android:layout_width="@dimen/_15sdp"
--            android:layout_height="@dimen/_15sdp"
--            android:src="@drawable/ic_arrow" />
--
--    </LinearLayout>
-+            <ImageView
-+                android:layout_width="@dimen/_15sdp"
-+                android:layout_height="@dimen/_15sdp"
-+                android:src="@drawable/ic_arrow" />
-+        </LinearLayout>
- 
--    <TextView
--        android:id="@+id/tv_order_date"
--        android:layout_width="wrap_content"
--        android:layout_height="wrap_content"
--        tools:text="@tools:sample/lorem" />
-+        <TextView
-+            android:id="@+id/tv_order_date"
-+            android:layout_width="wrap_content"
-+            android:layout_height="wrap_content"
-+            android:text="@{String.valueOf(productModel.desc)}" />
- 
--    <View
--        android:id="@+id/line"
--        android:layout_width="match_parent"
--        android:layout_height="@dimen/_1sdp"
--        android:layout_marginTop="15dp"
--        android:background="@drawable/line"
--        android:backgroundTint="@color/g_icon_tint" />
--</LinearLayout>
-\ No newline at end of file
-+        <View
-+            android:id="@+id/line"
-+            android:layout_width="match_parent"
-+            android:layout_height="@dimen/_1sdp"
-+            android:layout_marginTop="15dp"
-+            android:background="@drawable/line"
-+            android:backgroundTint="@color/g_icon_tint" />
-+    </LinearLayout>
-+</layout>
-Index: app/build.gradle
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>plugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n    id 'com.google.gms.google-services'\n    id 'kotlin-parcelize'\n    id 'androidx.navigation.safeargs.kotlin'\n    id 'dagger.hilt.android.plugin'\n}\n\n\nandroid {\n    compileSdk 31\n\n    defaultConfig {\n        applicationId \"com.example.kleine\"\n        minSdk 21\n        targetSdk 31\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = '1.8'\n    }\n\n    buildFeatures{\n        viewBinding true\n        dataBinding true\n    }\n}\n\ndependencies {\n\n    implementation 'androidx.room:room-common:2.5.2'\n    apply plugin :\"kotlin-kapt\"\n    implementation 'androidx.core:core-ktx:1.7.0'\n    implementation 'androidx.appcompat:appcompat:1.4.1'\n    implementation 'com.google.android.material:material:1.5.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'\n    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'\n\n    testImplementation 'junit:junit:4.+'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\n\n    //intuit\n    implementation 'com.intuit.sdp:sdp-android:1.0.6'\n    implementation 'com.intuit.ssp:ssp-android:1.0.6'\n\n\n    //loading button\n    implementation 'br.com.simplepass:loading-button-android:2.2.0'\n\n    //firebase\n    implementation 'com.google.firebase:firebase-firestore:24.0.1'\n    implementation 'com.google.firebase:firebase-firestore-ktx:24.0.1'\n    implementation 'com.google.firebase:firebase-auth-ktx:21.0.1'\n    implementation 'com.google.firebase:firebase-storage'\n    implementation 'com.google.firebase:firebase-storage-ktx:20.0.0'\n    implementation 'com.google.firebase:firebase-common-ktx:20.0.0'\n    implementation 'com.google.firebase:firebase-messaging-ktx:23.0.0'\n    implementation 'com.firebaseui:firebase-ui-auth:4.3.2'\n\n    //google play services\n    implementation 'com.google.android.gms:play-services-auth:20.1.0'\n\n    //smooth bar\n    implementation 'com.github.ibrahimsn98:SmoothBottomBar:1.7.9'\n\n    //Glide\n    implementation 'com.github.bumptech.glide:glide:4.13.0'\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.0'\n\n    //storage\n    implementation 'com.firebaseui:firebase-ui-storage:8.0.0'\n\n    //circular image\n    implementation 'de.hdodenhof:circleimageview:3.1.0'\n\n    //Navigation and safe args\n    def nav_version = \"2.4.1\"\n    implementation \"androidx.navigation:navigation-fragment-ktx:$nav_version\"\n    implementation \"androidx.navigation:navigation-ui-ktx:$nav_version\"\n\n    //viewpager2 indicatior\n    implementation 'io.github.vejei.viewpagerindicator:viewpagerindicator:1.0.0-alpha.1'\n\n    //lifecycle\n    implementation \"android.arch.lifecycle:extensions:1.1.0\"\n\n    //Firebase coroutines\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1'\n\n    //stepView\n    implementation 'com.shuhart.stepview:stepview:1.5.1'\n\n    //Android Ktx\n    implementation \"androidx.fragment:fragment-ktx:1.4.1\"\n\n    //pdf viewer\n    implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'\n\n\n    //Dagger hilt\n    implementation \"com.google.dagger:hilt-android:2.38.1\"\n    kapt \"com.google.dagger:hilt-compiler:2.38.1\"\n\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/build.gradle b/app/build.gradle
---- a/app/build.gradle	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/build.gradle	(date 1695479913376)
-@@ -95,6 +95,9 @@
-     def nav_version = "2.4.1"
-     implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
-     implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
-+    apply plugin: "androidx.navigation.safeargs.kotlin"
-+
-+
- 
-     //viewpager2 indicatior
-     implementation 'io.github.vejei.viewpagerindicator:viewpagerindicator:1.0.0-alpha.1'
-@@ -119,5 +122,12 @@
-     implementation "com.google.dagger:hilt-android:2.38.1"
-     kapt "com.google.dagger:hilt-compiler:2.38.1"
- 
-+    
- 
-+
-+
-+
-+
-+
-+
- }
-\ No newline at end of file
-Index: app/src/main/res/values/strings.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><resources>\n    <string name=\"app_name\">HELP</string>\n    <string name=\"g_app_name\">HELP</string>\n    <string name=\"g_the_right_address\">In Learning, \\nWe Trust</string>\n\n    <!--    <string name=\"g_for_shopping\">For Shopping</string>-->\n    <!--    <string name=\"g_any_day\">Anyday</string>-->\n\n    <string name=\"g_best_quality\">Knowledge opens the door to a world of opportunities, illuminating the path to progress \\n When this wisdom intertwines with cooperative efforts, we collectively illuminate a brighter, more sustainable future</string>\n    <string name=\"g_start\">Start</string>\n    <!-- TODO: Remove or change this placeholder text -->\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\n    <string name=\"all_your_orders\">All your orders in one \\n saved package</string>\n    <string name=\"g_register\">Register</string>\n    <string name=\"g_let_s_register\">Let\\'s Register</string>\n    <string name=\"g_do_you_have_an_account_log_in\">Do you have an account? log in</string>\n    <string name=\"g_first_name\">First Name</string>\n    <string name=\"g_email\">Email</string>\n    <string name=\"g_second_name\">Last Name</string>\n    <string name=\"g_password\">Password</string>\n    <string name=\"g_don_t_have_an_account_register\">Don\\'t have an account? Register</string>\n    <string name=\"g_let_s_login\">Let\\'s Login</string>\n    <string name=\"g_log_in\">Log in</string>\n    <string name=\"g_google\">Google</string>\n    <string name=\"g_facebook\">Facebook</string>\n    <string name=\"first_name_cant_be_empty\">First name can\\'t be empty</string>\n    <string name=\"last_name_cant_be_empty\">Last name can\\'t be empty</string>\n    <string name=\"email_cant_be_empty\">Email can\\'t be empty</string>\n    <string name=\"password_cant_be_empty\">password can\\'t be empty</string>\n    <string name=\"password_at_least_six\">password should have 6</string>\n    <string name=\"valid_email\">check your email</string>\n    <string name=\"signed_up_successfully\">you have created new account, login now</string>\n    <string name=\"g_home\">Novice</string>\n    <string name=\"g_search\">search</string>\n    <string name=\"g_cart\">Cart</string>\n    <string name=\"g_profile\">profile</string>\n    <string name=\"g_add_to_cart\">Add to cart</string>\n    <string name=\"g_search_now\">Search Now</string>\n    <string name=\"g_best_deals\">Best Deals</string>\n    <string name=\"g_chair\">Beginner</string>\n    <string name=\"g_cupboard\">Intermediate</string>\n    <string name=\"g_table\">Proficient</string>\n    <string name=\"g_accessory\">Advanced</string>\n    <string name=\"g_furniture\">Expert</string>\n    <string name=\"g_enlightening\">Master</string>\n    <string name=\"g_best_products\">Trending Courses</string>\n    <string name=\"g_see_product\">See product</string>\n    <string name=\"g_color\">Color</string>\n    <string name=\"g_size\">Size</string>\n    <string name=\"g_add_to_card\">Enroll Courses</string>\n    <string name=\"g_added\">Added</string>\n    <string name=\"g_already_added\">Product is in your cart</string>\n    <string name=\"g_please_select_color\">Please select color</string>\n    <string name=\"g_please_select_size\">Please select size</string>\n    <string name=\"g_my_cart\">My Course</string>\n    <string name=\"g_checkout\">Checkout</string>\n    <string name=\"g_total\">Total:</string>\n    <string name=\"g_your_shopping_cart_is_empty\">Your Course List \\n Is Empty</string>\n    <string name=\"g_delete_item\">Delete item</string>\n    <string name=\"g_are_you_sure_you_want_to_delete_this_item_from_cart\">Are you sure you want to delete this item from cart ?</string>\n    <string name=\"g_no\">No</string>\n    <string name=\"g_yes\">Yes</string>\n    <string name=\"g_categories\">Categories</string>\n    <string name=\"g_cancel\">Cancel</string>\n    <string name=\"g_payment_methods\">Redeem Reward</string>\n    <string name=\"payment_explanation\">Congratulations on completing one of our courses ! Kindly entered your address to redeem the reward ! </string>\n    <string name=\"g_shipping\">Address</string>\n    <string name=\"g_full_name\">Full Name</string>\n    <string name=\"g_city\">City</string>\n    <string name=\"g_phone\">Phone</string>\n    <string name=\"g_state\">State</string>\n    <string name=\"g_save\">Save</string>\n    <string name=\"g_address\">Address</string>\n    <string name=\"g_address_location_ie_home\">Address Location ie. Home</string>\n    <string name=\"g_update\">Update</string>\n    <string name=\"g_place_order\">Save</string>\n    <string name=\"g_delete\">Delete</string>\n    <string name=\"g_select_address_error\">Select or add new address !</string>\n    <string name=\"g_place_order_confirmation\">Are you sure you want to place this order ?</string>\n    <string name=\"g_confirm\">Confirm</string>\n    <string name=\"place_order_error\">Error occurred try again later or contact us</string>\n    <string name=\"g_payment_failed\">Your Order is Failed !</string>\n    <string name=\"g_payment_success\">Your Order is Completed</string>\n    <string name=\"order_error_message\">Try again later, if this error keeps showing up please contact us .</string>\n    <string name=\"order_success_message\">We received your order and we will contact you through a phone call in the next 24H\n    \\n your order number is #</string>\n    <string name=\"g_track_order\">You can track your order by going to your profile and select all orders then select your recent order.</string>\n    <string name=\"g_settings\">Settings</string>\n    <string name=\"g_edit_personal_details\">Edit personal details</string>\n    <string name=\"g_orders\">Courses</string>\n    <string name=\"g_order\">Order</string>\n    <string name=\"g_all_orders\">All Courses</string>\n    <string name=\"g__track_order\">Enrolled Courses</string>\n    <string name=\"g_notifications\">Notifications</string>\n    <string name=\"g_information\">Information</string>\n\n\n    <string name=\"g_admin\">Admin</string>\n    <string name=\"g_preference\">Preferences</string>\n    <string name=\"g_join_partnership\">Join Partnership</string>\n    <string name=\"g_logout\">Logout</string>\n    <string name=\"g_billing\">Billing And Addresses</string>\n    <string name=\"g_version\">Version</string>\n    <string name=\"error_occurred\">Oops error occurred</string>\n    <string name=\"g_edit_profile\">Edit Profile</string>\n    <string name=\"g_change_forgot_password\">Forgot/Change password</string>\n    <string name=\"g_cant_change_email_message\">You cannot change your email address, if you are looking to change it please contact with us</string>\n    <string name=\"select_profile_image\">Select profile image</string>\n    <string name=\"g_no_orders_to_show\">No courses to show</string>\n    <string name=\"g_reset_password\">Reset Password</string>\n    <string name=\"g_reset_password_message\">We will send you password reset link on your Email</string>\n    <string name=\"g_send\">Send</string>\n    <string name=\"g_password_reset\">We sent reset password link to your email</string>\n    <string name=\"g_order_placed\">Order Placed</string>\n    <string name=\"g_shipped\">Shipped</string>\n    <string name=\"g_delivered\">Delivered</string>\n    <string name=\"g_products\">Products</string>\n    <string name=\"g_coming_soon\">This feature is not available yet</string>\n    <string name=\"g_english\">English</string>\n    <string name=\"g_arabic\">عربي</string>\n    <string name=\"g_forgot_password\">Forgot Password</string>\n    <string name=\"g_check_your_email\">Check your Email</string>\n    <string name=\"street\">Street</string>\n    <string name=\"g_order_details\">Order Details</string>\n    <string name=\"product_added\">Product added to your cart</string>\n    <string name=\"switch_account\">Switch Account</string>\n    <string name=\"open_menu\">Open Menu</string>\n    <string name=\"close_menu\">Close Menu</string>\n    <string name=\"my_store\">My Store</string>\n    <string name=\"g_total_sales\">Total Sales</string>\n    <string name=\"today_sales\">Today Sales</string>\n    <string name=\"pending_orders\">Pending Orders</string>\n    <string name=\"help\">Help</string>\n    <string name=\"help_text\">Got a question? We\\'re here to answer!</string>\n\n    <!-- reward -->\n    <string name=\"titleVoucher\">Select Voucher</string>\n    <string name=\"okButton\">OK</string>\n    <string name=\"rewardName\">Reward Name</string>\n    <string name=\"rewardExpired\">Reward Expired Date</string>\n    <string name=\"labelVoucherExpiredDate\">Expired Date: </string>\n    <string name=\"voucherTermsCondition\">Terms and Conditions</string>\n    <string name=\"labelShippingVoucher\">Voucher(s) can be selected: </string>\n    <string name=\"voucherCodeHint\">Enter Voucher Code</string>\n    <string name=\"noVoucherMsg\">No voucher available!</string>\n    <string name=\"g_difficultyLevel\">Level : </string>\n    <string name=\"g_totalChapter\">Chapter : </string>\n    <string name=\"g_product_name_label\">Material Name</string>\n\n    <string name=\"voucherName\">Voucher</string>\n    <string name=\"voucherExpired\">Voucher Expired Date</string>\n\n\n\n    <!-- Card View  -->\n\n    <string name=\"string_productCategory\">Course Category</string>\n    <string name=\"string_productTitle\">Course Title</string>\n    <string name=\"string_productPrice\">Product Price</string>\n    <string name=\"string_productRate\">4.9</string>\n    <string name=\"string_rate\">Rate</string>\n    <string name=\"string_product_image\">Course Image</string>\n    <string name=\"string_fav\">Favourite</string>\n\n\n\n    <string name=\"string_sale_text\">Grab Some Course !! </string>\n    <string name=\"string_curve_image\">Curve Image</string>\n    <string name=\"string_75\">520%</string>\n\n    <string name=\"string_status\">Status</string>\n\n    <string name=\"string_rating\">Rating</string>\n\n\n\n    <!-- Difficulty Levels  -->\n    <string-array name=\"difficulty_levels\">\n        <item>Novice</item>\n        <item>Beginners</item>\n        <item>Intermediate</item>\n        <item>Proficient</item>\n        <item>Advanced</item>\n        <item>Expert</item>\n        <item>Master</item>\n    </string-array>\n\n</resources>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
---- a/app/src/main/res/values/strings.xml	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/res/values/strings.xml	(date 1695479913396)
-@@ -172,7 +172,7 @@
- 
-     <string name="string_rating">Rating</string>
- 
--
-+    <string name="rewardDescription">Your reward description here</string>
- 
-     <!-- Difficulty Levels  -->
-     <string-array name="difficulty_levels">
-Index: app/src/main/java/com/example/kleine/model/Enrollment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/model/Enrollment.kt b/app/src/main/java/com/example/kleine/model/Enrollment.kt
-new file mode 100644
---- /dev/null	(date 1695479912859)
-+++ b/app/src/main/java/com/example/kleine/model/Enrollment.kt	(date 1695479912859)
-@@ -0,0 +1,10 @@
-+package com.example.kleine.model
-+
-+import android.os.Parcelable
-+import kotlinx.android.parcel.Parcelize
-+
-+@Parcelize
-+data class Enrollment(
-+    val userId: String = "", // ID of the user who has enrolled
-+    val materialId: String = "" // ID of the material/course in which the user has enrolled
-+): Parcelable
-Index: app/src/main/res/drawable/tab_selector.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/drawable/tab_selector.xml b/app/src/main/res/drawable/tab_selector.xml
-new file mode 100644
---- /dev/null	(date 1695479912834)
-+++ b/app/src/main/res/drawable/tab_selector.xml	(date 1695479912834)
-@@ -0,0 +1,5 @@
-+<?xml version="1.0" encoding="utf-8"?>
-+<selector xmlns:android="http://schemas.android.com/apk/res/android">
-+    <item android:drawable="@drawable/tab_icon_selected" android:state_selected="true"/>
-+    <item android:drawable="@drawable/tab_icon_default"/>
-+</selector>
-Index: app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport android.widget.Toast\nimport androidx.appcompat.app.AlertDialog\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProviders\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.SpacingDecorator.VerticalSpacingItemDecorator\nimport com.example.kleine.adapters.recyclerview.CartRecyclerAdapter\nimport com.example.kleine.databinding.FragmentCartBinding\nimport com.example.kleine.model.CartProductsList\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.SELECT_ADDRESS_FLAG\nimport com.example.kleine.viewmodel.shopping.cart.CartViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\n\nprivate const val TAG = \"CartFragment\"\nclass CartFragment : Fragment() {\n    private lateinit var binding: FragmentCartBinding\n    private lateinit var viewModel: CartViewModel\n    private lateinit var cartAdapter: CartRecyclerAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = ViewModelProviders.of(this)[CartViewModel::class.java]\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentCartBinding.inflate(inflater)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        onHomeClick()\n\n        setupRecyclerView()\n        observeCart()\n\n        onCloseImgClick()\n\n        onPlusClick()\n        onMinusClick()\n        onItemClick()\n\n        observeProductClickNavigation()\n\n        onCheckoutClick()\n\n    }\n\n    private fun onCheckoutClick() {\n        binding.btnCheckout.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"price\", binding.tvTotalprice.text.toString())\n            bundle.putString(\"clickFlag\", SELECT_ADDRESS_FLAG)\n            bundle.putParcelable(\"products\", cartProducts)\n            findNavController().navigate(R.id.action_cartFragment_to_billingFragment, bundle)\n        }\n    }\n\n    private fun observeProductClickNavigation() {\n        viewModel.product.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        val product = response.data\n                        val bundle = Bundle()\n                        bundle.putParcelable(\"material\", product)\n                        findNavController().navigate(\n                            R.id.action_homeFragment_to_materialDetailsFragment,\n                            bundle\n                        )\n                        viewModel.product.postValue(null)\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun observePlus() {\n        viewModel.plus.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun observeMinus() {\n        viewModel.minus.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n\n    private fun onItemClick() {\n        cartAdapter.onItemClick = { cartProduct ->\n            viewModel.getProductFromCartProduct(cartProduct)\n        }\n    }\n\n\n    private fun onMinusClick() {\n        cartAdapter.onMinusesClick = { cartProduct ->\n            if (cartProduct.quantity > 1) {\n                viewModel.decreaseQuantity(cartProduct)\n                observeMinus()\n            } else {\n                val alertDialog = AlertDialog.Builder(requireContext()).create()\n                alertDialog.setTitle(\"\")\n                val view =\n                    LayoutInflater.from(context).inflate(R.layout.delete_alert_dialog, null, false)\n                alertDialog.setView(view)\n\n                view.findViewById<Button>(R.id.btn_no).setOnClickListener {\n                    alertDialog.dismiss()\n                }\n\n                view.findViewById<Button>(R.id.btn_yes).setOnClickListener {\n                    viewModel.deleteProductFromCart(cartProduct)\n                    alertDialog.dismiss()\n                }\n\n                alertDialog.show()\n            }\n        }\n    }\n\n    private fun onPlusClick() {\n        cartAdapter.onPlusClick = { cartProduct ->\n            viewModel.increaseQuantity(cartProduct)\n            observePlus()\n        }\n    }\n\n    private fun onCloseImgClick() {\n        binding.imgCloseCart.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun setupRecyclerView() {\n        cartAdapter = CartRecyclerAdapter()\n        binding.apply {\n            rvCart.layoutManager = LinearLayoutManager(context)\n            rvCart.adapter = cartAdapter\n            rvCart.addItemDecoration(VerticalSpacingItemDecorator(50))\n        }\n    }\n\n    private var cartProducts: CartProductsList? = null\n    private fun observeCart() {\n        viewModel.cartProducts.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n\n                    //Handle empty cart case\n                    val products = response.data\n                    if (products!!.isNotEmpty()) { // cart is not empty\n                        cartProducts = CartProductsList(products)\n                        cartAdapter.differ.submitList(products)\n                        var totalPrice:Double = 0.0\n                        products.forEach {\n                            if (it.newPrice != null && it.newPrice.isNotEmpty() && it.newPrice != \"0\") {\n                                totalPrice += it.newPrice.toDouble() * it.quantity\n                            } else\n                                totalPrice += it.price.toDouble() * it.quantity\n\n\n                        }\n\n                        binding.tvTotalprice.text = \"$ $totalPrice\"\n\n                    } else { // cart is empty\n                        cartAdapter.differ.submitList(products)\n                        binding.apply {\n                            btnCheckout.visibility = View.INVISIBLE\n                            linear.visibility = View.INVISIBLE\n                            imgEmptyBox.visibility = View.VISIBLE\n                            imgEmptyBoxTexture.visibility = View.VISIBLE\n                            tvEmptyCart.visibility = View.VISIBLE\n                        }\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Log.e(TAG, response.message.toString())\n                    Toast.makeText(activity, \"Oops error occurred\", Toast.LENGTH_SHORT).show()\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun hideLoading() {\n        binding.apply {\n            progressBar.visibility = View.GONE\n            linear.visibility = View.VISIBLE\n            btnCheckout.visibility = View.VISIBLE\n            imgEmptyBox.visibility = View.GONE\n            imgEmptyBoxTexture.visibility = View.GONE\n            tvEmptyCart.visibility = View.GONE\n        }\n    }\n\n    private fun showLoading() {\n        binding.apply {\n            progressBar.visibility = View.VISIBLE\n            linear.visibility = View.INVISIBLE\n            btnCheckout.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun onHomeClick() {\n        val btm = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        btm?.menu?.getItem(0)?.setOnMenuItemClickListener {\n            activity?.onBackPressed()\n            true\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n\n        val bottomNavigation = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNavigation?.visibility = View.VISIBLE\n    }\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt	(date 1695479913424)
-@@ -61,6 +61,8 @@
- 
-         onCheckoutClick()
- 
-+
-+
-     }
- 
-     private fun onCheckoutClick() {
-@@ -73,6 +75,9 @@
-         }
-     }
- 
-+
-+
-+
-     private fun observeProductClickNavigation() {
-         viewModel.product.observe(viewLifecycleOwner, Observer { response ->
- 
-@@ -280,6 +285,9 @@
-         })
-     }
- 
-+
-+
-+
-     private fun hideLoading() {
-         binding.apply {
-             progressBar.visibility = View.GONE
-Index: app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.adapters.viewpager\n\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.databinding.ViewpagerImageItemBinding\n\nclass ViewPager2Images : RecyclerView.Adapter<ViewPager2Images.ViewPager2ImagesViewHolder>() {\n    inner class ViewPager2ImagesViewHolder(val binding: ViewpagerImageItemBinding) : RecyclerView.ViewHolder(binding.root)\n\n    private val diffCallback = object : DiffUtil.ItemCallback<String>() {\n        override fun areItemsTheSame(oldItem: String, newItem: String): Boolean {\n            return oldItem == newItem\n        }\n\n        override fun areContentsTheSame(oldItem: String, newItem: String): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallback)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewPager2ImagesViewHolder {\n        return ViewPager2ImagesViewHolder(\n            ViewpagerImageItemBinding.inflate(\n                LayoutInflater.from(parent.context),parent,false\n            )\n        )\n    }\n\n    override fun onBindViewHolder(holder: ViewPager2ImagesViewHolder, position: Int) {\n        val imageUrl = differ.currentList[position]\n        Log.d(\"ViewPager2Images\", \"Loading image at position $position: $imageUrl\")\n        Glide.with(holder.itemView).load(imageUrl).into(holder.binding.imgsProduct)\n    }\n\n\n    override fun getItemCount(): Int {\n        return differ.currentList.size\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt b/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt
---- a/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt	(revision 55eaa09c31ae661f79927bc82766a90a2617631d)
-+++ b/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt	(date 1695479913438)
-@@ -7,11 +7,13 @@
- import androidx.recyclerview.widget.DiffUtil
- import androidx.recyclerview.widget.RecyclerView
- import com.bumptech.glide.Glide
-+import com.example.kleine.R
- import com.example.kleine.databinding.ViewpagerImageItemBinding
- 
- class ViewPager2Images : RecyclerView.Adapter<ViewPager2Images.ViewPager2ImagesViewHolder>() {
-     inner class ViewPager2ImagesViewHolder(val binding: ViewpagerImageItemBinding) : RecyclerView.ViewHolder(binding.root)
- 
-+
-     private val diffCallback = object : DiffUtil.ItemCallback<String>() {
-         override fun areItemsTheSame(oldItem: String, newItem: String): Boolean {
-             return oldItem == newItem
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023_9_22_9_21_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023_9_22_9_21_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023_9_22_9_21_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023_9_22_9_21_[Changes]/shelved.patch	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ /dev/null	(revision d1757b64c3798be216457dcc702dac99c820626f)
@@ -1,1131 +0,0 @@
-Index: app/src/main/res/navigation/shopping_nav_graph.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/shopping_nav_graph\"\r\n    app:startDestination=\"@id/homeFragment\">\r\n\r\n    <fragment\r\n        android:id=\"@+id/homeFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.HomeFragment\"\r\n        android:label=\"fragment_home\"\r\n        tools:layout=\"@layout/fragment_home\">\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_productPreviewFragment2\"\r\n            app:destination=\"@id/productPreviewFragment2\"\r\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\r\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\r\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\r\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\r\n        <action\r\n            android:id=\"@+id/action_homeFragment_to_searchFragment\"\r\n            app:destination=\"@id/searchFragment\"\r\n            app:popUpTo=\"@id/homeFragment\" />\r\n        <argument\r\n            android:name=\"position\"\r\n            app:argType=\"integer\"\r\n            android:defaultValue=\"0\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/searchFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.SearchFragment\"\r\n        android:label=\"fragment_search\"\r\n        tools:layout=\"@layout/fragment_search\">\r\n        <action\r\n            android:id=\"@+id/action_searchFragment_to_productPreviewFragment2\"\r\n            app:destination=\"@id/productPreviewFragment2\"\r\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\r\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\r\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\r\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\r\n        <action\r\n            android:id=\"@+id/action_searchFragment_to_homeFragment\"\r\n            app:destination=\"@id/homeFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/profileFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.ProfileFragment\"\r\n        android:label=\"fragment_profile\"\r\n        tools:layout=\"@layout/fragment_profile\">\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_billingFragment\"\r\n            app:destination=\"@id/billingFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_editUserInformation\"\r\n            app:destination=\"@id/editUserInformation\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_allOrdersFragment\"\r\n            app:destination=\"@id/allOrdersFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_languageFragment\"\r\n            app:destination=\"@id/languageFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_viewPartnershipFragment\"\r\n            app:destination=\"@id/viewPartnershipFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_helpFragment\"\r\n            app:destination=\"@id/helpFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_joinPartnerFragment\"\r\n            app:destination=\"@id/joinPartnerFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_profileFragment_to_adminDashboardFragment\"\r\n            app:destination=\"@id/adminDashboardFragment\"\r\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\r\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\r\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\r\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/cartFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.CartFragment\"\r\n        android:label=\"fragment_cart\"\r\n        tools:layout=\"@layout/fragment_cart\">\r\n        <action\r\n            android:id=\"@+id/action_cartFragment_to_productPreviewFragment2\"\r\n            app:destination=\"@id/productPreviewFragment2\"\r\n            app:popUpToInclusive=\"false\"\r\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\r\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\r\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\r\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\r\n        <action\r\n            android:id=\"@+id/action_cartFragment_to_billingFragment\"\r\n            app:destination=\"@id/billingFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/productPreviewFragment2\"\r\n        android:name=\"com.example.kleine.fragments.shopping.ProductPreviewFragment\"\r\n        android:label=\"fragment_product_preview\"\r\n        tools:layout=\"@layout/fragment_product_preview\">\r\n        <argument\r\n            android:name=\"product\"\r\n            app:argType=\"com.example.kleine.model.Product\" />\r\n\r\n\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/billingFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.BillingFragment\"\r\n        android:label=\"fragment_billing\"\r\n        tools:layout=\"@layout/fragment_billing\">\r\n        <action\r\n            android:id=\"@+id/action_billingFragment_to_addressFragment\"\r\n            app:destination=\"@id/addressFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\" />\r\n        <argument\r\n            android:name=\"clickFlag\"\r\n            app:argType=\"string\" />\r\n        <argument\r\n            android:name=\"price\"\r\n            android:defaultValue=\"null\"\r\n            app:argType=\"string\"\r\n            app:nullable=\"true\" />\r\n        <argument\r\n            android:name=\"products\"\r\n            android:defaultValue=\"@null\"\r\n            app:argType=\"com.example.kleine.model.CartProductsList\"\r\n            app:nullable=\"true\" />\r\n        <action\r\n            android:id=\"@+id/action_billingFragment_to_orderCompletion\"\r\n            app:destination=\"@id/orderCompletion\"\r\n            app:popUpTo=\"@id/billingFragment\"\r\n            app:popUpToInclusive=\"true\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/addressFragment\"\r\n        android:name=\"com.example.kleine.fragments.shopping.AddressFragment\"\r\n        android:label=\"fragment_address\"\r\n        tools:layout=\"@layout/fragment_address\">\r\n\r\n        <argument\r\n            android:name=\"address\"\r\n            android:defaultValue=\"@null\"\r\n            app:argType=\"com.example.kleine.model.Address\"\r\n            app:nullable=\"true\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/orderCompletion\"\r\n        android:name=\"com.example.kleine.fragments.shopping.OrderCompletion\"\r\n        android:label=\"fragment_order_completion\"\r\n        tools:layout=\"@layout/fragment_order_completion\">\r\n        <argument\r\n            android:name=\"order_completion_flag\"\r\n            app:argType=\"string\" />\r\n        <argument\r\n            android:name=\"orderNumber\"\r\n            android:defaultValue=\"null\"\r\n            app:argType=\"string\"\r\n            app:nullable=\"true\" />\r\n        <action\r\n            android:id=\"@+id/action_orderCompletion_to_orderDetails\"\r\n            app:destination=\"@id/orderDetails\" />\r\n        <argument\r\n            android:name=\"order\"\r\n            app:argType=\"com.example.kleine.model.Order\"\r\n            app:nullable=\"true\"\r\n            android:defaultValue=\"@null\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/editUserInformation\"\r\n        android:name=\"com.example.kleine.fragments.settings.EditUserInformationFragment\"\r\n        android:label=\"fragment_edit_user_information\"\r\n        tools:layout=\"@layout/fragment_edit_user_information\">\r\n        <argument\r\n            android:name=\"user\"\r\n            app:argType=\"com.example.kleine.model.User\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/allOrdersFragment\"\r\n        android:name=\"com.example.kleine.fragments.settings.AllOrdersFragment\"\r\n        android:label=\"fragment_all_orders\"\r\n        tools:layout=\"@layout/fragment_all_orders\" >\r\n        <action\r\n            android:id=\"@+id/action_allOrdersFragment_to_orderDetails\"\r\n            app:destination=\"@id/orderDetails\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/orderDetails\"\r\n        android:name=\"com.example.kleine.fragments.settings.OrderDetails\"\r\n        android:label=\"fragment_order_details\"\r\n        tools:layout=\"@layout/fragment_order_details\" >\r\n        <argument\r\n            android:name=\"order\"\r\n            app:argType=\"com.example.kleine.model.Order\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/languageFragment\"\r\n        android:name=\"com.example.kleine.fragments.settings.LanguageFragment\"\r\n        android:label=\"fragment_language\"\r\n        tools:layout=\"@layout/fragment_language\" />\r\n    <fragment\r\n        android:id=\"@+id/viewPartnershipFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.ViewPartnershipFragment\"\r\n        android:label=\"fragment_view_partnership\"\r\n        tools:layout=\"@layout/fragment_view_partnership\">\r\n        <action\r\n            android:id=\"@+id/action_viewPartnershipFragment_to_partnershipViewMaterialFragment\"\r\n            app:destination=\"@id/partnershipViewMaterialFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n        <action\r\n            android:id=\"@+id/action_viewPartnershipFragment_to_updatePartnershipFragment\"\r\n            app:destination=\"@id/updatePartnershipFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"/>\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/helpFragment\"\r\n        android:name=\"com.example.kleine.fragments.settings.HelpFragment\"\r\n        android:label=\"HelpFragment\"\r\n        tools:layout=\"@layout/fragment_help\"/>\r\n    <fragment\r\n        android:id=\"@+id/partnershipViewMaterialFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialFragment\"\r\n        android:label=\"fragment_partnership_view_material\"\r\n        tools:layout=\"@layout/fragment_partnership_view_material\" >\r\n        <action\r\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_partnershipViewMaterialDetailFragment\"\r\n            app:destination=\"@id/partnershipViewMaterialDetailFragment\"\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\">\r\n            <argument\r\n                android:name=\"documentId\"\r\n                app:argType=\"string\"\r\n                app:nullable=\"false\" />\r\n        </action>\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/partnershipViewMaterialDetailFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialDetailFragment\"\r\n        android:label=\"fragment_partnership_view_material_detail\"\r\n        tools:layout=\"@layout/fragment_partnership_view_material_detail\" >\r\n        <action\r\n            android:id=\"@+id/action_partnershipViewMaterialDetailFragment_to_replyCommentFragment\"\r\n            app:destination=\"@id/replyCommentFragment\"\r\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\r\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\r\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\r\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/replyCommentFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.ReplyCommentFragment\"\r\n        android:label=\"fragment_reply_comment\"\r\n        tools:layout=\"@layout/fragment_reply_comment\" />\r\n    <fragment\r\n        android:id=\"@+id/joinPartnerFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.JoinPartnerFragment\"\r\n        android:label=\"fragment_join__partner_\"\r\n        tools:layout=\"@layout/fragment_join__partner_\" />\r\n    <fragment\r\n        android:id=\"@+id/adminDashboardFragment\"\r\n        android:name=\"com.example.kleine.fragments.admin.AdminDashboardFragment\"\r\n        android:label=\"fragment_admin_dashboard\"\r\n        tools:layout=\"@layout/fragment_admin_dashboard\" >\r\n        <action\r\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewPartnershipFragment\"\r\n            app:destination=\"@id/adminViewPartnershipFragment\"\r\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\r\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\r\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\r\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/adminViewPartnershipFragment\"\r\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipFragment\"\r\n        android:label=\"fragment_admin_view_partnership\"\r\n        tools:layout=\"@layout/fragment_admin_view_partnership\" >\r\n        <action\r\n            android:id=\"@+id/action_adminViewPartnershipFragment_to_adminViewPartnershipRequestFragment\"\r\n            app:destination=\"@id/adminViewPartnershipRequestFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/adminViewPartnershipRequestFragment\"\r\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipRequestFragment\"\r\n        android:label=\"fragment_admin_view_partnership_request\"\r\n        tools:layout=\"@layout/fragment_admin_view_partnership_request\" />\r\n    <fragment\r\n        android:id=\"@+id/updatePartnershipFragment\"\r\n        android:name=\"com.example.kleine.fragments.partnership.UpdatePartnershipFragment\"\r\n        android:label=\"UpdatePartnershipFragment\"\r\n        tools:layout=\"@layout/fragment_update_partnership\"/>\r\n</navigation>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/navigation/shopping_nav_graph.xml b/app/src/main/res/navigation/shopping_nav_graph.xml
---- a/app/src/main/res/navigation/shopping_nav_graph.xml	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-+++ b/app/src/main/res/navigation/shopping_nav_graph.xml	(date 1695304521314)
-@@ -275,6 +275,9 @@
-                 app:argType="string"
-                 app:nullable="false" />
-         </action>
-+        <action
-+            android:id="@+id/action_partnershipViewMaterialFragment_to_setsFragment"
-+            app:destination="@id/setsFragment" />
-     </fragment>
-     <fragment
-         android:id="@+id/partnershipViewMaterialDetailFragment"
-@@ -331,4 +334,60 @@
-         android:name="com.example.kleine.fragments.partnership.UpdatePartnershipFragment"
-         android:label="UpdatePartnershipFragment"
-         tools:layout="@layout/fragment_update_partnership"/>
-+
-+<!--    quiz-->
-+    <fragment
-+        android:id="@+id/setsFragment"
-+        android:name="com.example.kleine.fragments.quiz.SetsFragment"
-+        android:label="SetsFragment"
-+        tools:layout="@layout/fragment_sets" >
-+        <action
-+            android:id="@+id/action_setsFragment_to_questionFragment"
-+            app:destination="@id/questionFragment" />
-+    </fragment>
-+    <fragment
-+        android:id="@+id/questionFragment"
-+        android:name="com.example.kleine.fragments.quiz.QuestionFragment"
-+        android:label="QuestionFragment"
-+        tools:layout="@layout/fragment_question" >
-+        <action
-+            android:id="@+id/action_questionFragment_to_addUpdateQuestionFragment"
-+            app:destination="@id/addUpdateQuestionFragment" />
-+    </fragment>
-+    <fragment
-+        android:id="@+id/addUpdateQuestionFragment"
-+        android:name="com.example.kleine.fragments.quiz.AddUpdateQuestionFragment"
-+        android:label="AddUpdateQuestionFragment"
-+        tools:layout="@layout/fragment_add_update_question" />
-+    <fragment
-+        android:id="@+id/quizFragment"
-+        android:name="com.example.kleine.fragments.quiz.QuizFragment"
-+        android:label="QuizFragment"
-+        tools:layout="@layout/fragment_quiz" >
-+        <action
-+            android:id="@+id/action_quizFragment_to_playFragment"
-+            app:destination="@id/playFragment" />
-+    </fragment>
-+    <fragment
-+        android:id="@+id/playFragment"
-+        android:name="com.example.kleine.fragments.quiz.PlayFragment"
-+        android:label="PlayFragment"
-+        tools:layout="@layout/fragment_play" >
-+        <action
-+            android:id="@+id/action_playFragment_to_resultFragment"
-+            app:destination="@id/resultFragment" />
-+        <action
-+            android:id="@+id/action_playFragment_to_quizFragment"
-+            app:destination="@id/quizFragment" />
-+    </fragment>
-+    <fragment
-+        android:id="@+id/resultFragment"
-+        android:name="com.example.kleine.fragments.quiz.ResultFragment"
-+        android:label="ResultFragment"
-+        tools:layout="@layout/fragment_result" >
-+        <action
-+            android:id="@+id/action_resultFragment_to_quizFragment"
-+            app:destination="@id/quizFragment" />
-+    </fragment>
-+    <!--    end quiz-->
- </navigation>
-\ No newline at end of file
-Index: app/src/main/res/layout/patner_question.xml
-===================================================================
-diff --git a/app/src/main/res/layout/patner_question.xml b/app/src/main/res/layout/patner_question.xml
-deleted file mode 100644
---- a/app/src/main/res/layout/patner_question.xml	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-+++ /dev/null	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-@@ -1,65 +0,0 @@
--<?xml version="1.0" encoding="utf-8"?>
--<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
--    xmlns:app="http://schemas.android.com/apk/res-auto"
--    xmlns:tools="http://schemas.android.com/tools"
--    android:layout_width="match_parent"
--    android:layout_height="match_parent">
--
--    <androidx.appcompat.widget.Toolbar
--        android:id="@+id/toolbar"
--        android:layout_width="0dp"
--        android:layout_height="wrap_content"
--        android:background="?attr/colorPrimary"
--        android:minHeight="?attr/actionBarSize"
--        android:theme="?attr/actionBarTheme"
--        android:backgroundTint="@color/black"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toTopOf="parent" />
--
--    <ImageView
--        android:id="@+id/addQuestions"
--        android:layout_width="30dp"
--        android:layout_height="30dp"
--        android:layout_marginEnd="16dp"
--        app:tint="@color/white"
--        app:layout_constraintBottom_toBottomOf="@+id/toolbar"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintTop_toTopOf="@+id/toolbar"
--        app:srcCompat="@drawable/add_new" />
--
--    <ImageView
--        android:id="@+id/imageView5"
--        android:layout_width="wrap_content"
--        android:layout_height="wrap_content"
--        android:layout_marginStart="16dp"
--        app:tint="@color/white"
--        app:layout_constraintBottom_toBottomOf="@+id/toolbar"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toTopOf="@+id/toolbar"
--        app:srcCompat="@drawable/ic_arrow_back" />
--
--    <TextView
--        android:id="@+id/textView2"
--        android:layout_width="wrap_content"
--        android:layout_height="wrap_content"
--        android:text="Questions"
--        android:textColor="@color/white"
--        android:textSize="20sp"
--        android:textStyle="bold"
--        app:layout_constraintBottom_toBottomOf="@+id/toolbar"
--        app:layout_constraintEnd_toStartOf="@+id/addQuestions"
--        app:layout_constraintStart_toEndOf="@+id/imageView5"
--        app:layout_constraintTop_toTopOf="@+id/toolbar" />
--
--    <androidx.recyclerview.widget.RecyclerView
--        android:id="@+id/recyQuestion"
--        android:layout_width="0dp"
--        android:layout_height="0dp"
--        android:layout_marginTop="8dp"
--        app:layout_constraintBottom_toBottomOf="parent"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toBottomOf="@+id/toolbar"
--        tools:listitem="@layout/partner_item_question" />
--</androidx.constraintlayout.widget.ConstraintLayout>
-\ No newline at end of file
-Index: app/src/main/res/layout/activity_play.xml
-===================================================================
-diff --git a/app/src/main/res/layout/activity_play.xml b/app/src/main/res/layout/activity_play.xml
-deleted file mode 100644
---- a/app/src/main/res/layout/activity_play.xml	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-+++ /dev/null	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-@@ -1,141 +0,0 @@
--<?xml version="1.0" encoding="utf-8"?>
--<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
--    xmlns:app="http://schemas.android.com/apk/res-auto"
--    xmlns:tools="http://schemas.android.com/tools"
--    android:layout_width="match_parent"
--    android:layout_height="match_parent"
--    tools:context=".playActivity">
--
--    <androidx.constraintlayout.widget.ConstraintLayout
--        android:id="@+id/constraintLayout"
--        android:layout_width="match_parent"
--        android:layout_height="0dp"
--        android:background="@drawable/background_top"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintHeight_percent="0.35"
--        app:layout_constraintHorizontal_bias="0.0"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toTopOf="parent">
--
--        <TextView
--            android:id="@+id/cpt_question"
--            android:layout_width="wrap_content"
--            android:layout_height="wrap_content"
--            android:layout_marginTop="16dp"
--            android:layout_marginEnd="16dp"
--            android:text="1/5"
--            android:textColor="@color/white"
--            android:textSize="20sp"
--            android:fontFamily="@font/chakrapetchbold"
--
--            app:layout_constraintEnd_toEndOf="parent"
--            app:layout_constraintHorizontal_bias="1.0"
--            app:layout_constraintStart_toEndOf="@+id/image_back"
--            app:layout_constraintTop_toTopOf="parent" />
--
--        <TextView
--            android:id="@+id/text_question"
--            android:layout_width="0dp"
--            android:layout_height="wrap_content"
--            android:layout_marginStart="16dp"
--            android:layout_marginEnd="16dp"
--            android:fontFamily="@font/chakrapetchbold"
--            android:text="question"
--            android:textColor="@color/white"
--            android:textSize="20sp"
--            android:gravity="center"
--            android:textStyle="bold"
--            app:layout_constraintBottom_toBottomOf="parent"
--            app:layout_constraintEnd_toEndOf="parent"
--            app:layout_constraintStart_toStartOf="parent"
--            app:layout_constraintTop_toTopOf="parent" />
--
--        <ImageView
--            android:id="@+id/image_back"
--            android:layout_width="wrap_content"
--            android:layout_height="wrap_content"
--            android:layout_marginStart="16dp"
--            android:layout_marginTop="16dp"
--            app:layout_constraintStart_toStartOf="parent"
--            app:layout_constraintTop_toTopOf="parent"
--            app:srcCompat="@drawable/ic_back" />
--    </androidx.constraintlayout.widget.ConstraintLayout>
--
--    <Button
--        android:id="@+id/btn_next"
--        style="@style/Widget.Kleine.Button"
--        android:layout_width="0dp"
--        android:layout_height="wrap_content"
--        android:text="Next"
--        android:textColor="@color/white"
--        android:fontFamily="@font/chakrapetchbold"
--        android:textSize="20sp"
--        android:padding="12sp"
--        android:background="@color/black"
--        app:layout_constraintBottom_toBottomOf="parent"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent" />
--
--    <LinearLayout
--        android:layout_width="match_parent"
--        android:layout_height="wrap_content"
--        android:layout_marginStart="16dp"
--        android:layout_marginEnd="16dp"
--        android:orientation="vertical"
--        app:layout_constraintBottom_toTopOf="@+id/btn_next"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toBottomOf="@+id/constraintLayout">
--
--        <Button
--            android:id="@+id/btn_choose1"
--            style="@style/Widget.Kleine.Button"
--            android:layout_width="match_parent"
--            android:layout_height="wrap_content"
--            android:background="@drawable/background_btn_choose"
--            android:fontFamily="@font/chakrapetchbold"
--            android:onClick="ClickChoose"
--            android:text="choose 1"
--            android:textColor="@color/black"
--            android:textSize="16sp" />
--
--        <Button
--            android:id="@+id/btn_choose2"
--            style="@style/Widget.Kleine.Button"
--            android:layout_width="match_parent"
--            android:layout_height="wrap_content"
--            android:layout_marginTop="12dp"
--            android:background="@drawable/background_btn_choose"
--            android:fontFamily="@font/chakrapetchbold"
--            android:onClick="ClickChoose"
--            android:text="choose 2"
--            android:textColor="@color/black"
--            android:textSize="16sp" />
--
--        <Button
--            android:id="@+id/btn_choose3"
--            style="@style/Widget.Kleine.Button"
--            android:layout_width="match_parent"
--            android:layout_height="wrap_content"
--            android:layout_marginTop="12dp"
--            android:background="@drawable/background_btn_choose"
--            android:fontFamily="@font/chakrapetchbold"
--            android:onClick="ClickChoose"
--            android:text="choose 3"
--            android:textColor="@color/black"
--            android:textSize="16sp" />
--
--        <Button
--            android:id="@+id/btn_choose4"
--            style="@style/Widget.Kleine.Button"
--            android:layout_width="match_parent"
--            android:layout_height="wrap_content"
--            android:layout_marginTop="12dp"
--            android:background="@drawable/background_btn_choose"
--            android:fontFamily="@font/chakrapetchbold"
--            android:onClick="ClickChoose"
--            android:text="choose 4"
--            android:textColor="@color/black"
--            android:textSize="16sp" />
--    </LinearLayout>
--</androidx.constraintlayout.widget.ConstraintLayout>
-\ No newline at end of file
-Index: app/src/main/res/layout/patner_add_question.xml
-===================================================================
-diff --git a/app/src/main/res/layout/patner_add_question.xml b/app/src/main/res/layout/patner_add_question.xml
-deleted file mode 100644
---- a/app/src/main/res/layout/patner_add_question.xml	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-+++ /dev/null	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-@@ -1,138 +0,0 @@
--<?xml version="1.0" encoding="utf-8"?>
--<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
--    xmlns:app="http://schemas.android.com/apk/res-auto"
--    xmlns:tools="http://schemas.android.com/tools"
--    android:layout_width="match_parent"
--    android:layout_height="match_parent">
--
--    <EditText
--        android:id="@+id/inputQuestion"
--        android:layout_width="0dp"
--        android:layout_height="wrap_content"
--        android:layout_marginStart="16dp"
--        android:layout_marginTop="24dp"
--        android:layout_marginEnd="16dp"
--        android:ems="10"
--        android:hint="Enter your qeustion"
--        android:inputType="text"
--        android:textColor="@color/black"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toTopOf="parent" />
--
--    <TextView
--        android:id="@+id/textView3"
--        android:layout_width="wrap_content"
--        android:layout_height="wrap_content"
--        android:layout_marginTop="5dp"
--        android:text="Corret\nAnswer"
--        android:textSize="12sp"
--        app:layout_constraintStart_toStartOf="@+id/inputQuestion"
--        app:layout_constraintTop_toBottomOf="@+id/inputQuestion" />
--
--    <LinearLayout
--        android:id="@+id/linearLayout"
--        android:layout_width="match_parent"
--        android:layout_height="wrap_content"
--        android:layout_marginTop="16dp"
--        android:orientation="horizontal"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toBottomOf="@+id/textView3">
--
--        <RadioGroup
--            android:id="@+id/optionContainer"
--            android:layout_width="wrap_content"
--            android:layout_height="match_parent"
--            android:orientation="vertical">
--
--            <RadioButton
--                android:id="@+id/radioButton"
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:layout_weight="1"
--                android:checked="true"
--                android:text="A)" />
--
--            <RadioButton
--                android:id="@+id/radioButton2"
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:layout_weight="1"
--                android:checked="true"
--                android:text="B)" />
--
--            <RadioButton
--                android:id="@+id/radioButton3"
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:layout_weight="1"
--                android:checked="true"
--                android:text="C)" />
--
--            <RadioButton
--                android:id="@+id/radioButton4"
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:layout_weight="1"
--                android:checked="true"
--                android:text="D)" />
--        </RadioGroup>
--
--        <LinearLayout
--            android:id="@+id/answerContainer"
--            android:layout_width="0dp"
--            android:layout_height="wrap_content"
--            android:layout_weight="1"
--            android:orientation="vertical">
--
--            <EditText
--                android:id="@+id/editTextText2"
--                android:layout_width="match_parent"
--                android:layout_height="wrap_content"
--                android:layout_margin="10dp"
--                android:ems="10"
--                android:inputType="text"
--                android:text="" />
--
--            <EditText
--                android:id="@+id/editTextText3"
--                android:layout_width="match_parent"
--                android:layout_height="wrap_content"
--                android:layout_margin="10dp"
--                android:ems="10"
--                android:inputType="text"
--                android:text="" />
--
--            <EditText
--                android:id="@+id/editTextText4"
--                android:layout_width="match_parent"
--                android:layout_height="wrap_content"
--                android:layout_margin="10dp"
--                android:ems="10"
--                android:inputType="text"
--                android:text="" />
--
--            <EditText
--                android:id="@+id/editTextText5"
--                android:layout_width="match_parent"
--                android:layout_height="wrap_content"
--                android:layout_margin="10dp"
--                android:ems="10"
--                android:inputType="text"
--                android:text="" />
--        </LinearLayout>
--
--    </LinearLayout>
--
--    <Button
--        android:id="@+id/btnUploadQuestion"
--        android:layout_width="wrap_content"
--        android:layout_height="wrap_content"
--        android:layout_marginTop="32dp"
--        android:text="Upload"
--        android:backgroundTint="@color/black"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toBottomOf="@+id/linearLayout" />
--</androidx.constraintlayout.widget.ConstraintLayout>
-\ No newline at end of file
-Index: app/src/main/res/layout/activity_resulte.xml
-===================================================================
-diff --git a/app/src/main/res/layout/activity_resulte.xml b/app/src/main/res/layout/activity_resulte.xml
-deleted file mode 100644
---- a/app/src/main/res/layout/activity_resulte.xml	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-+++ /dev/null	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-@@ -1,45 +0,0 @@
--<?xml version="1.0" encoding="utf-8"?>
--<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
--    xmlns:app="http://schemas.android.com/apk/res-auto"
--    xmlns:tools="http://schemas.android.com/tools"
--    android:layout_width="match_parent"
--    android:layout_height="match_parent"
--    android:background="@color/white"
--    tools:context=".settingActivity">
--
--    <TextView
--        android:id="@+id/textView"
--        android:layout_width="wrap_content"
--        android:layout_height="wrap_content"
--        android:text="Score : "
--        android:textSize="35sp"
--        android:textColor="@color/black"
--        android:textStyle="bold"
--        android:fontFamily="@font/chakrapetchbold"
--        app:layout_constraintBottom_toBottomOf="parent"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toTopOf="parent"
--        app:layout_constraintVertical_bias="0.3" />
--
--    <Button
--        android:id="@+id/btn_restart"
--        style="@style/Widget.Kleine.Button"
--        android:layout_width="match_parent"
--        android:layout_height="wrap_content"
--        android:layout_marginStart="30dp"
--        android:layout_marginEnd="30dp"
--        android:background="@drawable/background_btn"
--        android:fontFamily="@font/chakrapetchbold"
--        android:padding="8dp"
--        android:text="Restart"
--        android:textColor="@color/white"
--        android:textSize="20sp"
--        android:textStyle="bold"
--        app:layout_constraintBottom_toBottomOf="parent"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toBottomOf="@+id/textView"
--        app:layout_constraintVertical_bias="0.37" />
--
--</androidx.constraintlayout.widget.ConstraintLayout>
-\ No newline at end of file
-Index: app/src/main/res/layout/partner_sets.xml
-===================================================================
-diff --git a/app/src/main/res/layout/partner_sets.xml b/app/src/main/res/layout/partner_sets.xml
-deleted file mode 100644
---- a/app/src/main/res/layout/partner_sets.xml	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-+++ /dev/null	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-@@ -1,72 +0,0 @@
--<?xml version="1.0" encoding="utf-8"?>
--<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
--    xmlns:app="http://schemas.android.com/apk/res-auto"
--    xmlns:tools="http://schemas.android.com/tools"
--    android:layout_width="match_parent"
--    android:layout_height="match_parent"
--    android:background="@color/background">
--
--    <androidx.appcompat.widget.Toolbar
--        android:id="@+id/toolbar"
--        android:layout_width="0dp"
--        android:layout_height="wrap_content"
--        android:background="?attr/colorPrimary"
--        android:minHeight="?attr/actionBarSize"
--        android:theme="?attr/actionBarTheme"
--        android:backgroundTint="@color/black"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toTopOf="parent" />
--
--    <ImageView
--        android:id="@+id/addQuestions"
--        android:layout_width="30dp"
--        android:layout_height="30dp"
--        android:layout_marginEnd="16dp"
--        app:layout_constraintBottom_toBottomOf="@+id/toolbar"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintTop_toTopOf="@+id/toolbar"
--        app:srcCompat="@drawable/add_new"
--        app:tint="@color/white" />
--
--    <ImageView
--        android:id="@+id/imageView5"
--        android:layout_width="wrap_content"
--        android:layout_height="wrap_content"
--        android:layout_marginStart="16dp"
--        app:layout_constraintBottom_toBottomOf="@+id/toolbar"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toTopOf="@+id/toolbar"
--        app:srcCompat="@drawable/ic_arrow_back"
--        app:tint="@color/white" />
--
--    <TextView
--        android:id="@+id/textView2"
--        android:layout_width="wrap_content"
--        android:layout_height="wrap_content"
--        android:text="Choose Set"
--        android:textColor="@color/white"
--        android:textSize="20sp"
--        android:textStyle="bold"
--        app:layout_constraintBottom_toBottomOf="@+id/toolbar"
--        app:layout_constraintEnd_toStartOf="@+id/addQuestions"
--        app:layout_constraintStart_toEndOf="@+id/imageView5"
--        app:layout_constraintTop_toTopOf="@+id/toolbar" />
--
--    <GridView
--        android:id="@+id/gridView"
--        android:layout_width="match_parent"
--        android:layout_height="0dp"
--        android:layout_marginTop="8dp"
--        android:columnWidth="150dp"
--        android:gravity="center"
--        android:horizontalSpacing="15dp"
--        android:verticalSpacing="15dp"
--
--        app:layout_constraintBottom_toBottomOf="parent"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toBottomOf="@+id/toolbar"
--        tools:listitem="@layout/partner_item_sets" />
--<!--    android:numColumns="auto_fit"-->
--</androidx.constraintlayout.widget.ConstraintLayout>
-\ No newline at end of file
-Index: app/src/main/res/layout/activity_main.xml
-===================================================================
-diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
-deleted file mode 100644
---- a/app/src/main/res/layout/activity_main.xml	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-+++ /dev/null	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-@@ -1,67 +0,0 @@
--<?xml version="1.0" encoding="utf-8"?>
--<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
--    xmlns:app="http://schemas.android.com/apk/res-auto"
--    xmlns:tools="http://schemas.android.com/tools"
--    android:layout_width="match_parent"
--    android:layout_height="match_parent"
--    >
--
--
--    <TextView
--        android:id="@+id/textView"
--        android:layout_width="wrap_content"
--        android:layout_height="wrap_content"
--        android:text="QUIZ"
--        android:textSize="35sp"
--        android:textColor="@color/black"
--        android:textStyle="bold"
--        android:fontFamily="@font/chakrapetchbold"
--        app:layout_constraintBottom_toBottomOf="parent"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toTopOf="parent"
--        app:layout_constraintVertical_bias="0.25" />
--
--    <LinearLayout
--        android:layout_width="match_parent"
--        android:layout_height="wrap_content"
--        android:orientation="vertical"
--        app:layout_constraintBottom_toBottomOf="parent"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintStart_toStartOf="parent"
--        android:layout_marginLeft="20sp"
--        android:layout_marginRight="20sp"
--        app:layout_constraintTop_toBottomOf="@+id/textView">
--
--        <Button
--            android:id="@+id/btn_play"
--            style="@style/Widget.Kleine.Button"
--            android:layout_width="match_parent"
--            android:layout_height="wrap_content"
--            android:background="@drawable/background_btn"
--            android:fontFamily="@font/chakrapetchbold"
--            android:onClick="main_btn"
--            android:padding="8dp"
--            android:text="Play"
--            android:textColor="@color/white"
--            android:textSize="20sp"
--            android:textStyle="bold"
--            app:rippleColor="#97FFFFFF" />
--
--        <Button
--            android:id="@+id/btn_exit"
--            style="@style/Widget.Kleine.Button"
--            android:layout_width="match_parent"
--            android:layout_height="wrap_content"
--            android:layout_marginTop="16dp"
--            android:background="@drawable/background_btn"
--            android:textStyle="bold"
--            android:textColor="@color/white"
--            android:fontFamily="@font/chakrapetchbold"
--            android:textSize="20sp"
--            android:onClick="main_btn"
--            android:padding="8dp"
--            android:text="exit" />
--    </LinearLayout>
--
--</androidx.constraintlayout.widget.ConstraintLayout>
-\ No newline at end of file
-Index: app/src/main/res/values/colors.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <color name=\"purple_200\">#FFBB86FC</color>\r\n    <color name=\"purple_500\">#FF6200EE</color>\r\n    <color name=\"purple_700\">#FFFFFF</color>\r\n    <color name=\"teal_200\">#FF03DAC5</color>\r\n    <color name=\"teal_700\">#FF018786</color>\r\n    <color name=\"black\">#FF000000</color>\r\n    <color name=\"white\">#FFFFFF</color>\r\n\r\n    <color name=\"g_hint\">#666666</color>\r\n    <color name=\"g_black\">#171717</color>\r\n    <color name=\"g_blue\">#000DAE</color>\r\n    <color name=\"g_white\">#F5F8FA</color>\r\n    <color name=\"g_dark_blue\">#000759</color>\r\n    <color name=\"g_icon_tint\">#97AABD</color>\r\n    <color name=\"g_pink\">#FF9999</color>\r\n    <color name=\"g_card_background\">#FAFDFF</color>\r\n    <color name=\"g_search_and_icons\">#FAFBFC</color>\r\n    <color name=\"g_line\">#E9EAEC</color>\r\n    <color name=\"g_circle_shadow\">#B8D9FA</color>\r\n    <color name=\"g_red\">#FF0000</color>\r\n    <color name=\"g_text_hint\">#969899</color>\r\n    <color name=\"g_orange\">#F8BA00</color>\r\n\r\n    <color name=\"primary\">#6A7CFF</color>\r\n    <color name=\"background\">#F7F7FA</color>\r\n    <color name=\"card_background\">#FFFFFF</color>\r\n    <color name=\"primary_text\">#000000</color>\r\n    <color name=\"secondary_text\">#474747</color>\r\n    <color name=\"dashboard_item\">#6A7CFF</color>\r\n    <color name=\"fail_quiz\">#FF0000</color>\r\n    <color name=\"pass_quiz\">#00BD00</color>\r\n    <color name=\"green\">#00FF00</color>\r\n    <color name=\"view_data\">#CD6A7CFF</color>\r\n\r\n    <!--    quiz-->\r\n    <color name=\"primary_color\">#565cce</color>\r\n    <color name=\"second_color\">#8d92fa</color>\r\n\r\n    <!--admin dashboard-->\r\n    <color name=\"red\">#FF055A</color>\r\n    <color name=\"on\">#01ff5a</color>\r\n    <color name=\"splash_text\">#7ffb00</color>\r\n    <color name=\"yellow\">#ffb300</color>\r\n    <color name=\"green1\">#00bfa5</color>\r\n    <color name=\"pink\">#D242EC</color>\r\n    <color name=\"news\">#C3D607</color>\r\n    <color name=\"blue\">#72b6e7</color>\r\n    <color name=\"lightGray\">#c1c1c1</color>\r\n    <color name=\"textColor\">#121212</color>\r\n\r\n\r\n</resources>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/values/colors.xml b/app/src/main/res/values/colors.xml
---- a/app/src/main/res/values/colors.xml	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-+++ b/app/src/main/res/values/colors.xml	(date 1695303660006)
-@@ -37,6 +37,7 @@
-     <!--    quiz-->
-     <color name="primary_color">#565cce</color>
-     <color name="second_color">#8d92fa</color>
-+    <color name="lightpink">#FFA0B1</color>
- 
-     <!--admin dashboard-->
-     <color name="red">#FF055A</color>
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" project-jdk-name=\"jbr-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-+++ b/.idea/misc.xml	(date 1695332054282)
-@@ -1,6 +1,6 @@
- <project version="4">
-   <component name="ExternalStorageConfigurationManager" enabled="true" />
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/build/classes" />
-   </component>
- </project>
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/fragments/partnership/PartnershipViewMaterialFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.partnership\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.PopupMenu\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.lifecycle.Observer\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport com.example.kleine.R\r\nimport com.example.kleine.databinding.FragmentPartnershipViewMaterialBinding\r\nimport com.example.kleine.databinding.RecyclerViewMaterialDataBinding\r\nimport com.example.kleine.model.MaterialData\r\nimport com.example.kleine.viewmodel.material.MaterialViewModel\r\nimport com.google.firebase.storage.FirebaseStorage\r\n\r\nclass PartnershipViewMaterialFragment : Fragment() {\r\n\r\n    val TAG = \"PartnershipViewMaterialFragment\"\r\n    private lateinit var binding: FragmentPartnershipViewMaterialBinding\r\n    private val materialViewModel: MaterialViewModel by viewModels()\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = FragmentPartnershipViewMaterialBinding.inflate(inflater, container, false)\r\n\r\n        val materialAdapter = MaterialAdapter(listOf())\r\n        binding.materialData.adapter = materialAdapter\r\n        // Observe the material list LiveData from the ViewModel\r\n        materialViewModel.materialList.observe(viewLifecycleOwner, Observer { materials ->\r\n            // Update the adapter's materialList when the LiveData changes\r\n            materialAdapter.materialList = materials\r\n            materialAdapter.notifyDataSetChanged()\r\n        })\r\n        materialViewModel.fetchMaterialsData()\r\n\r\n        return binding.root\r\n    }\r\n\r\n    inner class MaterialViewHolder(private val itemBinding: RecyclerViewMaterialDataBinding) : RecyclerView.ViewHolder(itemBinding.root) {\r\n        fun bind(material: MaterialData) {\r\n            itemBinding.materialName.text = material.name\r\n            itemBinding.materialDesc.text = material.desc\r\n            itemBinding.materialRequirement.text = \"Requirement: ${material.requirement}\"\r\n            itemBinding.ratingBar.rating = material.rating.toFloat()\r\n\r\n            if (material.imageUrl.isNotEmpty()) {\r\n                val storageReference = FirebaseStorage.getInstance().getReferenceFromUrl(material.imageUrl)\r\n                storageReference.downloadUrl.addOnSuccessListener { uri ->\r\n                    Glide.with(itemBinding.root.context)\r\n                        .load(uri.toString())\r\n                        .into(itemBinding.image)\r\n                }\r\n            }\r\n\r\n            onViewMaterialClick(itemBinding, material.id)\r\n            setupPopupMenu(itemBinding.threeDotsImage)\r\n        }\r\n    }\r\n\r\n    inner class MaterialAdapter(var materialList: List<MaterialData>) : RecyclerView.Adapter<MaterialViewHolder>() {\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MaterialViewHolder {\r\n            val inflater = LayoutInflater.from(parent.context)\r\n            val itemBinding = RecyclerViewMaterialDataBinding.inflate(inflater, parent, false)\r\n            return MaterialViewHolder(itemBinding)\r\n        }\r\n\r\n        override fun onBindViewHolder(holder: MaterialViewHolder, position: Int) {\r\n            holder.bind(materialList[position])\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return materialList.size\r\n        }\r\n    }\r\n\r\n    private fun onViewMaterialClick(itemBinding: RecyclerViewMaterialDataBinding, id: String) {\r\n        itemBinding.materialViewData.setOnClickListener {\r\n            val bundle = Bundle()\r\n            bundle.putString(\"documentId\", id)\r\n            findNavController().navigate(R.id.action_partnershipViewMaterialFragment_to_partnershipViewMaterialDetailFragment, bundle)\r\n        }\r\n    }\r\n\r\n    private fun setupPopupMenu(threeDotsImageView: ImageView) {\r\n        threeDotsImageView.setOnClickListener {\r\n            val popupMenu = PopupMenu(requireContext(), it)\r\n            popupMenu.menuInflater.inflate(R.menu.popup, popupMenu.menu)\r\n            popupMenu.setOnMenuItemClickListener { item ->\r\n                when (item.itemId) {\r\n                    R.id.edit_material -> true\r\n                    R.id.disable_material -> {\r\n                        showConfirmationDialog()\r\n                        true\r\n                    }\r\n                    else -> false\r\n                }\r\n            }\r\n            popupMenu.show()\r\n        }\r\n    }\r\n\r\n    private fun showConfirmationDialog() {\r\n        AlertDialog.Builder(requireContext())\r\n            .setTitle(\"Disable Material\")\r\n            .setMessage(\"Are you sure you want to disable this material?\")\r\n            .setPositiveButton(android.R.string.yes) { _, _ ->\r\n                // Implement your logic to disable the material here.\r\n            }\r\n            .setNegativeButton(android.R.string.no, null)\r\n            .show()\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/partnership/PartnershipViewMaterialFragment.kt b/app/src/main/java/com/example/kleine/fragments/partnership/PartnershipViewMaterialFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/partnership/PartnershipViewMaterialFragment.kt	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-+++ b/app/src/main/java/com/example/kleine/fragments/partnership/PartnershipViewMaterialFragment.kt	(date 1695304707277)
-@@ -61,6 +61,7 @@
-             }
- 
-             onViewMaterialClick(itemBinding, material.id)
-+            onViewQuizClick(itemBinding, material.id)
-             setupPopupMenu(itemBinding.threeDotsImage)
-         }
-     }
-@@ -89,6 +90,14 @@
-         }
-     }
- 
-+    private fun onViewQuizClick(itemBinding: RecyclerViewMaterialDataBinding, id: String) {
-+        itemBinding.materialViewQuiz.setOnClickListener {
-+            val bundle = Bundle()
-+            bundle.putString("materialDocId", id)
-+            findNavController().navigate(R.id.action_partnershipViewMaterialFragment_to_setsFragment, bundle)
-+        }
-+    }
-+
-     private fun setupPopupMenu(threeDotsImageView: ImageView) {
-         threeDotsImageView.setOnClickListener {
-             val popupMenu = PopupMenu(requireContext(), it)
-Index: app/src/main/res/layout/partner_item_sets.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\">\r\n\r\n    <androidx.cardview.widget.CardView\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:layout_marginTop=\"8dp\"\r\n        android:layout_marginEnd=\"8dp\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <androidx.constraintlayout.widget.ConstraintLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/textView4\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"16dp\"\r\n                android:layout_marginTop=\"24dp\"\r\n                android:layout_marginBottom=\"24dp\"\r\n                android:text=\"SET - \"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\"\r\n                app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                app:layout_constraintStart_toStartOf=\"parent\"\r\n                app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/setNumber\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"2dp\"\r\n                android:text=\"1\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\"\r\n                app:layout_constraintBottom_toBottomOf=\"@+id/textView4\"\r\n                app:layout_constraintStart_toEndOf=\"@+id/textView4\"\r\n                app:layout_constraintTop_toTopOf=\"@+id/textView4\" />\r\n\r\n        </androidx.constraintlayout.widget.ConstraintLayout>\r\n    </androidx.cardview.widget.CardView>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/partner_item_sets.xml b/app/src/main/res/layout/partner_item_sets.xml
---- a/app/src/main/res/layout/partner_item_sets.xml	(revision 96bb9e406261543910d5c7ee1eb8af0e612817b6)
-+++ b/app/src/main/res/layout/partner_item_sets.xml	(date 1695303660058)
-@@ -20,7 +20,7 @@
-             android:layout_height="match_parent">
- 
-             <TextView
--                android:id="@+id/textView4"
-+                android:id="@+id/setName"
-                 android:layout_width="wrap_content"
-                 android:layout_height="wrap_content"
-                 android:layout_marginStart="16dp"
-@@ -43,9 +43,9 @@
-                 android:textColor="@color/black"
-                 android:textSize="16sp"
-                 android:textStyle="bold"
--                app:layout_constraintBottom_toBottomOf="@+id/textView4"
--                app:layout_constraintStart_toEndOf="@+id/textView4"
--                app:layout_constraintTop_toTopOf="@+id/textView4" />
-+                app:layout_constraintBottom_toBottomOf="@+id/setName"
-+                app:layout_constraintStart_toEndOf="@+id/setName"
-+                app:layout_constraintTop_toTopOf="@+id/setName" />
- 
-         </androidx.constraintlayout.widget.ConstraintLayout>
-     </androidx.cardview.widget.CardView>
-Index: app/src/main/res/layout/fragment_sets.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_sets.xml b/app/src/main/res/layout/fragment_sets.xml
-new file mode 100644
---- /dev/null	(date 1695309991868)
-+++ b/app/src/main/res/layout/fragment_sets.xml	(date 1695309991868)
-@@ -0,0 +1,81 @@
-+<?xml version="1.0" encoding="utf-8"?>
-+<layout xmlns:android="http://schemas.android.com/apk/res/android"
-+    xmlns:app="http://schemas.android.com/apk/res-auto"
-+    xmlns:tools="http://schemas.android.com/tools">
-+
-+    <data>
-+        <variable
-+            name="setsViewModel"
-+            type="com.example.kleine.viewmodel.quiz.SetsViewModel" />
-+    </data>
-+
-+    <androidx.constraintlayout.widget.ConstraintLayout
-+        android:layout_width="match_parent"
-+        android:layout_height="match_parent"
-+        android:background="@color/background">
-+
-+        <androidx.appcompat.widget.Toolbar
-+            android:id="@+id/toolbar"
-+            android:layout_width="0dp"
-+            android:layout_height="wrap_content"
-+            android:background="?attr/colorPrimary"
-+            android:minHeight="?attr/actionBarSize"
-+            android:theme="?attr/actionBarTheme"
-+            android:backgroundTint="@color/black"
-+            app:layout_constraintEnd_toEndOf="parent"
-+            app:layout_constraintStart_toStartOf="parent"
-+            app:layout_constraintTop_toTopOf="parent" />
-+
-+        <ImageView
-+            android:id="@+id/addQuestions"
-+            android:layout_width="30dp"
-+            android:layout_height="30dp"
-+            android:layout_marginEnd="16dp"
-+            app:layout_constraintBottom_toBottomOf="@+id/toolbar"
-+            app:layout_constraintEnd_toEndOf="parent"
-+            app:layout_constraintTop_toTopOf="@+id/toolbar"
-+            app:srcCompat="@drawable/add_new"
-+            app:tint="@color/white" />
-+
-+        <ImageView
-+            android:id="@+id/arrow_back"
-+            android:layout_width="wrap_content"
-+            android:layout_height="wrap_content"
-+            android:layout_marginStart="16dp"
-+            app:layout_constraintBottom_toBottomOf="@+id/toolbar"
-+            app:layout_constraintStart_toStartOf="parent"
-+            app:layout_constraintTop_toTopOf="@+id/toolbar"
-+            app:srcCompat="@drawable/ic_arrow_back"
-+            app:tint="@color/white" />
-+
-+        <TextView
-+            android:id="@+id/textView2"
-+            android:layout_width="wrap_content"
-+            android:layout_height="wrap_content"
-+            android:text="Choose Set"
-+            android:textColor="@color/white"
-+            android:textSize="20sp"
-+            android:textStyle="bold"
-+            app:layout_constraintBottom_toBottomOf="@+id/toolbar"
-+            app:layout_constraintEnd_toStartOf="@+id/addQuestions"
-+            app:layout_constraintStart_toEndOf="@+id/arrow_back"
-+            app:layout_constraintTop_toTopOf="@+id/toolbar" />
-+
-+        <GridView
-+            android:id="@+id/gridView"
-+            android:layout_width="match_parent"
-+            android:layout_height="0dp"
-+            android:layout_marginTop="8dp"
-+            android:columnWidth="150dp"
-+            android:gravity="center"
-+            android:horizontalSpacing="15dp"
-+            android:verticalSpacing="15dp"
-+            app:layout_constraintBottom_toBottomOf="parent"
-+            app:layout_constraintEnd_toEndOf="parent"
-+            app:layout_constraintStart_toStartOf="parent"
-+            app:layout_constraintTop_toBottomOf="@+id/toolbar"
-+            android:numColumns="auto_fit"
-+            tools:listitem="@layout/partner_item_sets"
-+            />
-+    </androidx.constraintlayout.widget.ConstraintLayout>
-+</layout>
-\ No newline at end of file
-Index: app/src/main/res/layout/fragment_question.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_question.xml b/app/src/main/res/layout/fragment_question.xml
-new file mode 100644
---- /dev/null	(date 1695303660144)
-+++ b/app/src/main/res/layout/fragment_question.xml	(date 1695303660144)
-@@ -0,0 +1,75 @@
-+<?xml version="1.0" encoding="utf-8"?>
-+<layout xmlns:android="http://schemas.android.com/apk/res/android"
-+    xmlns:app="http://schemas.android.com/apk/res-auto"
-+    xmlns:tools="http://schemas.android.com/tools">
-+
-+    <data>
-+        <variable
-+            name="questionViewModel"
-+            type="com.example.kleine.viewmodel.quiz.QuestionViewModel" />
-+    </data>
-+
-+    <androidx.constraintlayout.widget.ConstraintLayout
-+        android:layout_width="match_parent"
-+        android:layout_height="match_parent"
-+        android:background="@color/background">
-+
-+        <androidx.appcompat.widget.Toolbar
-+            android:id="@+id/toolbar"
-+            android:layout_width="0dp"
-+            android:layout_height="wrap_content"
-+            android:background="?attr/colorPrimary"
-+            android:minHeight="?attr/actionBarSize"
-+            android:theme="?attr/actionBarTheme"
-+            android:backgroundTint="@color/black"
-+            app:layout_constraintEnd_toEndOf="parent"
-+            app:layout_constraintStart_toStartOf="parent"
-+            app:layout_constraintTop_toTopOf="parent" />
-+
-+        <ImageView
-+            android:id="@+id/addQuestions"
-+            android:layout_width="30dp"
-+            android:layout_height="30dp"
-+            android:layout_marginEnd="16dp"
-+            app:tint="@color/white"
-+            app:layout_constraintBottom_toBottomOf="@+id/toolbar"
-+            app:layout_constraintEnd_toEndOf="parent"
-+            app:layout_constraintTop_toTopOf="@+id/toolbar"
-+            app:srcCompat="@drawable/add_new" />
-+
-+        <ImageView
-+            android:id="@+id/arrow_back"
-+            android:layout_width="wrap_content"
-+            android:layout_height="wrap_content"
-+            android:layout_marginStart="16dp"
-+            app:tint="@color/white"
-+            app:layout_constraintBottom_toBottomOf="@+id/toolbar"
-+            app:layout_constraintStart_toStartOf="parent"
-+            app:layout_constraintTop_toTopOf="@+id/toolbar"
-+            app:srcCompat="@drawable/ic_arrow_back" />
-+
-+        <TextView
-+            android:id="@+id/textView2"
-+            android:layout_width="wrap_content"
-+            android:layout_height="wrap_content"
-+            android:text="Questions"
-+            android:textColor="@color/white"
-+            android:textSize="20sp"
-+            android:textStyle="bold"
-+            app:layout_constraintBottom_toBottomOf="@+id/toolbar"
-+            app:layout_constraintEnd_toStartOf="@+id/addQuestions"
-+            app:layout_constraintStart_toEndOf="@+id/arrow_back"
-+            app:layout_constraintTop_toTopOf="@+id/toolbar" />
-+
-+        <androidx.recyclerview.widget.RecyclerView
-+            android:id="@+id/recyQuestion"
-+            android:layout_width="0dp"
-+            android:layout_height="0dp"
-+            android:layout_marginTop="8dp"
-+            app:layout_constraintBottom_toBottomOf="parent"
-+            app:layout_constraintEnd_toEndOf="parent"
-+            app:layout_constraintStart_toStartOf="parent"
-+            app:layout_constraintTop_toBottomOf="@+id/toolbar"
-+            tools:listitem="@layout/partner_item_question" />
-+    </androidx.constraintlayout.widget.ConstraintLayout>
-+</layout>
-\ No newline at end of file
-Index: app/src/main/res/layout/fragment_add_update_question.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_add_update_question.xml b/app/src/main/res/layout/fragment_add_update_question.xml
-new file mode 100644
---- /dev/null	(date 1695303660185)
-+++ b/app/src/main/res/layout/fragment_add_update_question.xml	(date 1695303660185)
-@@ -0,0 +1,182 @@
-+<?xml version="1.0" encoding="utf-8"?>
-+<layout xmlns:android="http://schemas.android.com/apk/res/android"
-+    xmlns:app="http://schemas.android.com/apk/res-auto"
-+    xmlns:tools="http://schemas.android.com/tools">
-+
-+    <data>
-+
-+    </data>
-+
-+    <LinearLayout
-+        android:layout_width="match_parent"
-+        android:layout_height="match_parent"
-+        android:orientation="vertical">
-+
-+        <androidx.appcompat.widget.Toolbar
-+            android:id="@+id/toolbar"
-+            android:layout_width="match_parent"
-+            android:layout_height="wrap_content"
-+            android:background="?attr/colorPrimary"
-+            android:minHeight="?attr/actionBarSize"
-+            android:theme="?attr/actionBarTheme"
-+            android:backgroundTint="@color/black">
-+
-+            <TextView
-+                android:layout_width="wrap_content"
-+                android:layout_height="wrap_content"
-+                android:text="Add/Update Question"
-+                android:layout_gravity="center"
-+                android:textColor="@color/white"
-+                android:textSize="20sp"
-+                android:textStyle="bold"/>
-+
-+            <ImageView
-+                android:id="@+id/arrow_back"
-+                android:layout_width="wrap_content"
-+                android:layout_height="wrap_content"
-+                android:layout_marginStart="16dp"
-+                app:tint="@color/white"
-+                app:srcCompat="@drawable/ic_arrow_back" />
-+        </androidx.appcompat.widget.Toolbar>
-+
-+        <androidx.constraintlayout.widget.ConstraintLayout
-+            android:layout_width="match_parent"
-+            android:layout_height="match_parent"
-+            android:background="@color/background">
-+
-+            <EditText
-+                android:id="@+id/inputQuestion"
-+                android:layout_width="0dp"
-+                android:layout_height="wrap_content"
-+                android:layout_marginStart="16dp"
-+                android:layout_marginTop="24dp"
-+                android:layout_marginEnd="16dp"
-+                android:ems="10"
-+                android:hint="Enter your qeustion"
-+                android:inputType="text"
-+                android:textColor="@color/black"
-+                app:layout_constraintEnd_toEndOf="parent"
-+                app:layout_constraintStart_toStartOf="parent"
-+                app:layout_constraintTop_toTopOf="parent" />
-+
-+            <TextView
-+                android:id="@+id/textView3"
-+                android:layout_width="wrap_content"
-+                android:layout_height="wrap_content"
-+                android:layout_marginTop="5dp"
-+                android:text="Corret\nAnswer"
-+                android:textSize="12sp"
-+                app:layout_constraintStart_toStartOf="@+id/inputQuestion"
-+                app:layout_constraintTop_toBottomOf="@+id/inputQuestion" />
-+
-+            <LinearLayout
-+                android:id="@+id/linearLayout"
-+                android:layout_width="match_parent"
-+                android:layout_height="wrap_content"
-+                android:layout_marginTop="16dp"
-+                android:orientation="horizontal"
-+                app:layout_constraintEnd_toEndOf="parent"
-+                app:layout_constraintStart_toStartOf="parent"
-+                app:layout_constraintTop_toBottomOf="@+id/textView3">
-+
-+                <RadioGroup
-+                    android:id="@+id/optionContainer"
-+                    android:layout_width="wrap_content"
-+                    android:layout_height="match_parent"
-+                    android:orientation="vertical">
-+
-+                    <RadioButton
-+                        android:id="@+id/radioButton"
-+                        android:layout_width="wrap_content"
-+                        android:layout_height="wrap_content"
-+                        android:layout_weight="1"
-+                        android:checked="true"
-+                        android:text="A)" />
-+
-+                    <RadioButton
-+                        android:id="@+id/radioButton2"
-+                        android:layout_width="wrap_content"
-+                        android:layout_height="wrap_content"
-+                        android:layout_weight="1"
-+                        android:checked="true"
-+                        android:text="B)" />
-+
-+                    <RadioButton
-+                        android:id="@+id/radioButton3"
-+                        android:layout_width="wrap_content"
-+                        android:layout_height="wrap_content"
-+                        android:layout_weight="1"
-+                        android:checked="true"
-+                        android:text="C)" />
-+
-+                    <RadioButton
-+                        android:id="@+id/radioButton4"
-+                        android:layout_width="wrap_content"
-+                        android:layout_height="wrap_content"
-+                        android:layout_weight="1"
-+                        android:checked="true"
-+                        android:text="D)" />
-+                </RadioGroup>
-+
-+                <LinearLayout
-+                    android:id="@+id/answerContainer"
-+                    android:layout_width="0dp"
-+                    android:layout_height="wrap_content"
-+                    android:layout_weight="1"
-+                    android:orientation="vertical">
-+
-+                    <EditText
-+                        android:id="@+id/editTextText2"
-+                        android:layout_width="match_parent"
-+                        android:layout_height="wrap_content"
-+                        android:layout_margin="10dp"
-+                        android:ems="10"
-+                        android:inputType="text"
-+                        android:text="" />
-+
-+                    <EditText
-+                        android:id="@+id/editTextText3"
-+                        android:layout_width="match_parent"
-+                        android:layout_height="wrap_content"
-+                        android:layout_margin="10dp"
-+                        android:ems="10"
-+                        android:inputType="text"
-+                        android:text="" />
-+
-+                    <EditText
-+                        android:id="@+id/editTextText4"
-+                        android:layout_width="match_parent"
-+                        android:layout_height="wrap_content"
-+                        android:layout_margin="10dp"
-+                        android:ems="10"
-+                        android:inputType="text"
-+                        android:text="" />
-+
-+                    <EditText
-+                        android:id="@+id/editTextText5"
-+                        android:layout_width="match_parent"
-+                        android:layout_height="wrap_content"
-+                        android:layout_margin="10dp"
-+                        android:ems="10"
-+                        android:inputType="text"
-+                        android:text="" />
-+                </LinearLayout>
-+
-+            </LinearLayout>
-+
-+            <Button
-+                android:id="@+id/btnUploadQuestion"
-+                android:layout_width="wrap_content"
-+                android:layout_height="wrap_content"
-+                android:layout_marginTop="32dp"
-+                android:text="Upload"
-+                android:textColor="@color/white"
-+                android:backgroundTint="@color/black"
-+                app:layout_constraintEnd_toEndOf="parent"
-+                app:layout_constraintStart_toStartOf="parent"
-+                app:layout_constraintTop_toBottomOf="@+id/linearLayout" />
-+
-+        </androidx.constraintlayout.widget.ConstraintLayout>
-+    </LinearLayout>
-+
-+</layout>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_9_23_PM_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_9_23_PM_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_9_23_PM_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_9_23_PM_[Changes]/shelved.patch	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ /dev/null	(revision d1757b64c3798be216457dcc702dac99c820626f)
@@ -1,1314 +0,0 @@
-Index: app/src/main/res/layout/fragment_product_preview.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n    <data>\n        <variable\n            name=\"productModel\"\n            type=\"com.example.kleine.model.Material\" />\n    </data>\n\n\n<androidx.core.widget.NestedScrollView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".fragments.shopping.MaterialPreviewFragment\"\n    android:fillViewport=\"true\">\n\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <androidx.cardview.widget.CardView\n            android:id=\"@+id/viewpager_card\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_350sdp\"\n            android:layout_marginTop=\"20dp\"\n            app:cardCornerRadius=\"15dp\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:orientation=\"vertical\"\n            android:backgroundTint=\"@color/white\"\n            android:overScrollMode=\"never\"\n            app:cardElevation=\"0dp\"\n            >\n\n\n            <androidx.viewpager2.widget.ViewPager2\n                android:id=\"@+id/viewpager2Images\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"0dp\"\n                android:layout_weight=\"1\"/>\n\n\n\n\n            <ImageView\n                android:id=\"@+id/img_close\"\n                android:layout_width=\"@dimen/_20sdp\"\n                android:layout_height=\"@dimen/_20sdp\"\n                android:layout_marginStart=\"10dp\"\n                android:layout_marginTop=\"10dp\"\n                android:src=\"@drawable/ic_close\"\n                app:tint=\"@color/black\"\n                android:scaleType=\"centerInside\"\n                />\n\n\n\n\n        </androidx.cardview.widget.CardView>\n\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline1\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.04\" />\n\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline2\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.96\" />\n\n\n\n\n\n\n\n\n        <LinearLayout\n            android:id=\"@+id/linear_product_name\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@+id/circle_indicator\"\n            android:orientation=\"horizontal\"\n            android:layout_marginTop=\"35dp\">\n\n\n            <TextView\n                android:id=\"@+id/tv_product_name\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:fontFamily=\"@font/poppins_light\"\n                android:text=\"@{productModel.name}\"\n                android:textColor=\"@color/black\"\n                android:textSize=\"@dimen/_20ssp\"\n                android:textStyle=\"bold\"\n                app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n                app:layout_constraintTop_toBottomOf=\"@id/guideline3\" />\n\n\n            <!--        <TextView-->\n            <!--            android:id=\"@+id/tv_product_offer_price\"-->\n            <!--            android:layout_width=\"wrap_content\"-->\n            <!--            android:layout_height=\"wrap_content\"-->\n            <!--            android:fontFamily=\"@font/poppins_light\"-->\n            <!--            android:text=\"$300\"-->\n            <!--            android:textColor=\"@color/g_hint\"-->\n            <!--            android:textSize=\"@dimen/_20ssp\"-->\n            <!--            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"-->\n            <!--            app:layout_constraintBottom_toBottomOf=\"@id/tv_product_name\"-->\n            <!--            app:layout_constraintTop_toTopOf=\"@+id/tv_product_name\"-->\n            <!--            android:layout_marginEnd=\"5dp\"/>-->\n\n\n            <!--        <TextView-->\n            <!--            android:id=\"@+id/tv_product_price\"-->\n            <!--            android:layout_width=\"wrap_content\"-->\n            <!--            android:layout_height=\"wrap_content\"-->\n            <!--            android:fontFamily=\"@font/poppins_light\"-->\n            <!--            android:text=\"$300\"-->\n            <!--            android:textColor=\"@color/g_hint\"-->\n            <!--            android:textSize=\"@dimen/_20ssp\"-->\n            <!--            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"-->\n            <!--            app:layout_constraintBottom_toBottomOf=\"@id/tv_product_name\"-->\n            <!--            app:layout_constraintTop_toTopOf=\"@+id/tv_product_name\"/>-->\n\n\n        </LinearLayout>\n\n\n        <LinearLayout\n            android:id=\"@+id/linear_product_description\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_product_name\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\">\n\n\n            <TextView\n                android:id=\"@+id/tv_product_description\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:fontFamily=\"@font/poppins_light\"\n                android:text=\"@{String.valueOf(productModel.desc)}\"\n                android:textColor=\"@color/g_hint\"\n                android:textSize=\"@dimen/_10ssp\"\n                android:textStyle=\"bold\" />\n        </LinearLayout>\n\n\n        <View\n            android:id=\"@+id/line\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_1sdp\"\n            android:layout_marginTop=\"10dp\"\n            android:background=\"@drawable/line\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_product_description\" />\n\n\n        <LinearLayout\n            android:id=\"@+id/linear\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/line\"\n            android:layout_marginTop=\"20dp\">\n\n\n            <LinearLayout\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:orientation=\"vertical\">\n\n\n                <LinearLayout\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\">\n\n\n                    <TextView\n                        android:id=\"@+id/tv_color\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:fontFamily=\"@font/poppins_light\"\n                        android:text=\"@string/string_status\"\n                        android:textColor=\"@color/black\"\n                        android:textSize=\"@dimen/_15ssp\" />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_color_error\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:text=\"@string/g_please_select_color\"\n                        android:textColor=\"@color/g_red\"\n                        android:visibility=\"invisible\"\n                        android:layout_marginTop=\"14dp\"\n                        android:layout_marginStart=\"10dp\"\n                        android:textSize=\"@dimen/_9ssp\"\n                        />\n\n\n                </LinearLayout>\n\n\n\n\n\n            </LinearLayout>\n\n\n            <LinearLayout\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:orientation=\"vertical\">\n                <LinearLayout\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\">\n                    <TextView\n                        android:id=\"@+id/tv_size\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:fontFamily=\"@font/poppins_light\"\n                        android:text=\"@string/string_rating\"\n                        android:textColor=\"@color/black\"\n                        android:textSize=\"@dimen/_15ssp\" />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_size_unit\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:textSize=\"@dimen/_10ssp\"\n                        android:visibility=\"invisible\"\n                        />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_size_error\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:text=\"@string/g_please_select_size\"\n                        android:textSize=\"@dimen/_9ssp\"\n                        android:textColor=\"@color/g_red\"\n                        android:visibility=\"invisible\"\n                        android:layout_marginTop=\"14dp\"\n                        android:layout_marginStart=\"10dp\"/>\n\n\n                </LinearLayout>\n\n\n\n            </LinearLayout>\n        </LinearLayout>\n\n\n        <ProgressBar\n            android:id=\"@+id/progressbar\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:indeterminateTint=\"@color/g_icon_tint\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear\"\n            android:layout_marginTop=\"45dp\"\n            android:visibility=\"invisible\"\n            />\n\n\n        <androidx.appcompat.widget.AppCompatButton\n            android:id=\"@+id/btn_add_to_cart\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_40sdp\"\n            android:layout_marginBottom=\"20dp\"\n            android:background=\"@drawable/btn_background\"\n            android:fontFamily=\"@font/poppins_thin\"\n            android:text=\"@string/g_add_to_card\"\n            android:textAllCaps=\"false\"\n            android:textColor=\"@color/white\"\n            android:textSize=\"@dimen/_12sdp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintHorizontal_bias=\"1.0\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear\"\n            app:layout_constraintVertical_bias=\"0.494\"\n            android:layout_marginTop=\"45dp\"\n            android:visibility=\"visible\"\n            />\n\n\n        <io.github.vejei.viewpagerindicator.indicator.CircleIndicator\n            android:id=\"@+id/circle_indicator\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintTop_toBottomOf=\"@id/viewpager_card\"\n            app:layout_constraintStart_toStartOf=\"@id/viewpager_card\"\n            app:layout_constraintEnd_toEndOf=\"@+id/viewpager_card\"\n            android:layout_marginTop=\"10dp\"\n            app:indicatorGap=\"5dp\"\n            app:indicatorRadius=\"5dp\"\n            app:indicatorItemCount=\"4\"\n            app:indicatorSelectedColor=\"@color/g_black\"/>\n\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n</androidx.core.widget.NestedScrollView>\n</layout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_product_preview.xml b/app/src/main/res/layout/fragment_product_preview.xml
---- a/app/src/main/res/layout/fragment_product_preview.xml	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/res/layout/fragment_product_preview.xml	(date 1695401418503)
-@@ -12,7 +12,7 @@
- <androidx.core.widget.NestedScrollView
-     android:layout_width="match_parent"
-     android:layout_height="match_parent"
--    tools:context=".fragments.shopping.MaterialPreviewFragment"
-+    tools:context="fragments.shopping.MaterialPreviewFragment"
-     android:fillViewport="true">
- 
- 
-@@ -82,18 +82,18 @@
- 
- 
- 
--
-         <LinearLayout
-             android:id="@+id/linear_product_name"
-             android:layout_width="0dp"
-             android:layout_height="wrap_content"
-             app:layout_constraintStart_toStartOf="@id/guideline1"
-             app:layout_constraintEnd_toEndOf="@id/guideline2"
--            app:layout_constraintTop_toBottomOf="@+id/circle_indicator"
-+            app:layout_constraintTop_toBottomOf="@+id/viewpager_card"
-             android:orientation="horizontal"
-             android:layout_marginTop="35dp">
- 
- 
-+
-             <TextView
-                 android:id="@+id/tv_product_name"
-                 android:layout_width="wrap_content"
-@@ -201,22 +201,13 @@
-                         android:layout_height="wrap_content"
-                         android:layout_marginTop="15dp"
-                         android:fontFamily="@font/poppins_light"
--                        android:text="@string/string_status"
-+                        android:text="@{productModel.status}"
-                         android:textColor="@color/black"
-                         android:textSize="@dimen/_15ssp" />
- 
- 
--                    <TextView
--                        android:id="@+id/tv_color_error"
--                        android:layout_width="wrap_content"
--                        android:layout_height="wrap_content"
--                        android:text="@string/g_please_select_color"
--                        android:textColor="@color/g_red"
--                        android:visibility="invisible"
--                        android:layout_marginTop="14dp"
--                        android:layout_marginStart="10dp"
--                        android:textSize="@dimen/_9ssp"
--                        />
-+
-+
- 
- 
-                 </LinearLayout>
-@@ -243,7 +234,7 @@
-                         android:layout_height="wrap_content"
-                         android:layout_marginTop="15dp"
-                         android:fontFamily="@font/poppins_light"
--                        android:text="@string/string_rating"
-+                        android:text="@{productModel.requirement}"
-                         android:textColor="@color/black"
-                         android:textSize="@dimen/_15ssp" />
- 
-@@ -257,17 +248,6 @@
-                         android:visibility="invisible"
-                         />
- 
--
--                    <TextView
--                        android:id="@+id/tv_size_error"
--                        android:layout_width="wrap_content"
--                        android:layout_height="wrap_content"
--                        android:text="@string/g_please_select_size"
--                        android:textSize="@dimen/_9ssp"
--                        android:textColor="@color/g_red"
--                        android:visibility="invisible"
--                        android:layout_marginTop="14dp"
--                        android:layout_marginStart="10dp"/>
- 
- 
-                 </LinearLayout>
-@@ -293,7 +273,7 @@
- 
- 
-         <androidx.appcompat.widget.AppCompatButton
--            android:id="@+id/btn_add_to_cart"
-+            android:id="@+id/btnEnroll"
-             android:layout_width="0dp"
-             android:layout_height="@dimen/_40sdp"
-             android:layout_marginBottom="20dp"
-@@ -314,20 +294,11 @@
-             />
- 
- 
--        <io.github.vejei.viewpagerindicator.indicator.CircleIndicator
--            android:id="@+id/circle_indicator"
--            android:layout_width="wrap_content"
--            android:layout_height="wrap_content"
--            app:layout_constraintTop_toBottomOf="@id/viewpager_card"
--            app:layout_constraintStart_toStartOf="@id/viewpager_card"
--            app:layout_constraintEnd_toEndOf="@+id/viewpager_card"
--            android:layout_marginTop="10dp"
--            app:indicatorGap="5dp"
--            app:indicatorRadius="5dp"
--            app:indicatorItemCount="4"
--            app:indicatorSelectedColor="@color/g_black"/>
-+
-+
- 
- 
-     </androidx.constraintlayout.widget.ConstraintLayout>
-+
- </androidx.core.widget.NestedScrollView>
- </layout>
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.adapters.recyclerview\n\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.navigation.NavDirections\nimport androidx.navigation.findNavController\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.R\nimport com.example.kleine.databinding.ProductLayoutRowBinding\nimport com.example.kleine.model.Material\nimport com.google.firebase.storage.FirebaseStorage\n\nclass MaterialAdapter : RecyclerView.Adapter<MaterialAdapter.MaterialViewHolder>() {\n\n    var onItemClick: ((Material) -> Unit)? = null\n\n    inner class MaterialViewHolder(val binding: ProductLayoutRowBinding) : RecyclerView.ViewHolder(binding.root) {\n        init {\n            itemView.setOnClickListener {\n                val material = differ.currentList[adapterPosition]\n                val actionId = R.id.action_homeFragment_to_materialDetailsFragment\n                it.findNavController().navigate(actionId)\n            }\n        }\n    }\n\n    private val diffCallback = object : DiffUtil.ItemCallback<Material>() {\n        override fun areItemsTheSame(oldItem: Material, newItem: Material): Boolean {\n            return oldItem == newItem\n        }\n\n        override fun areContentsTheSame(oldItem: Material, newItem: Material): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallback)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MaterialViewHolder {\n        Log.d(\"MaterialAdapter\", \"onCreateViewHolder called\")\n        return MaterialViewHolder(\n            ProductLayoutRowBinding.inflate(\n                LayoutInflater.from(parent.context),\n                parent,\n                false\n            )\n        )\n    }\n\n\n    override fun onBindViewHolder(holder: MaterialViewHolder, position: Int) {\n        Log.d(\"MaterialAdapter\", \"onBindViewHolder called for position $position\")\n\n        val material = differ.currentList[position]\n        holder.binding.apply {\n            productModel = material\n\n            val storage = FirebaseStorage.getInstance()\n            val storageRef = storage.reference\n\n            if (material.imageUrl.isNotEmpty()) {\n                val pathToImage = \"materialImages/${material.imageUrl}\"\n                Log.d(\"MaterialAdapter\", \"Dynamic Path to image: $pathToImage\")\n                Log.d(\"MaterialAdapter\", \"Material image URL: ${material.imageUrl}\")\n\n                val pathReference = storageRef.child(pathToImage)\n\n                pathReference.downloadUrl.addOnSuccessListener { uri ->\n                    Log.d(\"MaterialAdapter\", \"Successfully fetched URI: $uri\")\n                    Glide.with(holder.itemView).load(uri).into(imageView)\n                }.addOnFailureListener { exception ->\n                    Log.e(\"MaterialAdapter\", \"Failed to load image\", exception)\n                    imageView.setImageResource(R.drawable.default_book_logo)\n                }\n            } else {\n                imageView.setImageResource(R.drawable.default_book_logo)\n            }\n        }\n    }\n\n\n\n\n    override fun getItemCount(): Int {\n        val count = differ.currentList.size\n        Log.d(\"MaterialAdapter\", \"Item count: $count\")\n        return count\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt b/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt
---- a/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt	(date 1695407014629)
-@@ -2,6 +2,7 @@
- 
- import android.util.Log
- import android.view.LayoutInflater
-+import android.view.View
- import android.view.ViewGroup
- import androidx.navigation.NavDirections
- import androidx.navigation.findNavController
-@@ -11,6 +12,7 @@
- import com.bumptech.glide.Glide
- import com.example.kleine.R
- import com.example.kleine.databinding.ProductLayoutRowBinding
-+import com.example.kleine.fragments.shopping.HomeFragmentDirections
- import com.example.kleine.model.Material
- import com.google.firebase.storage.FirebaseStorage
- 
-@@ -19,13 +21,7 @@
-     var onItemClick: ((Material) -> Unit)? = null
- 
-     inner class MaterialViewHolder(val binding: ProductLayoutRowBinding) : RecyclerView.ViewHolder(binding.root) {
--        init {
--            itemView.setOnClickListener {
--                val material = differ.currentList[adapterPosition]
--                val actionId = R.id.action_homeFragment_to_materialDetailsFragment
--                it.findNavController().navigate(actionId)
--            }
--        }
-+
-     }
- 
-     private val diffCallback = object : DiffUtil.ItemCallback<Material>() {
-@@ -51,6 +47,16 @@
-         )
-     }
- 
-+    // Define a helper function for debounced clicks
-+    fun View.setDebouncedOnClickListener(debounceTime: Long = 500L, onClick: (view: View) -> Unit) {
-+        var lastClickTime = 0L
-+        this.setOnClickListener {
-+            if (System.currentTimeMillis() - lastClickTime >= debounceTime) {
-+                onClick(it)
-+                lastClickTime = System.currentTimeMillis()
-+            }
-+        }
-+    }
- 
-     override fun onBindViewHolder(holder: MaterialViewHolder, position: Int) {
-         Log.d("MaterialAdapter", "onBindViewHolder called for position $position")
-@@ -67,6 +73,7 @@
-                 Log.d("MaterialAdapter", "Dynamic Path to image: $pathToImage")
-                 Log.d("MaterialAdapter", "Material image URL: ${material.imageUrl}")
- 
-+
-                 val pathReference = storageRef.child(pathToImage)
- 
-                 pathReference.downloadUrl.addOnSuccessListener { uri ->
-@@ -77,9 +84,18 @@
-                     imageView.setImageResource(R.drawable.default_book_logo)
-                 }
-             } else {
--                imageView.setImageResource(R.drawable.default_book_logo)
-+                Log.e("MaterialAdapter", "Failed to load image because of empty")
-             }
-         }
-+        // Set an onClick listener for the item
-+        holder.itemView.setDebouncedOnClickListener {
-+            Log.d("MaterialAdapter", "Navigating with Material ID: ${material.id}")
-+            val action = HomeFragmentDirections.actionHomeFragmentToMaterialDetailsFragment(material)
-+            it.findNavController().navigate(action)
-+        }
-+
-+
-+
-     }
- 
- 
-Index: app/src/main/res/layout/fragment_order_details.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.core.widget.NestedScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".fragments.settings.OrderDetails\"\n    android:fillViewport=\"true\">\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar_all_order_details\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"?actionBarSize\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toTopOf=\"parent\">\n\n            <androidx.constraintlayout.widget.ConstraintLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\">\n\n                <ImageView\n                    android:id=\"@+id/img_close_order\"\n                    android:layout_width=\"@dimen/_20sdp\"\n                    android:layout_height=\"@dimen/_20sdp\"\n                    android:src=\"@drawable/ic_close\"\n                    android:scaleType=\"centerInside\"\n                    app:layout_constraintBottom_toBottomOf=\"parent\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toTopOf=\"parent\"\n                    app:tint=\"@color/black\" />\n\n                <TextView\n                    android:id=\"@+id/tv_order_id\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginStart=\"25dp\"\n                    android:fontFamily=\"@font/poppins_light\"\n                    android:textColor=\"@color/black\"\n                    android:textSize=\"@dimen/_20ssp\"\n                    app:layout_constraintBottom_toBottomOf=\"parent\"\n                    app:layout_constraintStart_toEndOf=\"@id/img_close_order\"\n                    app:layout_constraintTop_toTopOf=\"parent\" />\n            </androidx.constraintlayout.widget.ConstraintLayout>\n\n        </androidx.appcompat.widget.Toolbar>\n\n        <com.google.android.material.progressindicator.LinearProgressIndicator\n            android:id=\"@+id/progressbar_order\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintTop_toBottomOf=\"@id/toolbar_all_order_details\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            android:indeterminate=\"true\"\n            android:visibility=\"invisible\"/>\n\n        <LinearLayout\n            android:id=\"@+id/linear_steps_view\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/toolbar_all_order_details\">\n\n           <com.shuhart.stepview.StepView\n               android:id=\"@+id/step_view\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"wrap_content\"\n               android:padding=\"16dp\"\n               app:sv_selectedCircleColor=\"@color/g_orange\"\n               app:sv_selectedTextColor=\"@color/g_hint\"\n               app:sv_stepLineWidth=\"3dp\"\n               app:sv_stepPadding=\"4dp\"\n               app:sv_nextTextColor=\"@color/g_hint\"\n               app:sv_nextStepLineColor=\"@color/g_hint\"\n               app:sv_doneCircleColor=\"@color/g_orange\"\n               app:sv_doneStepLineColor=\"@color/g_orange\"\n               app:sv_doneCircleRadius=\"@dimen/_14sdp\"\n               app:sv_selectedCircleRadius=\"@dimen/_14sdp\"\n               app:sv_selectedStepNumberColor=\"@color/colorPrimary\"\n               app:sv_stepViewStyle=\"@style/StepView\"\n               app:sv_doneStepMarkColor=\"@color/colorPrimary\"\n               app:sv_stepNumberTextSize=\"@dimen/_12ssp\"\n               app:sv_animationType=\"Line\"\n               app:sv_doneTextColor=\"@color/g_hint\"\n               />\n        </LinearLayout>\n\n\n\n        <TextView\n            android:id=\"@+id/tv_shopping_addresses\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/g_address\"\n            android:fontFamily=\"@font/poppins_thin\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            android:textColor=\"@color/black\"\n            android:textSize=\"@dimen/_15ssp\"\n            android:layout_marginTop=\"20dp\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_steps_view\"\n            app:drawableTint=\"@color/black\"\n            app:drawableLeftCompat=\"@drawable/ic_baseline_location_on_24\" />\n\n        <LinearLayout\n            android:id=\"@+id/linear_address\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/tv_shopping_addresses\">\n\n\n                <TextView\n                    android:id=\"@+id/tv_full_name\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"@string/g_full_name\"\n                    android:textSize=\"@dimen/_13ssp\" />\n\n            <TextView\n                android:id=\"@+id/tv_address\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/g_address\"\n                android:textSize=\"@dimen/_13ssp\" />\n\n            <TextView\n                android:id=\"@+id/tv_phone_number\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/g_phone\"\n                android:textSize=\"@dimen/_13ssp\" />\n\n        </LinearLayout>\n\n        <View\n            android:id=\"@+id/line1\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_1sdp\"\n            android:layout_marginTop=\"15dp\"\n            android:background=\"@drawable/line\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_address\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            android:backgroundTint=\"@color/g_icon_tint\"\n            />\n\n        <TextView\n            android:id=\"@+id/tv_products\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/g_products\"\n            android:fontFamily=\"@font/poppins_thin\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            android:textColor=\"@color/black\"\n            android:textSize=\"@dimen/_15ssp\"\n            android:layout_marginTop=\"20dp\"\n            app:layout_constraintTop_toBottomOf=\"@id/line1\"\n            app:drawableTint=\"@color/black\"\n            app:drawableLeftCompat=\"@drawable/ic_cart\"\n            android:drawablePadding=\"5dp\"/>\n\n        <androidx.recyclerview.widget.RecyclerView\n            android:id=\"@+id/rv_products\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/line1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/tv_products\"\n            android:layout_marginTop=\"10dp\"\n            tools:listitem=\"@layout/cart_item\"\n            />\n\n        <androidx.constraintlayout.widget.ConstraintLayout\n            android:id=\"@+id/linear\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/rv_products\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            android:layout_marginTop=\"40dp\"\n            android:layout_marginBottom=\"20dp\"\n            android:background=\"@drawable/total_box_background\">\n\n            <TextView\n                android:layout_width=\"0dp\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/g_total\"\n                android:textSize=\"@dimen/_16ssp\"\n                android:textColor=\"@color/black\"\n                android:fontFamily=\"@font/sf_pro_display\"\n                android:layout_marginStart=\"10dp\"\n                android:layout_weight=\"1\"\n                android:layout_marginTop=\"@dimen/_15sdp\"\n                android:layout_marginBottom=\"@dimen/_15sdp\"\n                android:layout_gravity=\"start|center_vertical\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"/>\n\n            <TextView\n                android:id=\"@+id/tv_totalprice\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginEnd=\"10dp\"\n                android:textSize=\"@dimen/_16ssp\"\n                android:textColor=\"@color/black\"\n                android:fontFamily=\"@font/sf_pro_display\"\n                android:layout_marginTop=\"@dimen/_15sdp\"\n                android:layout_marginBottom=\"@dimen/_15sdp\"\n                android:layout_gravity=\"end|center_vertical\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"\n                />\n\n        </androidx.constraintlayout.widget.ConstraintLayout>\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline1\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.04\" />\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline2\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.96\" />\n    </androidx.constraintlayout.widget.ConstraintLayout>\n\n</androidx.core.widget.NestedScrollView>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_order_details.xml b/app/src/main/res/layout/fragment_order_details.xml
---- a/app/src/main/res/layout/fragment_order_details.xml	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/res/layout/fragment_order_details.xml	(date 1695475405818)
-@@ -157,7 +157,7 @@
-             android:id="@+id/tv_products"
-             android:layout_width="wrap_content"
-             android:layout_height="wrap_content"
--            android:text="@string/g_products"
-+            android:text="Courses Material"
-             android:fontFamily="@font/poppins_thin"
-             app:layout_constraintStart_toStartOf="@id/guideline1"
-             android:textColor="@color/black"
-Index: app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.settings\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.AllOrdersAdapter\nimport com.example.kleine.databinding.FragmentAllOrdersBinding\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\n\n\nclass AllOrdersFragment : Fragment() {\n\n    val TAG = \"AllOrdersFragment\"\n    private lateinit var viewModel: ShoppingViewModel\n    private lateinit var binding: FragmentAllOrdersBinding\n    private lateinit var allOrdersAdapter: AllOrdersAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getUserOrders()\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        // Inflate the layout for this fragment\n        binding = FragmentAllOrdersBinding.inflate(inflater)\n        activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)?.visibility = View.GONE\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        setupRecyclerView()\n        observeAllOrders()\n        onCloseClick()\n        onItemClick()\n        binding.imgCloseOrders.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun onItemClick() {\n        allOrdersAdapter.onItemClick = {order ->\n            val bundle = Bundle()\n            bundle.putParcelable(\"order\",order)\n            findNavController().navigate(R.id.action_allOrdersFragment_to_orderDetails,bundle)\n\n        }\n    }\n\n    private fun onCloseClick() {\n        binding.imgCloseOrders.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun observeAllOrders() {\n        viewModel.userOrders.observe(viewLifecycleOwner) { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@observe\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n                    val orders = response.data\n                    if (orders!!.isEmpty())\n                        binding.apply {\n                            imgEmptyBox.visibility = View.VISIBLE\n                            imgEmptyBoxTexture.visibility = View.VISIBLE\n                            tvEmptyOrders.visibility = View.VISIBLE\n                            return@observe\n                        }\n                    binding.apply {\n                        imgEmptyBox.visibility = View.GONE\n                        imgEmptyBoxTexture.visibility = View.GONE\n                        tvEmptyOrders.visibility = View.GONE\n                    }\n                    allOrdersAdapter.differ.submitList(orders)\n                    return@observe\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@observe\n                }\n            }\n        }\n    }\n\n    private fun hideLoading() {\n        binding.progressbarAllOrders.visibility = View.GONE\n\n    }\n\n    private fun showLoading() {\n        binding.progressbarAllOrders.visibility = View.VISIBLE\n    }\n\n    private fun setupRecyclerView() {\n        allOrdersAdapter = AllOrdersAdapter()\n        binding.rvAllOrders.apply {\n            layoutManager = LinearLayoutManager(context)\n            adapter = allOrdersAdapter\n        }\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt b/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt	(date 1695465251853)
-@@ -12,10 +12,16 @@
- import com.example.kleine.R
- import com.example.kleine.activities.ShoppingActivity
- import com.example.kleine.adapters.recyclerview.AllOrdersAdapter
-+import com.example.kleine.adapters.recyclerview.MaterialAdapter
- import com.example.kleine.databinding.FragmentAllOrdersBinding
-+import com.example.kleine.model.Enrollment
-+import com.example.kleine.model.Material
- import com.example.kleine.resource.Resource
- import com.example.kleine.viewmodel.shopping.ShoppingViewModel
- import com.google.android.material.bottomnavigation.BottomNavigationView
-+import com.google.firebase.auth.FirebaseAuth
-+import com.google.firebase.firestore.FieldPath
-+import com.google.firebase.firestore.FirebaseFirestore
- 
- 
- class AllOrdersFragment : Fragment() {
-@@ -24,6 +30,8 @@
-     private lateinit var viewModel: ShoppingViewModel
-     private lateinit var binding: FragmentAllOrdersBinding
-     private lateinit var allOrdersAdapter: AllOrdersAdapter
-+    private lateinit var materialAdapter: MaterialAdapter
-+
- 
-     override fun onCreate(savedInstanceState: Bundle?) {
-         super.onCreate(savedInstanceState)
-@@ -45,6 +53,7 @@
-     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-         super.onViewCreated(view, savedInstanceState)
- 
-+        fetchEnrolledMaterials()
-         setupRecyclerView()
-         observeAllOrders()
-         onCloseClick()
-@@ -54,14 +63,85 @@
-         }
-     }
- 
-+
-+    private fun fetchEnrolledMaterials() {
-+        val userId = FirebaseAuth.getInstance().currentUser?.uid
-+
-+        if (userId != null) {
-+            val firestore = FirebaseFirestore.getInstance()
-+            firestore.collection("enrollments")
-+                .whereEqualTo("userId", userId)
-+                .get()
-+                .addOnSuccessListener { querySnapshot ->
-+                    val enrollments = querySnapshot.documents.mapNotNull { document ->
-+                        document.toObject(Enrollment::class.java)
-+                    }
-+                    fetchMaterialsForEnrollments(enrollments)
-+                    Log.d(TAG, "Number of enrollments fetched: ${enrollments.size}")
-+
-+                }
-+                .addOnFailureListener { exception ->
-+                    Log.e(TAG, "Error fetching user enrollments", exception)
-+                    // Handle the error appropriately
-+                }
-+        } else {
-+            // Handle the case where the user is not logged in
-+        }
-+    }
-+
-+    private fun fetchMaterialsForEnrollments(enrollments: List<Enrollment>) {
-+        val firestore = FirebaseFirestore.getInstance()
-+
-+        // Filter out empty strings and remove duplicate IDs
-+        val materialIds = enrollments.map { it.materialId }.filter { it.isNotEmpty() }.distinct()
-+
-+        // Log the IDs being used in the query for debugging purposes
-+        Log.d(TAG, "Attempting to fetch materials with IDs: $materialIds")
-+
-+        // Only proceed with the query if there are valid IDs to search for
-+        if (materialIds.isNotEmpty()) {
-+            firestore.collection("Materials")
-+                .whereIn(FieldPath.documentId(), materialIds) // Updated line
-+                .get()
-+                .addOnSuccessListener { querySnapshot ->
-+                    val materials = querySnapshot.documents.mapNotNull { document ->
-+                        val material = document.toObject(Material::class.java)
-+                        material?.id = document.id // Set the id of the Material object
-+                        material
-+                    }
-+                    Log.d(TAG, "Materials fetched successfully: $materials")
-+                    displayMaterials(materials)
-+                }
-+                .addOnFailureListener { exception ->
-+                    Log.e(TAG, "Error fetching materials", exception)
-+                    // Handle the error appropriately
-+                }
-+        } else {
-+            Log.w(TAG, "No valid material IDs to fetch")
-+            // Handle the case where there are no valid material IDs
-+        }
-+    }
-+
-+
-+
-+
-+    private fun displayMaterials(materials: List<Material>) {
-+        Log.d(TAG, "Displaying materials: ${materials.size}")
-+        materialAdapter.differ.submitList(materials)
-+        materialAdapter.notifyDataSetChanged() // Force redraw
-+    }
-+
-+
-+
-     private fun onItemClick() {
--        allOrdersAdapter.onItemClick = {order ->
-+        materialAdapter.onItemClick = { material ->
-             val bundle = Bundle()
--            bundle.putParcelable("order",order)
--            findNavController().navigate(R.id.action_allOrdersFragment_to_orderDetails,bundle)
--
-+            bundle.putParcelable("material", material)
-+            findNavController().navigate(R.id.action_allOrdersFragment_to_orderDetails, bundle)
-         }
-     }
-+
-+
- 
-     private fun onCloseClick() {
-         binding.imgCloseOrders.setOnClickListener {
-@@ -120,10 +200,10 @@
-     }
- 
-     private fun setupRecyclerView() {
--        allOrdersAdapter = AllOrdersAdapter()
-+        materialAdapter = MaterialAdapter()
-         binding.rvAllOrders.apply {
-             layoutManager = LinearLayoutManager(context)
--            adapter = allOrdersAdapter
-+            adapter = materialAdapter
-         }
-     }
- }
-\ No newline at end of file
-Index: app/src/main/res/navigation/shopping_nav_graph.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/shopping_nav_graph\"\n    app:startDestination=\"@id/homeFragment\">\n\n    <fragment\n        android:id=\"@+id/homeFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.HomeFragment\"\n        android:label=\"fragment_home\"\n        tools:layout=\"@layout/fragment_home\">\n        <action\n            android:id=\"@+id/action_homeFragment_to_searchFragment\"\n            app:destination=\"@id/searchFragment\"\n            app:popUpTo=\"@id/homeFragment\" />\n        <argument\n            android:name=\"position\"\n            app:argType=\"integer\"\n            android:defaultValue=\"0\" />\n    </fragment>\n\n    <action\n        android:id=\"@+id/action_homeFragment_to_materialDetailsFragment\"\n        app:destination=\"@id/materialDetailsFragment\"\n        app:enterAnim=\"@anim/nav_default_enter_anim\"\n        app:exitAnim=\"@anim/nav_default_exit_anim\"\n        app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n        app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n\n\n    <fragment\n        android:id=\"@+id/materialDetailsFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.MaterialPreviewFragment\"\n        android:label=\"Material Details\">\n\n        <argument\n            android:name=\"material\"\n            app:argType=\"com.example.kleine.model.Material\"\n            android:defaultValue=\"@null\"\n            app:nullable=\"true\" />\n\n\n    </fragment>\n\n\n    <fragment\n        android:id=\"@+id/searchFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.SearchFragment\"\n        android:label=\"fragment_search\"\n        tools:layout=\"@layout/fragment_search\">\n\n        <action\n            android:id=\"@+id/action_searchFragment_to_homeFragment\"\n            app:destination=\"@id/homeFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/profileFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.ProfileFragment\"\n        android:label=\"fragment_profile\"\n        tools:layout=\"@layout/fragment_profile\">\n        <action\n            android:id=\"@+id/action_profileFragment_to_billingFragment\"\n            app:destination=\"@id/billingFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_editUserInformation\"\n            app:destination=\"@id/editUserInformation\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_allOrdersFragment\"\n            app:destination=\"@id/allOrdersFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_languageFragment\"\n            app:destination=\"@id/languageFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_viewPartnershipFragment\"\n            app:destination=\"@id/viewPartnershipFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_helpFragment\"\n            app:destination=\"@id/helpFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_joinPartnerFragment\"\n            app:destination=\"@id/joinPartnerFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_adminDashboardFragment\"\n            app:destination=\"@id/adminDashboardFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/cartFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.CartFragment\"\n        android:label=\"fragment_cart\"\n        tools:layout=\"@layout/fragment_cart\">\n\n        <action\n            android:id=\"@+id/action_cartFragment_to_billingFragment\"\n            app:destination=\"@id/billingFragment\" />\n    </fragment>\n\n    <fragment\n        android:id=\"@+id/billingFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.BillingFragment\"\n        android:label=\"fragment_billing\"\n        tools:layout=\"@layout/fragment_billing\">\n        <action\n            android:id=\"@+id/action_billingFragment_to_addressFragment\"\n            app:destination=\"@id/addressFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\" />\n        <argument\n            android:name=\"clickFlag\"\n            app:argType=\"string\" />\n        <argument\n            android:name=\"price\"\n            android:defaultValue=\"null\"\n            app:argType=\"string\"\n            app:nullable=\"true\" />\n        <argument\n            android:name=\"products\"\n            android:defaultValue=\"@null\"\n            app:argType=\"com.example.kleine.model.CartProductsList\"\n            app:nullable=\"true\" />\n        <action\n            android:id=\"@+id/action_billingFragment_to_orderCompletion\"\n            app:destination=\"@id/orderCompletion\"\n            app:popUpTo=\"@id/billingFragment\"\n            app:popUpToInclusive=\"true\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/addressFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.AddressFragment\"\n        android:label=\"fragment_address\"\n        tools:layout=\"@layout/fragment_address\">\n\n        <argument\n            android:name=\"address\"\n            android:defaultValue=\"@null\"\n            app:argType=\"com.example.kleine.model.Address\"\n            app:nullable=\"true\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/orderCompletion\"\n        android:name=\"com.example.kleine.fragments.shopping.OrderCompletion\"\n        android:label=\"fragment_order_completion\"\n        tools:layout=\"@layout/fragment_order_completion\">\n        <argument\n            android:name=\"order_completion_flag\"\n            app:argType=\"string\" />\n        <argument\n            android:name=\"orderNumber\"\n            android:defaultValue=\"null\"\n            app:argType=\"string\"\n            app:nullable=\"true\" />\n        <action\n            android:id=\"@+id/action_orderCompletion_to_orderDetails\"\n            app:destination=\"@id/orderDetails\" />\n        <argument\n            android:name=\"order\"\n            app:argType=\"com.example.kleine.model.Order\"\n            app:nullable=\"true\"\n            android:defaultValue=\"@null\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/editUserInformation\"\n        android:name=\"com.example.kleine.fragments.settings.EditUserInformationFragment\"\n        android:label=\"fragment_edit_user_information\"\n        tools:layout=\"@layout/fragment_edit_user_information\">\n        <argument\n            android:name=\"user\"\n            app:argType=\"com.example.kleine.model.User\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/allOrdersFragment\"\n        android:name=\"com.example.kleine.fragments.settings.AllOrdersFragment\"\n        android:label=\"fragment_all_orders\"\n        tools:layout=\"@layout/fragment_all_orders\" >\n        <action\n            android:id=\"@+id/action_allOrdersFragment_to_orderDetails\"\n            app:destination=\"@id/orderDetails\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/orderDetails\"\n        android:name=\"com.example.kleine.fragments.settings.OrderDetails\"\n        android:label=\"fragment_order_details\"\n        tools:layout=\"@layout/fragment_order_details\" >\n        <argument\n            android:name=\"order\"\n            app:argType=\"com.example.kleine.model.Order\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/languageFragment\"\n        android:name=\"com.example.kleine.fragments.settings.LanguageFragment\"\n        android:label=\"fragment_language\"\n        tools:layout=\"@layout/fragment_language\" />\n    <fragment\n        android:id=\"@+id/viewPartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.ViewPartnershipFragment\"\n        android:label=\"fragment_view_partnership\"\n        tools:layout=\"@layout/fragment_view_partnership\">\n        <action\n            android:id=\"@+id/action_viewPartnershipFragment_to_partnershipViewMaterialFragment\"\n            app:destination=\"@id/partnershipViewMaterialFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_viewPartnershipFragment_to_updatePartnershipFragment\"\n            app:destination=\"@id/updatePartnershipFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/helpFragment\"\n        android:name=\"com.example.kleine.fragments.settings.HelpFragment\"\n        android:label=\"HelpFragment\"\n        tools:layout=\"@layout/fragment_help\"/>\n    <fragment\n        android:id=\"@+id/partnershipViewMaterialFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialFragment\"\n        android:label=\"fragment_partnership_view_material\"\n        tools:layout=\"@layout/fragment_partnership_view_material\" >\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_partnershipViewMaterialDetailFragment\"\n            app:destination=\"@id/partnershipViewMaterialDetailFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\">\n            <argument\n                android:name=\"documentId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n        </action>\n    </fragment>\n    <fragment\n        android:id=\"@+id/partnershipViewMaterialDetailFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialDetailFragment\"\n        android:label=\"fragment_partnership_view_material_detail\"\n        tools:layout=\"@layout/fragment_partnership_view_material_detail\" >\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialDetailFragment_to_replyCommentFragment\"\n            app:destination=\"@id/replyCommentFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/replyCommentFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.ReplyCommentFragment\"\n        android:label=\"fragment_reply_comment\"\n        tools:layout=\"@layout/fragment_reply_comment\" />\n    <fragment\n        android:id=\"@+id/joinPartnerFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.JoinPartnerFragment\"\n        android:label=\"fragment_join__partner_\"\n        tools:layout=\"@layout/fragment_join__partner_\" />\n    <fragment\n        android:id=\"@+id/adminDashboardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminDashboardFragment\"\n        android:label=\"fragment_admin_dashboard\"\n        tools:layout=\"@layout/fragment_admin_dashboard\" >\n        <action\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewPartnershipFragment\"\n            app:destination=\"@id/adminViewPartnershipFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/adminViewPartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipFragment\"\n        android:label=\"fragment_admin_view_partnership\"\n        tools:layout=\"@layout/fragment_admin_view_partnership\" >\n        <action\n            android:id=\"@+id/action_adminViewPartnershipFragment_to_adminViewPartnershipRequestFragment\"\n            app:destination=\"@id/adminViewPartnershipRequestFragment\" />\n    </fragment>\n\n\n    <fragment\n        android:id=\"@+id/adminViewPartnershipRequestFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipRequestFragment\"\n        android:label=\"fragment_admin_view_partnership_request\"\n        tools:layout=\"@layout/fragment_admin_view_partnership_request\" />\n    <fragment\n        android:id=\"@+id/updatePartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.UpdatePartnershipFragment\"\n        android:label=\"UpdatePartnershipFragment\"\n        tools:layout=\"@layout/fragment_update_partnership\"/>\n</navigation>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/navigation/shopping_nav_graph.xml b/app/src/main/res/navigation/shopping_nav_graph.xml
---- a/app/src/main/res/navigation/shopping_nav_graph.xml	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/res/navigation/shopping_nav_graph.xml	(date 1695463386601)
-@@ -5,11 +5,15 @@
-     android:id="@+id/shopping_nav_graph"
-     app:startDestination="@id/homeFragment">
- 
-+
-+
-+
-     <fragment
-         android:id="@+id/homeFragment"
-         android:name="com.example.kleine.fragments.shopping.HomeFragment"
-         android:label="fragment_home"
-         tools:layout="@layout/fragment_home">
-+
-         <action
-             android:id="@+id/action_homeFragment_to_searchFragment"
-             app:destination="@id/searchFragment"
-@@ -18,29 +22,25 @@
-             android:name="position"
-             app:argType="integer"
-             android:defaultValue="0" />
--    </fragment>
- 
--    <action
--        android:id="@+id/action_homeFragment_to_materialDetailsFragment"
--        app:destination="@id/materialDetailsFragment"
--        app:enterAnim="@anim/nav_default_enter_anim"
--        app:exitAnim="@anim/nav_default_exit_anim"
--        app:popEnterAnim="@anim/nav_default_pop_enter_anim"
--        app:popExitAnim="@anim/nav_default_pop_exit_anim"/>
-+        <action
-+            android:id="@+id/action_homeFragment_to_materialDetailsFragment"
-+            app:destination="@id/materialDetailsFragment"
-+            app:enterAnim="@anim/nav_default_enter_anim"
-+            app:exitAnim="@anim/nav_default_exit_anim"
-+            app:popEnterAnim="@anim/nav_default_pop_enter_anim"
-+            app:popExitAnim="@anim/nav_default_pop_exit_anim"/>
-+    </fragment>
- 
- 
-     <fragment
-         android:id="@+id/materialDetailsFragment"
-         android:name="com.example.kleine.fragments.shopping.MaterialPreviewFragment"
--        android:label="Material Details">
--
-+        tools:layout="@layout/fragment_product_preview">
-         <argument
-             android:name="material"
-             app:argType="com.example.kleine.model.Material"
--            android:defaultValue="@null"
-             app:nullable="true" />
--
--
-     </fragment>
- 
- 
-@@ -59,6 +59,8 @@
-         android:name="com.example.kleine.fragments.shopping.ProfileFragment"
-         android:label="fragment_profile"
-         tools:layout="@layout/fragment_profile">
-+
-+
-         <action
-             android:id="@+id/action_profileFragment_to_billingFragment"
-             app:destination="@id/billingFragment"
-@@ -213,6 +215,14 @@
-             app:exitAnim="@anim/to_left"
-             app:popEnterAnim="@anim/from_left"
-             app:popExitAnim="@anim/to_right"/>
-+
-+        <action
-+            android:id="@+id/action_allOrdersFragment_to_materialDetailsFragment"
-+            app:destination="@id/materialDetailsFragment"
-+            app:enterAnim="@anim/from_right"
-+            app:exitAnim="@anim/to_left"
-+            app:popEnterAnim="@anim/from_left"
-+            app:popExitAnim="@anim/to_right"/>
-     </fragment>
-     <fragment
-         android:id="@+id/orderDetails"
-Index: app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport com.example.kleine.databinding.FragmentProductPreviewBinding\nimport com.example.kleine.model.Material\n\nclass MaterialPreviewFragment : Fragment() {\n    private var _binding: FragmentProductPreviewBinding? = null\n    private val binding get() = _binding!!\n    private var material: Material? = null\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        _binding = FragmentProductPreviewBinding.inflate(inflater, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        // Retrieve the passed argument\n        material = arguments?.getParcelable(\"material\")\n\n        // Check if the material is not null\n        if (material != null) {\n            // Bind the material data to the views using data binding\n            binding.productModel = material\n        } else {\n            // Handle the case where material is null\n            // For instance, you can show a message to the user or navigate back\n            fragmentManager?.popBackStack()\n\n        }\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt	(date 1695406472681)
-@@ -1,18 +1,35 @@
- package com.example.kleine.fragments.shopping
- 
- import android.os.Bundle
-+import android.util.Log
- import android.view.LayoutInflater
- import android.view.View
- import android.view.ViewGroup
-+import android.widget.Toast
- import androidx.fragment.app.Fragment
-+import androidx.navigation.Navigation.findNavController
-+import androidx.navigation.fragment.findNavController
-+import androidx.viewpager2.widget.ViewPager2
-+import com.example.kleine.R
-+import com.example.kleine.adapters.viewpager.ViewPager2Images
- import com.example.kleine.databinding.FragmentProductPreviewBinding
-+import com.example.kleine.model.Enrollment
- import com.example.kleine.model.Material
-+import com.google.firebase.auth.FirebaseAuth
-+import com.google.firebase.firestore.FirebaseFirestore
-+
- 
- class MaterialPreviewFragment : Fragment() {
-     private var _binding: FragmentProductPreviewBinding? = null
-     private val binding get() = _binding!!
-     private var material: Material? = null
- 
-+    private val viewPagerAdapter = ViewPager2Images()
-+
-+    private val firebaseAuth: FirebaseAuth = FirebaseAuth.getInstance()
-+    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()
-+
-+
-     override fun onCreateView(
-         inflater: LayoutInflater, container: ViewGroup?,
-         savedInstanceState: Bundle?
-@@ -23,21 +40,77 @@
- 
-     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-         super.onViewCreated(view, savedInstanceState)
-+        onEnrollClick()
-+
-+
-+        // Set up the ViewPager2
-+        binding.viewpager2Images.adapter = viewPagerAdapter
- 
-         // Retrieve the passed argument
-         material = arguments?.getParcelable("material")
- 
--        // Check if the material is not null
--        if (material != null) {
--            // Bind the material data to the views using data binding
--            binding.productModel = material
--        } else {
--            // Handle the case where material is null
--            // For instance, you can show a message to the user or navigate back
--            fragmentManager?.popBackStack()
-+        material?.let { mat ->
-+            binding.productModel = mat
-+
-+            // Convert the single imageUrl into a list and submit to the adapter
-+            viewPagerAdapter.differ.submitList(listOf(mat.imageUrl))
- 
-+        } ?: run {
-+            Log.e("MaterialPreviewFragment", "Material is null!")
-         }
-+
-+        // Assuming you have one image per material for now
-+        // If there are multiple images, then update this value accordingly
-+        // binding.circleIndicator.indicatorItemCount = 1
-+        // Update: Commented the above line as it might not be available based on the library version.
-+
-+        binding.viewpager2Images.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {
-+            override fun onPageSelected(position: Int) {
-+                super.onPageSelected(position)
-+                // Update the CircleIndicator's selected position
-+                // You might need to check if such a method is available in your library version
-+                // binding.circleIndicator.setSelection(position)
-+                // Update: Commented the above line as it might not be available based on the library version.
-+            }
-+        })
-     }
-+
-+
-+
-+    private fun onEnrollClick() {
-+        binding.btnEnroll.setOnClickListener {
-+            Log.d("MaterialPreviewFragment", "Button Clicked")
-+
-+            // Get the current user ID
-+            val userId = firebaseAuth.currentUser?.uid ?: run {
-+                Toast.makeText(context, "User not logged in!", Toast.LENGTH_SHORT).show()
-+                return@setOnClickListener
-+            }
-+
-+            // Get the selected material ID
-+            val materialId = material?.id ?: run {
-+                Toast.makeText(context, "Material ID is null!", Toast.LENGTH_SHORT).show()
-+                return@setOnClickListener
-+            }
-+
-+            // Create a new Enrollment object
-+            val enrollment = Enrollment(userId = userId, materialId = materialId)
-+
-+            // Save the enrollment to Firebase Firestore
-+            firestore.collection("enrollments").add(enrollment)
-+                .addOnSuccessListener {
-+                    Toast.makeText(context, "Successfully enrolled in the course!", Toast.LENGTH_SHORT).show()
-+
-+                    // Navigate back to HomeFragment
-+                    findNavController().navigateUp()
-+                }
-+                .addOnFailureListener { exception ->
-+                    Log.w("MaterialPreviewFragment", "Error adding document", exception)
-+                    Toast.makeText(context, "Error enrolling in the course!", Toast.LENGTH_SHORT).show()
-+                }
-+        }
-+    }
-+
- 
-     override fun onDestroyView() {
-         super.onDestroyView()
-Index: app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport androidx.navigation.fragment.findNavController\nimport com.bumptech.glide.Glide\nimport com.example.kleine.BuildConfig\nimport com.example.kleine.R\nimport com.example.kleine.activities.LunchActivity\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.databinding.FragmentProfileBinding\nimport com.example.kleine.model.User\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.UPDATE_ADDRESS_FLAG\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport com.google.android.material.snackbar.Snackbar\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.firestore.FirebaseFirestore\n\n\nclass ProfileFragment : Fragment() {\n    val TAG = \"ProfileFragment\"\n    private lateinit var binding: FragmentProfileBinding\n    private lateinit var viewModel: ShoppingViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getUser()\n    }\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentProfileBinding.inflate(inflater, container, false)\n        val currentUser = FirebaseAuth.getInstance().currentUser\n\n        if (currentUser != null) {\n            val userId = currentUser.uid\n            val db = FirebaseFirestore.getInstance()\n            db.collection(\"users\").document(userId)\n                .get()\n                .addOnSuccessListener { document ->\n                    if (document != null) {\n                        val status = document.getString(\"status\")\n                        Log.d(TAG, \"User Status: $status\")\n                        if (status == \"ADMINS\") {\n                            // Admin user, show the fragment\n                            binding.adminOrders.visibility = View.VISIBLE\n                            binding.linearAdmin.visibility = View.VISIBLE\n                            binding.linearJoinPartnership.visibility = View.GONE\n                        }else if(status == \"PARTNERS\"){\n                            binding.adminOrders.visibility = View.GONE\n                            binding.linearAdmin.visibility = View.GONE\n                            binding.linearJoinPartnership.visibility = View.GONE\n                            binding.linearViewPartnership.visibility = View.VISIBLE\n                        }else{\n                            binding.linearJoinPartnership.visibility = View.VISIBLE\n                            binding.linearViewPartnership.visibility = View.GONE\n                            binding.adminOrders.visibility = View.GONE\n                            binding.linearAdmin.visibility = View.GONE\n                        }\n                    }\n                }\n        }\n\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        onHomeClick()\n        onLogoutClick()\n        onBillingAndAddressesClick()\n        onProfileClick()\n        onAllOrderClick()\n        onTrackOrderClick()\n        onJoinPartnershipCLick()\n        onViewPartnershipClick()\n        onAdminClick()\n        onHelpClick()\n\n        observeProfile()\n        binding.tvVersionCode.text =\n            \"${resources.getText(R.string.g_version)} ${BuildConfig.VERSION_NAME}\"\n\n    }\n\n    private fun onHelpClick() {\n        binding.linearHelp.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_helpFragment)\n        }\n    }\n\n    private fun onAdminClick() {\n        binding.linearAdmin.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_adminDashboardFragment)\n        }\n    }\n\n\n    private fun onJoinPartnershipCLick() {\n        binding.linearJoinPartnership.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_joinPartnerFragment)\n        }\n    }\n    private fun onViewPartnershipClick() {\n        binding.linearViewPartnership.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_viewPartnershipFragment)\n        }\n    }\n\n    private fun onTrackOrderClick() {\n        binding.linearTrackOrder.setOnClickListener {\n            val snackBar = requireActivity().findViewById<CoordinatorLayout>(R.id.snackBar_coordinator)\n            Snackbar.make(snackBar,resources.getText(R.string.g_coming_soon),Snackbar.LENGTH_SHORT).show()\n        }\n    }\n\n    private fun onAllOrderClick() {\n        binding.allOrders.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_allOrdersFragment)\n        }\n    }\n\n    private fun onProfileClick() {\n        binding.constraintProfile.setOnClickListener {\n            user?.let {\n                val bundle = Bundle()\n                bundle.putParcelable(\"user\",user)\n                findNavController().navigate(R.id.action_profileFragment_to_editUserInformation,bundle)\n            }\n        }\n\n\n    }\n\n    var user: User?=null\n    private fun observeProfile() {\n        viewModel.profile.observe(viewLifecycleOwner) { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@observe\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n                    val user = response.data\n                    this.user = user\n                    binding.apply {\n                        tvUserName.text = user?.firstName + \" \" + user?.lastName\n                        Glide.with(requireView()).load(user?.imagePath)\n                            .error(R.drawable.ic_default_profile_picture).into(binding.imgUser)\n                    }\n                    return@observe\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@observe\n                }\n            }\n        }\n    }\n\n    private fun hideLoading() {\n        binding.apply {\n            binding.progressbarSettings.visibility = View.GONE\n            constraintParnet.visibility = View.VISIBLE\n        }\n    }\n\n    private fun showLoading() {\n        binding.apply {\n            binding.progressbarSettings.visibility = View.VISIBLE\n            constraintParnet.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun onBillingAndAddressesClick() {\n        binding.linearBilling.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"clickFlag\", UPDATE_ADDRESS_FLAG)\n            findNavController().navigate(R.id.action_profileFragment_to_billingFragment, bundle)\n        }\n    }\n\n    private fun onLogoutClick() {\n\n        binding.linearOut.setOnClickListener {\n            FirebaseAuth.getInstance().signOut()\n            val intent = Intent(context, LunchActivity::class.java)\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\n            startActivity(intent)\n        }\n    }\n\n    private fun onHomeClick() {\n        val btm = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        btm?.menu?.getItem(0)?.setOnMenuItemClickListener {\n            activity?.onBackPressed()\n            true\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        val bottomNavigation = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNavigation?.visibility = View.VISIBLE\n    }\n\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt	(date 1695462627546)
-@@ -10,12 +10,17 @@
- import android.widget.Toast
- import androidx.coordinatorlayout.widget.CoordinatorLayout
- import androidx.navigation.fragment.findNavController
-+import androidx.recyclerview.widget.LinearLayoutManager
- import com.bumptech.glide.Glide
- import com.example.kleine.BuildConfig
- import com.example.kleine.R
- import com.example.kleine.activities.LunchActivity
- import com.example.kleine.activities.ShoppingActivity
-+import com.example.kleine.adapters.recyclerview.AllOrdersAdapter
-+import com.example.kleine.adapters.recyclerview.MaterialAdapter
- import com.example.kleine.databinding.FragmentProfileBinding
-+import com.example.kleine.model.Enrollment
-+import com.example.kleine.model.Material
- import com.example.kleine.model.User
- import com.example.kleine.resource.Resource
- import com.example.kleine.util.Constants.Companion.UPDATE_ADDRESS_FLAG
-@@ -30,6 +35,11 @@
-     val TAG = "ProfileFragment"
-     private lateinit var binding: FragmentProfileBinding
-     private lateinit var viewModel: ShoppingViewModel
-+    private lateinit var materialAdapter: MaterialAdapter
-+
-+    private lateinit var enrolledMaterials: List<Material>
-+
-+
- 
-     override fun onCreate(savedInstanceState: Bundle?) {
-         super.onCreate(savedInstanceState)
-@@ -79,6 +89,8 @@
-     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-         super.onViewCreated(view, savedInstanceState)
- 
-+        materialAdapter = MaterialAdapter()
-+
-         onHomeClick()
-         onLogoutClick()
-         onBillingAndAddressesClick()
-@@ -127,12 +139,69 @@
-         }
-     }
- 
-+
-+
-     private fun onAllOrderClick() {
-         binding.allOrders.setOnClickListener {
-+            fetchUserEnrollments()
-             findNavController().navigate(R.id.action_profileFragment_to_allOrdersFragment)
-         }
-     }
- 
-+
-+
-+    private fun fetchUserEnrollments() {
-+        val userId = FirebaseAuth.getInstance().currentUser?.uid
-+        if (userId != null) {
-+            val firestore = FirebaseFirestore.getInstance()
-+            firestore.collection("enrollments")
-+                .whereEqualTo("userId", userId)
-+                .get()
-+                .addOnSuccessListener { querySnapshot ->
-+                    val enrollments = querySnapshot.documents.mapNotNull { document ->
-+                        document.toObject(Enrollment::class.java)
-+                    }
-+                    fetchMaterialsForEnrollments(enrollments)
-+                }
-+                .addOnFailureListener { exception ->
-+                    Log.e(TAG, "Error fetching user enrollments", exception)
-+                    // Handle the error appropriately
-+                }
-+        } else {
-+            // Handle the case where the user is not logged in
-+        }
-+    }
-+
-+    private fun fetchMaterialsForEnrollments(enrollments: List<Enrollment>) {
-+        val firestore = FirebaseFirestore.getInstance()
-+        val materialIds = enrollments.map { it.materialId }
-+
-+        firestore.collection("Materials")
-+            .whereIn("id", materialIds)
-+            .get()
-+            .addOnSuccessListener { querySnapshot ->
-+                val materials = querySnapshot.documents.mapNotNull { document ->
-+                    document.toObject(Material::class.java)
-+                }
-+                displayMaterials(materials)
-+            }
-+            .addOnFailureListener { exception ->
-+                Log.e(TAG, "Error fetching materials", exception)
-+                // Handle the error appropriately
-+            }
-+    }
-+
-+
-+
-+    private fun displayMaterials(materials: List<Material>) {
-+        // Update your UI with the fetched materials
-+        // For example, update the RecyclerView Adapter with the materials
-+        materialAdapter.differ.submitList(materials)
-+    }
-+
-+
-+
-+
-     private fun onProfileClick() {
-         binding.constraintProfile.setOnClickListener {
-             user?.let {
-Index: app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt
-deleted file mode 100644
---- a/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ /dev/null	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-@@ -1,212 +0,0 @@
--package com.example.kleine.fragments.shopping
--
--import android.annotation.SuppressLint
--import android.graphics.Paint
--import android.os.Bundle
--import android.util.Log
--import androidx.fragment.app.Fragment
--import android.view.LayoutInflater
--import android.view.View
--import android.view.ViewGroup
--import android.widget.Toast
--import androidx.lifecycle.Observer
--import androidx.navigation.fragment.navArgs
--import androidx.recyclerview.widget.LinearLayoutManager
--import com.example.kleine.R
--import com.example.kleine.SpacingDecorator.HorizantalSpacingItemDecorator
--import com.example.kleine.activities.ShoppingActivity
--import com.example.kleine.adapters.recyclerview.ColorsAndSizesAdapter
--import com.example.kleine.adapters.viewpager.ViewPager2Images
--import com.example.kleine.databinding.FragmentProductPreviewBinding
--import com.example.kleine.model.CartProduct
--import com.example.kleine.model.Product
--import com.example.kleine.resource.Resource
--import com.example.kleine.util.Constants.Companion.COLORS
--import com.example.kleine.util.Constants.Companion.COLORS_TYPE
--import com.example.kleine.util.Constants.Companion.IMAGES
--import com.example.kleine.util.Constants.Companion.PRODUCT_FLAG
--import com.example.kleine.util.Constants.Companion.SIZES
--import com.example.kleine.util.Constants.Companion.SIZES_TYPE
--import com.example.kleine.viewmodel.shopping.ShoppingViewModel
--import com.google.android.material.bottomnavigation.BottomNavigationView
--import io.github.vejei.viewpagerindicator.indicator.CircleIndicator
--
--class ProductPreviewFragment : Fragment() {
--
--    val args by navArgs<MaterialPreviewFragmentArgs>()
--    val TAG = "ProductPreviewFragment"
--
--    private lateinit var binding: FragmentProductPreviewBinding
--    private lateinit var colorsAdapter: ColorsAndSizesAdapter
--    private lateinit var sizesAdapter: ColorsAndSizesAdapter
--    private lateinit var viewPagerAdapter: ViewPager2Images
--    private lateinit var viewModel: ShoppingViewModel
--
--    override fun onCreate(savedInstanceState: Bundle?) {
--        super.onCreate(savedInstanceState)
--        colorsAdapter = ColorsAndSizesAdapter(COLORS_TYPE)
--        sizesAdapter = ColorsAndSizesAdapter(SIZES_TYPE)
--        viewPagerAdapter = ViewPager2Images()
--        viewModel = (activity as ShoppingActivity).viewModel
--    }
--
--    override fun onCreateView(
--        inflater: LayoutInflater, container: ViewGroup?,
--        savedInstanceState: Bundle?
--    ): View? {
--
--        binding = FragmentProductPreviewBinding.inflate(inflater)
--        return binding.root
--    }
--
--    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
--        super.onViewCreated(view, savedInstanceState)
--
--        val bottomNavigation =
--            requireActivity().findViewById<BottomNavigationView>(R.id.bottom_navigation)
--        bottomNavigation.visibility = View.GONE
--
--        val product = args.material
--
--        setupViewpager()
--
--
--
--//        setProductInformation(product)
--
--        onImageCloseClick()
--        onBtnAddToCartClick()
--
--        observeAddToCart()
--
--        onColorClick()
--        onSizeClick()
--    }
--
--    private var selectedSize: String = ""
--    private fun onSizeClick() {
--        sizesAdapter.onItemClick = { size ->
--            selectedSize = size
--            binding.tvSizeError.visibility = View.INVISIBLE
--
--        }
--    }
--
--    private var selectedColor: String = ""
--    private fun onColorClick() {
--        colorsAdapter.onItemClick = { color ->
--            selectedColor = color
--            binding.tvColorError.visibility = View.INVISIBLE
--        }
--    }
--
--
--    private fun observeAddToCart() {
--        viewModel.addToCart.observe(viewLifecycleOwner, Observer { response ->
--            val btn = binding.btnAddToCart
--            when (response) {
--                is Resource.Loading -> {
--                    startLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    stopLoading()
--                    viewModel.addToCart.value = null
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    Toast.makeText(activity, "Oops! error occurred", Toast.LENGTH_SHORT).show()
--                    viewModel.addToCart.value = null
--                    Log.e(TAG, response.message.toString())
--                }
--            }
--        })
--    }
--
--    private fun stopLoading() {
--        binding.apply {
--            btnAddToCart.visibility = View.VISIBLE
--            progressbar.visibility = View.INVISIBLE
--        }
--    }
--
--    private fun startLoading() {
--        binding.apply {
--            btnAddToCart.visibility = View.INVISIBLE
--            progressbar.visibility = View.VISIBLE
--        }
--    }
--
--
--    private fun onBtnAddToCartClick() {
--        binding.btnAddToCart.apply {
--            setOnClickListener {
--                if (selectedColor.isEmpty()) {
--                    binding.tvColorError.visibility = View.VISIBLE
--                    return@setOnClickListener
--                }
--                if (selectedSize.isEmpty()) {
--                    binding.tvSizeError.visibility = View.VISIBLE
--                    return@setOnClickListener
--                }
--
--
--                setBackgroundResource(R.color.g_black)
--            }
--        }
--    }
--
--
--    private fun onImageCloseClick() {
--        binding.imgClose.setOnClickListener {
--            activity?.onBackPressed()
--        }
--    }
--
--//    @SuppressLint("SetTextI18n")
--//    private fun setProductInformation(product: Product) {
--//        val imagesList = product.images!![IMAGES] as List<String>
--//        val colors = product.colors!![COLORS] as List<String>
--//        val sizes = product.sizes!![SIZES] as List<String>
--//        binding.apply {
--//            viewPagerAdapter.differ.submitList(imagesList)
--//            if (colors.isNotEmpty() && colors[0] != "")
--//                colorsAdapter.differ.submitList(colors.toList())
--//            if (sizes.isNotEmpty() && sizes[0] != "")
--//                sizesAdapter.differ.submitList(sizes)
--//            tvProductName.text = product.title
--//            tvProductDescription.text = product.description
--//            tvProductPrice.text = "$${product.price}"
--//            tvProductOfferPrice.visibility = View.GONE
--//            product.newPrice?.let {
--//                if (product.newPrice.isNotEmpty() && product.newPrice != "0") {
--//                    tvProductPrice.paintFlags =
--//                        tvProductPrice.paintFlags or Paint.STRIKE_THRU_TEXT_FLAG
--//                    tvProductOfferPrice.text = "$${product.newPrice}"
--//                    tvProductOfferPrice.visibility = View.VISIBLE
--//                }
--//            }
--//            product.sizeUnit?.let {
--//                if (it.isNotEmpty()) {
--//                    binding.tvSizeUnit.visibility = View.VISIBLE
--//                    binding.tvSizeUnit.text = " ($it)"
--//                }
--//            }
--//        }
--//    }
--
--
--
--
--
--    private fun setupViewpager() {
--        binding.viewpager2Images.adapter = viewPagerAdapter
--        binding.circleIndicator.setWithViewPager2(binding.viewpager2Images)
--        binding.circleIndicator.itemCount = 1 // Only one image
--        binding.circleIndicator.setAnimationMode(CircleIndicator.AnimationMode.SLIDE)
--    }
--
--
--}
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/model/Enrollment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/model/Enrollment.kt b/app/src/main/java/com/example/kleine/model/Enrollment.kt
-new file mode 100644
---- /dev/null	(date 1695462044444)
-+++ b/app/src/main/java/com/example/kleine/model/Enrollment.kt	(date 1695462044444)
-@@ -0,0 +1,10 @@
-+package com.example.kleine.model
-+
-+import android.os.Parcelable
-+import kotlinx.android.parcel.Parcelize
-+
-+@Parcelize
-+data class Enrollment(
-+    val userId: String = "", // ID of the user who has enrolled
-+    val materialId: String = "" // ID of the material/course in which the user has enrolled
-+): Parcelable
-Index: app/src/main/res/drawable/tab_selector.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/drawable/tab_selector.xml b/app/src/main/res/drawable/tab_selector.xml
-new file mode 100644
---- /dev/null	(date 1695378074287)
-+++ b/app/src/main/res/drawable/tab_selector.xml	(date 1695378074287)
-@@ -0,0 +1,5 @@
-+<?xml version="1.0" encoding="utf-8"?>
-+<selector xmlns:android="http://schemas.android.com/apk/res/android">
-+    <item android:drawable="@drawable/tab_icon_selected" android:state_selected="true"/>
-+    <item android:drawable="@drawable/tab_icon_default"/>
-+</selector>
-Index: app/src/main/java/com/example/kleine/model/Material.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.model\n\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.parcelize.Parcelize\n\n@Parcelize\n@Entity(tableName = \"material\")\ndata class Material(\n    @PrimaryKey(autoGenerate = true) // ID as auto increment\n    val desc: String = \"\",\n    val name: String = \"\", // Course name\n    val pass: Int = 0, // Number of students who passed this course/subject\n    val rating: Float = 0f, // Rating (1 - 5)\n    val requirement: String = \"\", // Requirement (e.g., Free)\n    val status: String = \"\", // Status (Available/Unavailable)\n    val view: Int = 0, // Number of students who viewed this course/subject\n    val imageUrl: String = \"\", // URL for the course banner\n    val enroll: Int = 0, // Number of students enrolled in this course/subject\n    val partnershipsID: String? = null  // partnership ID\n\n): Parcelable\n\n@Parcelize\ndata class MaterialData(\n    var id: String = \"\",\n    var name: String = \"\",\n    var desc: String = \"\",\n    var requirement: String = \"\",\n    var rating: Double = 0.0,\n    var imageUrl: String = \"\"\n): Parcelable {\n    constructor() : this(\"\", \"\", \"\", \"\", 0.0, \"\")\n}\n\n@Parcelize\ndata class MaterialEngageData(\n    val name: String = \"\",\n    val view: Long = 0,\n    val enroll: Long = 0,\n    val graduate: Long = 0,\n    val imageUrl: String = \"\"\n): Parcelable {\n    constructor() : this(\"\", 0,0,0,\"\")\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/model/Material.kt b/app/src/main/java/com/example/kleine/model/Material.kt
---- a/app/src/main/java/com/example/kleine/model/Material.kt	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/java/com/example/kleine/model/Material.kt	(date 1695406195050)
-@@ -8,7 +8,8 @@
- @Parcelize
- @Entity(tableName = "material")
- data class Material(
--    @PrimaryKey(autoGenerate = true) // ID as auto increment
-+//    @PrimaryKey(autoGenerate = true) // ID as auto increment
-+    var id: String = "",
-     val desc: String = "",
-     val name: String = "", // Course name
-     val pass: Int = 0, // Number of students who passed this course/subject
-Index: app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.firebaseDatabase\n\nimport android.util.Log\nimport com.example.kleine.model.*\nimport com.example.kleine.util.Constants.Companion.ADDRESS_COLLECTION\nimport com.example.kleine.util.Constants.Companion.BEST_DEALS\nimport com.example.kleine.util.Constants.Companion.CART_COLLECTION\nimport com.example.kleine.util.Constants.Companion.CATEGORIES_COLLECTION\nimport com.example.kleine.util.Constants.Companion.CATEGORY\nimport com.example.kleine.util.Constants.Companion.CHAIR_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CLOTHES\nimport com.example.kleine.util.Constants.Companion.COLOR\nimport com.example.kleine.util.Constants.Companion.CUPBOARD_CATEGORY\nimport com.example.kleine.util.Constants.Companion.ID\nimport com.example.kleine.util.Constants.Companion.ORDERS\nimport com.example.kleine.util.Constants.Companion.ORDER_CONFIRM_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_PLACED_STATE\nimport com.example.kleine.util.Constants.Companion.PRICE\nimport com.example.kleine.util.Constants.Companion.PRODUCTS_COLLECTION\nimport com.example.kleine.util.Constants.Companion.QUANTITY\nimport com.example.kleine.util.Constants.Companion.SIZE\nimport com.example.kleine.util.Constants.Companion.STORES_COLLECTION\nimport com.example.kleine.util.Constants.Companion.TITLE\nimport com.example.kleine.util.Constants.Companion.USERS_COLLECTION\n\n\nimport com.google.android.gms.tasks.Task\nimport com.google.firebase.auth.AuthCredential\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.ktx.auth\nimport com.google.firebase.firestore.DocumentSnapshot\nimport com.google.firebase.firestore.FirebaseFirestore\nimport com.google.firebase.firestore.Query\nimport com.google.firebase.firestore.QuerySnapshot\nimport com.google.firebase.firestore.Transaction\nimport com.google.firebase.firestore.ktx.firestore\nimport com.google.firebase.ktx.Firebase\nimport com.google.firebase.storage.FirebaseStorage\nimport com.google.firebase.storage.UploadTask\nimport com.google.firebase.storage.ktx.storage\nimport java.util.*\nimport kotlin.collections.ArrayList\nimport kotlin.collections.HashMap\nimport kotlin.random.Random\n\nclass FirebaseDb {\n    private val usersCollectionRef = Firebase.firestore.collection(USERS_COLLECTION)\n    private val productsCollection = Firebase.firestore.collection(PRODUCTS_COLLECTION)\n    private val categoriesCollection = Firebase.firestore.collection(CATEGORIES_COLLECTION)\n    private val storesCollection = Firebase.firestore.collection(STORES_COLLECTION)\n\n\n    private val firebaseStorage = Firebase.storage.reference\n\n    val userUid = FirebaseAuth.getInstance().currentUser?.uid\n\n    private val userCartCollection = userUid?.let {\n        Firebase.firestore.collection(USERS_COLLECTION).document(it).collection(CART_COLLECTION)\n    }\n    private val userAddressesCollection = userUid?.let {\n        Firebase.firestore.collection(USERS_COLLECTION).document(it).collection(ADDRESS_COLLECTION)\n\n    }\n\n\n    private val firebaseAuth = Firebase.auth\n\n    fun getProductsByCategory(category: String,page:Long) =\n        productsCollection.whereEqualTo(CATEGORY,category).limit(page).get()\n\n\n    fun getMostRequestedProducts(category: String,page:Long) =\n        productsCollection.whereEqualTo(CATEGORY, category)\n            .orderBy(ORDERS, Query.Direction.DESCENDING).limit(page).get()\n\n\n    fun createNewUser(\n        email: String, password: String\n    ) = firebaseAuth.createUserWithEmailAndPassword(email, password)\n\n    fun saveUserInformation(userUid: String, user: User, completion: (Exception?) -> Unit) {\n        usersCollectionRef.document(userUid).set(user)\n            .addOnSuccessListener { completion(null) }\n            .addOnFailureListener { e -> completion(e) }\n    }\n\n\n\n\n    fun loginUser(\n        email: String,\n        password: String\n    ) = firebaseAuth.signInWithEmailAndPassword(email, password)\n\n    fun getClothesProducts(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, CLOTHES).limit(pagingPage).get()\n\n    fun getBestDealsProducts(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, BEST_DEALS).limit(pagingPage).get()\n\n    fun getHomeProducts(pagingPage: Long) =\n        productsCollection.limit(pagingPage).get()\n\n    //add order by orders\n    fun getMostOrderedCupboard(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, CUPBOARD_CATEGORY).limit(pagingPage)\n            .orderBy(ORDERS, Query.Direction.DESCENDING).limit(pagingPage).get()\n\n    fun getCupboards(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, CUPBOARD_CATEGORY).limit(pagingPage)\n            .limit(pagingPage).get()\n\n    fun addProductToCart(product: CartProduct) = userCartCollection?.document()!!.set(product)\n\n    fun getProductInCart(product: CartProduct) = userCartCollection!!\n        .whereEqualTo(ID, product.id)\n        .whereEqualTo(COLOR, product.color)\n        .whereEqualTo(SIZE, product.size).get()\n\n    fun increaseProductQuantity(documentId: String): Task<Transaction> {\n        val document = userCartCollection!!.document(documentId)\n        return Firebase.firestore.runTransaction { transaction ->\n            val productBefore = transaction.get(document)\n            var quantity = productBefore.getLong(QUANTITY)\n            quantity = quantity!! + 1\n            transaction.update(document, QUANTITY, quantity)\n        }\n\n    }\n\n    fun getItemsInCart() = userCartCollection!!\n\n    fun decreaseProductQuantity(documentId: String): Task<Transaction> {\n        val document = userCartCollection!!.document(documentId)\n        return Firebase.firestore.runTransaction { transaction ->\n            val productBefore = transaction.get(document)\n            var quantity = productBefore.getLong(QUANTITY)\n            quantity = if (quantity!!.toInt() == 1)\n                1\n            else\n                quantity - 1\n            transaction.update(document, QUANTITY, quantity)\n\n        }\n\n    }\n\n    fun getMaterials(page: Long): Task<QuerySnapshot> {\n        return FirebaseFirestore.getInstance().collection(\"Materials\").limit(page).get()\n    }\n\n\n\n    fun deleteProductFromCart(documentId: String) =\n        userCartCollection!!.document(documentId).delete()\n\n\n    fun searchProducts(searchQuery: String) = productsCollection\n        .orderBy(\"title\")\n        .startAt(searchQuery)\n        .endAt(\"\\u03A9+$searchQuery\")\n        .limit(5)\n        .get()\n\n    fun getCategories() = categoriesCollection.orderBy(\"rank\").get()\n\n    fun getProductFromCartProduct(cartProduct: CartProduct) =\n        productsCollection.whereEqualTo(ID, cartProduct.id)\n            .whereEqualTo(TITLE, cartProduct.name)\n            .whereEqualTo(PRICE, cartProduct.price).get()\n\n    fun saveNewAddress(address: Address) = userAddressesCollection?.add(address)\n\n    fun getAddresses() = userAddressesCollection\n\n    fun findAddress(address: Address) = userAddressesCollection!!\n        .whereEqualTo(\"addressTitle\", address.addressTitle)\n        .whereEqualTo(\"fullName\", address.fullName).get()\n\n    fun updateAddress(documentUid: String, address: Address) =\n        userAddressesCollection?.document(documentUid)?.set(address)\n\n    fun deleteAddress(documentUid: String, address: Address) =\n        userAddressesCollection?.document(documentUid)?.delete()\n\n    fun placeOrder(products: List<CartProduct>, address: Address, order: Order) =\n        Firebase.firestore.runBatch { batch ->\n            //filter every product to its store\n            /**\n             * create a map of products that has the size of stores list,\n            the map has stores name as keys\n             */\n\n            val stores = ArrayList<String>()\n            products.forEach { cartProduct ->\n                if (!stores.contains(cartProduct.store)) {\n                    stores.add(cartProduct.store)\n                }\n            }\n\n            val productsMap = HashMap<String, ArrayList<CartProduct>>(stores.size)\n            stores.forEach { storeName ->\n                val tempList = ArrayList<CartProduct>()\n                products.forEach { cartProduct ->\n                    if (cartProduct.store == storeName)\n                        tempList.add(cartProduct)\n                    productsMap[storeName] = tempList\n                }\n            }\n\n\n            /**\n            // Adding order,address and products to each store\n             */\n            productsMap.forEach {\n                val store = it.key\n                val orderProducts = it.value\n                val orderNum = order.id\n                var price = 0\n\n                orderProducts.forEach { it2 ->\n                    if (it2.newPrice != null && it2.newPrice.isNotEmpty()) {\n                        price += it2.newPrice.toInt() * it2.quantity\n                    } else\n                        price += it2.price.toInt() * it2.quantity\n                }\n\n                Log.d(\"test\", \"$store $price\")\n\n                val storeOrder = Order(\n                    orderNum.toString(),\n                    Calendar.getInstance().time,\n                    price.toString(),\n                    ORDER_PLACED_STATE\n                )\n\n                val storeDocument = storesCollection\n                    .document(store)\n                    .collection(\"orders\")\n                    .document()\n\n                batch.set(storeDocument, storeOrder)\n\n                val storeOrderAddress = storeDocument.collection(ADDRESS_COLLECTION).document()\n                batch.set(storeOrderAddress, address)\n\n\n                orderProducts.forEach {\n                    val storeOrderProducts =\n                        storeDocument.collection(PRODUCTS_COLLECTION).document()\n                    batch.set(storeOrderProducts, it)\n                }\n\n\n            }\n\n            /**\n            // Adding order,address and products to the user\n             */\n            val userOrderDocument =\n                usersCollectionRef.document(FirebaseAuth.getInstance().currentUser!!.uid)\n                    .collection(\"orders\").document()\n            batch.set(userOrderDocument, order)\n\n            products.forEach {\n                val userProductDocument =\n                    userOrderDocument.collection(PRODUCTS_COLLECTION).document()\n                batch.set(userProductDocument, it)\n            }\n\n            val userAddressDocument = userOrderDocument.collection(ADDRESS_COLLECTION).document()\n\n            batch.set(userAddressDocument, address)\n\n        }.also {\n            deleteCartItems()\n        }\n\n    private fun deleteCartItems() {\n        userCartCollection?.get()?.addOnSuccessListener {\n            Firebase.firestore.runBatch { batch ->\n                it.documents.forEach {\n                    val document = userCartCollection.document(it.id)\n                    batch.delete(document)\n                }\n            }\n        }\n    }\n\n\n    fun getUser() = usersCollectionRef\n        .document(FirebaseAuth.getInstance().currentUser!!.uid)\n\n\n    fun uploadUserProfileImage(image: ByteArray, imageName: String): UploadTask {\n        val imageRef = firebaseStorage.child(\"profileImages\")\n            .child(firebaseAuth.currentUser!!.uid)\n            .child(imageName)\n\n        return imageRef.putBytes(image)\n\n    }\n\n    fun getImageUrl(\n        firstName: String,\n        lastName: String,\n        email: String,\n        imageName: String,\n        onResult: (User?, String?) -> Unit,\n    ) {\n        if (imageName.isNotEmpty())\n            firebaseStorage.child(\"profileImages\")\n                .child(firebaseAuth.currentUser!!.uid)\n                .child(imageName).downloadUrl.addOnCompleteListener {\n                    if (it.isSuccessful) {\n                        val imageUrl = it.result.toString()\n                        val user = User(firstName, lastName, email, imageUrl)\n                        onResult(user, null)\n                    } else\n                        onResult(null, it.exception.toString())\n\n                } else {\n            val user = User(firstName, lastName, email, \"\")\n            onResult(user, null)\n        }\n    }\n\n    fun updateUserInformation(user: User) =\n        Firebase.firestore.runTransaction { transaction ->\n            val userPath = usersCollectionRef.document(Firebase.auth.currentUser!!.uid)\n            if (user.imagePath.isNotEmpty()) {\n                transaction.set(userPath, user)\n            } else {\n                val imagePath = transaction.get(userPath)[\"imagePath\"] as String\n                user.imagePath = imagePath\n                transaction.set(userPath, user)\n            }\n\n        }\n\n\n    fun getUserOrders() = usersCollectionRef\n        .document(FirebaseAuth.getInstance().currentUser!!.uid)\n        .collection(ORDERS)\n        .orderBy(\"date\", Query.Direction.DESCENDING)\n        .get()\n\n    fun resetPassword(email: String) = firebaseAuth.sendPasswordResetEmail(email)\n\n    fun getOrderAddressAndProducts(\n        order: Order,\n        address: (Address?, String?) -> Unit,\n        products: (List<CartProduct>?, String?) -> Unit\n    ) {\n        usersCollectionRef\n            .document(Firebase.auth.currentUser!!.uid).collection(ORDERS)\n            .whereEqualTo(\"id\", order.id)\n            .get().addOnCompleteListener {\n                if (it.isSuccessful) {\n                    val id = it.result?.documents?.get(0)?.id\n                    usersCollectionRef.document(Firebase.auth.currentUser!!.uid)\n                        .collection(ORDERS).document(id!!).collection(ADDRESS_COLLECTION).get()\n                        .addOnCompleteListener { it2 ->\n                            if (it2.isSuccessful) {\n                                val address2 = it2.result?.toObjects(Address::class.java)\n                                Log.d(\"test\", address2!!.size.toString())\n                                address(address2?.get(0), null)\n                            } else\n                                address(null, it2.exception.toString())\n                        }\n\n                    usersCollectionRef.document(Firebase.auth.currentUser!!.uid)\n                        .collection(ORDERS).document(id).collection(PRODUCTS_COLLECTION).get()\n                        .addOnCompleteListener { it2 ->\n                            if (it2.isSuccessful) {\n                                val products2 = it2.result?.toObjects(CartProduct::class.java)\n                                Log.d(\"test\", products2!!.size.toString())\n                                products(products2, null)\n                            } else\n                                products(null, it2.exception.toString())\n                        }\n\n\n                } else {\n                    address(null, it.exception.toString())\n                    products(null, it.exception.toString())\n                }\n            }\n    }\n\n    //true -> already existed account\n    //false -> new account\n    fun checkUserByEmail(email: String, onResult: (String?, Boolean?) -> Unit) {\n        usersCollectionRef.whereEqualTo(\"email\", email).get()\n            .addOnCompleteListener {\n                if (it.isSuccessful) {\n                    val user = it.result.toObjects(User::class.java)\n                    if (user.isEmpty())\n                        onResult(null, false)\n                    else\n                        onResult(null, true)\n                } else\n                    onResult(it.exception.toString(), null)\n            }\n    }\n\n    fun signInWithGoogle(credential: AuthCredential) =\n        FirebaseAuth.getInstance().signInWithCredential(credential)\n\n    fun fetchStore(uid:String) = storesCollection.whereEqualTo(\"uid\",uid).get()\n\n\n\n    fun logout() = Firebase.auth.signOut()\n\n\n\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt b/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt
---- a/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt	(date 1695407258168)
-@@ -25,6 +25,7 @@
- 
- 
- import com.google.android.gms.tasks.Task
-+import com.google.android.gms.tasks.TaskCompletionSource
- import com.google.firebase.auth.AuthCredential
- import com.google.firebase.auth.FirebaseAuth
- import com.google.firebase.auth.ktx.auth
-@@ -145,9 +146,28 @@
- 
-     }
- 
--    fun getMaterials(page: Long): Task<QuerySnapshot> {
--        return FirebaseFirestore.getInstance().collection("Materials").limit(page).get()
-+    fun getMaterials(page: Long): Task<List<Material>> {
-+        val taskCompletionSource = TaskCompletionSource<List<Material>>()
-+
-+        FirebaseFirestore.getInstance().collection("Materials").limit(page).get()
-+            .addOnSuccessListener { querySnapshot ->
-+                val materials = querySnapshot.documents.mapNotNull { document ->
-+                    val material = document.toObject(Material::class.java)
-+                    material?.id = document.id // Set the id of the Material object
-+                    material
-+                }
-+                // Set the result to the TaskCompletionSource
-+                taskCompletionSource.setResult(materials)
-+            }
-+            .addOnFailureListener { exception ->
-+                // Set the exception to the TaskCompletionSource
-+                taskCompletionSource.setException(exception)
-+            }
-+
-+        return taskCompletionSource.task
-     }
-+
-+
- 
- 
- 
-Index: app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.viewmodel.shopping\n\nimport android.util.Log\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.kleine.firebaseDatabase.FirebaseDb\nimport com.example.kleine.model.*\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.ACCESSORY_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CHAIR_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CUPBOARD_CATEGORY\nimport com.example.kleine.util.Constants.Companion.FURNITURE_CATEGORY\nimport com.example.kleine.util.Constants.Companion.TABLES_CATEGORY\nimport com.google.firebase.firestore.FirebaseFirestore\nimport java.util.*\n\nprivate const val TAG = \"ShoppingViewModel\"\n\nclass ShoppingViewModel(\n    private val firebaseDatabase: FirebaseDb\n) : ViewModel() {\n\n\n    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()\n//    val materialsLiveData: MutableLiveData<Resource<List<Material>>> = MutableLiveData()\n    val materials: MutableLiveData<Resource<List<Material>>> = MutableLiveData()\n\n    private val _materialsLiveData = MutableLiveData<Resource<List<Material>>>()\n    val materialsLiveData: LiveData<Resource<List<Material>>> get() = _materialsLiveData\n\n\n//    val materials = MutableLiveData<Resource<List<Material>>>()\n\n    val clothes = MutableLiveData<List<Product>>()\n    val emptyClothes = MutableLiveData<Boolean>()\n    val bestDeals = MutableLiveData<List<Product>>()\n    val emptyBestDeals = MutableLiveData<Boolean>()\n\n    val home = MutableLiveData<Resource<List<Product>>>()\n\n    val chairs = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedChairs = MutableLiveData<Resource<List<Product>>>()\n\n    val tables = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedTables = MutableLiveData<Resource<List<Product>>>()\n\n    val accessory = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedAccessories = MutableLiveData<Resource<List<Product>>>()\n\n    val furniture = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedFurniture = MutableLiveData<Resource<List<Product>>>()\n\n    val mostRequestedCupboard = MutableLiveData<Resource<List<Product>>>()\n    val cupboard = MutableLiveData<Resource<List<Product>>>()\n    val addToCart = MutableLiveData<Resource<Boolean>>()\n\n    val addAddress = MutableLiveData<Resource<Address>>()\n    val updateAddress = MutableLiveData<Resource<Address>>()\n    val deleteAddress = MutableLiveData<Resource<Address>>()\n\n    val profile = MutableLiveData<Resource<User>>()\n\n    val uploadProfileImage = MutableLiveData<Resource<String>>()\n    val updateUserInformation = MutableLiveData<Resource<User>>()\n\n    val userOrders = MutableLiveData<Resource<List<Order>>>()\n\n    val passwordReset = MutableLiveData<Resource<String>>()\n\n    val orderAddress = MutableLiveData<Resource<Address>>()\n    val orderProducts = MutableLiveData<Resource<List<CartProduct>>>()\n\n    val categories = MutableLiveData<Resource<List<Category>>>()\n\n\n    val search = MutableLiveData<Resource<List<Product>>>()\n\n    private var homePage: Long = 10\n    private var clothesPaging: Long = 5\n    private var bestDealsPaging: Long = 5\n\n    private var cupboardPaging: Long = 4\n    private var mostOrderCupboardPaging: Long = 5\n\n    private var mostRequestedChairsPage: Long = 3\n    private var chairsPage: Long = 4\n\n    private var mostRequestedTablePage: Long = 3\n    private var tablePage: Long = 4\n\n    private var mostRequestedAccessoryPage: Long = 3\n    private var accessoryPage: Long = 4\n\n    private var mostRequestedFurniturePage: Long = 3\n    private var furniturePage: Long = 4\n\n\n    init {\n        getClothesProducts()\n        getBestDealsProduct()\n        getHomeProduct()\n    }\n\n\n    // Fetch Materials from Firebase\n    fun getMaterials() {\n        _materialsLiveData.postValue(Resource.Loading())\n\n        firebaseDatabase.getMaterials(10)\n            .addOnSuccessListener { documents ->\n                val materials = documents.toObjects(Material::class.java)\n                _materialsLiveData.postValue(Resource.Success(materials))\n            }\n            .addOnFailureListener { exception ->\n                _materialsLiveData.postValue(Resource.Error(exception.message ?: \"An unknown error occurred\"))\n            }\n    }\n\n\n\n    private var furnitureProducts: List<Product>? = null\n    fun getFurniture(size: Int = 0) {\n        if (furnitureProducts != null && size == 0) {\n            furniture.postValue(Resource.Success(furnitureProducts))\n            return\n        }\n        furniture.postValue(Resource.Loading())\n        shouldPaging(FURNITURE_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                tables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(FURNITURE_CATEGORY, furniturePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                furnitureProducts = productsList\n                                furniture.postValue(Resource.Success(productsList))\n                                furniturePage += 4\n\n                            }\n                        } else\n                            furniture.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                furniture.postValue(Resource.Error(\"Cannot paging\"))\n\n        }\n    }\n\n    private var mostRequestedFurnitureProducts: List<Product>? = null\n    fun getMostRequestedFurniture(size: Int = 0) {\n        if (mostRequestedFurnitureProducts != null && size == 0) {\n            mostRequestedFurniture.postValue(Resource.Success(mostRequestedFurnitureProducts))\n            return\n        }\n        mostRequestedFurniture.postValue(Resource.Loading())\n        shouldPaging(FURNITURE_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedFurniture.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(\n                    FURNITURE_CATEGORY,\n                    mostRequestedFurniturePage\n                )\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedFurnitureProducts = productsList\n                                mostRequestedFurniture.postValue(Resource.Success(productsList))\n                                mostRequestedFurniturePage += 4\n\n                            }\n                        } else\n                            mostRequestedFurniture.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedFurniture.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var accessoriesProducts: List<Product>? = null\n    fun getAccessories(size: Int = 0) {\n        if (accessoriesProducts != null && size == 0) {\n            accessory.postValue(Resource.Success(accessoriesProducts))\n            return\n        }\n        accessory.postValue(Resource.Loading())\n        shouldPaging(ACCESSORY_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                Log.d(\"test\", \"paging\")\n                firebaseDatabase.getProductsByCategory(ACCESSORY_CATEGORY, accessoryPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                accessory.postValue(Resource.Success(productsList))\n                                accessoriesProducts = productsList\n                                accessoryPage += 4\n\n                            }\n                        } else\n                            accessory.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else {\n                accessory.postValue(Resource.Error(\"Cannot page\"))\n            }\n        }\n    }\n\n    private var mostRequestedAccessoriesProducts: List<Product>? = null\n    fun getMostRequestedAccessories(size: Int = 0) {\n        if (mostRequestedAccessoriesProducts != null && size == 0) {\n            mostRequestedAccessories.postValue(Resource.Success(mostRequestedAccessoriesProducts))\n            return\n        }\n        mostRequestedAccessories.postValue(Resource.Loading())\n        shouldPaging(ACCESSORY_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(\n                    ACCESSORY_CATEGORY,\n                    mostRequestedAccessoryPage\n                )\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedAccessories.postValue(Resource.Success(productsList))\n                                mostRequestedAccessoriesProducts = productsList\n                                mostRequestedAccessoryPage += 4\n\n                            }\n                        } else\n                            mostRequestedAccessories.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedAccessories.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var chairsProducts: List<Product>? = null\n    fun getChairs(size: Int = 0) {\n        if (chairsProducts != null && size == 0) {\n            chairs.postValue(Resource.Success(chairsProducts))\n            return\n        }\n        chairs.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(CHAIR_CATEGORY, chairsPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                chairsProducts = productsList\n                                chairs.postValue(Resource.Success(productsList))\n                                chairsPage += 4\n\n                            }\n                        } else\n                            chairs.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                chairs.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedChairsProducts: List<Product>? = null\n    fun getMostRequestedChairs(size: Int = 0) {\n        if (mostRequestedChairsProducts != null && size == 0) {\n            mostRequestedChairs.postValue(Resource.Success(chairsProducts))\n            return\n        }\n        mostRequestedChairs.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(CHAIR_CATEGORY, mostRequestedChairsPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedChairsProducts = productsList\n                                mostRequestedChairs.postValue(Resource.Success(productsList))\n                                mostRequestedChairsPage += 4\n\n                            }\n                        } else\n                            mostRequestedChairs.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                chairs.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var tablesProducts: List<Product>? = null\n    fun getTables(size: Int = 0) {\n        if (tablesProducts != null && size == 0) {\n            tables.postValue(Resource.Success(tablesProducts))\n            return\n        }\n        tables.postValue(Resource.Loading())\n        shouldPaging(TABLES_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                tables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(TABLES_CATEGORY, tablePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                tablesProducts = productsList\n                                tables.postValue(Resource.Success(productsList))\n                                tablePage += 4\n\n                            }\n                        } else\n                            tables.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                home.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedTablesProducts: List<Product>? = null\n    fun getMostRequestedTables(size: Int = 0) {\n        if (mostRequestedTablesProducts != null && size == 0) {\n            tables.postValue(Resource.Success(mostRequestedTablesProducts))\n            return\n        }\n        mostRequestedTables.postValue(Resource.Loading())\n        shouldPaging(TABLES_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedTables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(TABLES_CATEGORY, mostRequestedTablePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedTablesProducts = productsList\n                                mostRequestedTables.postValue(Resource.Success(productsList))\n                                mostRequestedTablePage += 3\n\n                            }\n                        } else\n                            mostRequestedTables.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedTables.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n\n    fun getClothesProducts() =\n        firebaseDatabase.getClothesProducts(clothesPaging).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result\n                if (!documents!!.isEmpty) {\n                    val productsList = documents.toObjects(Product::class.java)\n                    clothes.postValue(productsList)\n                    clothesPaging += 5\n                } else\n                    emptyClothes.postValue(true)\n\n            } else\n                Log.e(TAG, it.exception.toString())\n\n        }\n\n    fun getBestDealsProduct() =\n        firebaseDatabase.getBestDealsProducts(bestDealsPaging).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result\n                if (!documents!!.isEmpty) {\n                    val productsList = documents.toObjects(Product::class.java)\n                    bestDeals.postValue(productsList)\n                    bestDealsPaging += 5\n                } else\n                    emptyBestDeals.postValue(true)\n\n            } else\n                Log.e(TAG, it.exception.toString())\n        }\n\n    fun getHomeProduct(size: Int = 0) {\n        home.postValue(Resource.Loading())\n        shouldPagingHome(size)\n        { shouldPaging ->\n            if (shouldPaging) {\n                home.postValue(Resource.Loading())\n                firebaseDatabase.getHomeProducts(homePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                home.postValue(Resource.Success(productsList))\n                                homePage += 4\n\n                            }\n                        } else\n                            home.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                home.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedCupboardProducts: List<Product>? = null\n    fun getMostRequestedCupboards(size: Int = 0) {\n        if (mostRequestedCupboardProducts != null && size == 0) {\n            mostRequestedCupboard.postValue(Resource.Success(mostRequestedCupboardProducts))\n            return\n        }\n\n        mostRequestedCupboard.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedCupboard.postValue(Resource.Loading())\n                firebaseDatabase.getMostOrderedCupboard(mostOrderCupboardPaging)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedCupboardProducts = productsList\n                                mostRequestedCupboard.postValue(Resource.Success(productsList))\n                                mostOrderCupboardPaging += 5\n\n                            }\n                        } else\n                            mostRequestedCupboard.postValue(Resource.Error(it.exception.toString()))\n                    }\n\n\n            } else\n                mostRequestedCupboard.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var dCupboardProducts: List<Product>? = null\n    fun getCupboardProduct(size: Int = 0) {\n        if (dCupboardProducts != null && size == 0) {\n            cupboard.postValue(Resource.Success(dCupboardProducts))\n            return\n        }\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                cupboard.postValue(Resource.Loading())\n                firebaseDatabase.getCupboards(cupboardPaging).addOnCompleteListener {\n                    if (it.isSuccessful) {\n\n                        val documents = it.result\n                        if (!documents!!.isEmpty) {\n                            val productsList = documents.toObjects(Product::class.java)\n                            dCupboardProducts = productsList\n                            cupboard.postValue(Resource.Success(productsList))\n                            cupboardPaging += 10\n                        }\n\n                    } else\n                        cupboard.postValue(Resource.Error(it.exception.toString()))\n                }\n            } else\n                cupboard.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    /*\n    * TODO : Move these functions to firebaseDatabase class\n     */\n\n    private fun shouldPaging(category: String, listSize: Int, onSuccess: (Boolean) -> Unit) {\n        FirebaseFirestore.getInstance()\n            .collection(\"categories\")\n            .whereEqualTo(\"name\", category).get().addOnSuccessListener {\n                val tempCategory = it.toObjects(Category::class.java)\n                val products = tempCategory[0].products\n                Log.d(\"test\", \" $category : prodcuts ${tempCategory[0].products}, size $listSize\")\n                if (listSize == products)\n                    onSuccess(false).also { Log.d(TAG, \"$category Paging:false\") }\n                else\n                    onSuccess(true).also { Log.d(TAG, \"$category Paging:true\") }\n            }\n    }\n\n    private fun shouldPagingHome(listSize: Int, onSuccess: (Boolean) -> Unit) {\n        FirebaseFirestore.getInstance()\n            .collection(\"categories\").get().addOnSuccessListener {\n                var productsCount = 0\n                it.toObjects(Category::class.java).forEach { category ->\n                    productsCount += category.products!!.toInt()\n                }\n\n                if (listSize == productsCount)\n                    onSuccess(false)\n                else\n                    onSuccess(true)\n\n            }\n    }\n\n\n    private fun checkIfProductAlreadyAdded(\n        product: CartProduct,\n        onSuccess: (Boolean, String) -> Unit\n    ) {\n        addToCart.postValue(Resource.Loading())\n        firebaseDatabase.getProductInCart(product).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result!!.documents\n                if (documents.isNotEmpty())\n                    onSuccess(true, documents[0].id) // true ---> product is already in cart\n                else\n                    onSuccess(false, \"\") // false ---> product is not in cart\n            } else\n                addToCart.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n\n    fun addProductToCart(product: CartProduct) =\n        checkIfProductAlreadyAdded(product) { isAdded, id ->\n            if (isAdded) {\n                firebaseDatabase.increaseProductQuantity(id).addOnCompleteListener {\n                    if (it.isSuccessful)\n                        addToCart.postValue(Resource.Success(true))\n                    else\n                        addToCart.postValue(Resource.Error(it.exception!!.message))\n\n                }\n            } else {\n                firebaseDatabase.addProductToCart(product).addOnCompleteListener {\n                    if (it.isSuccessful)\n                        addToCart.postValue(Resource.Success(true))\n                    else\n                        addToCart.postValue(Resource.Error(it.exception!!.message))\n                }\n            }\n        }\n\n\n    fun saveAddress(address: Address) {\n        addAddress.postValue(Resource.Loading())\n        firebaseDatabase.saveNewAddress(address)?.addOnCompleteListener {\n            if (it.isSuccessful)\n                addAddress.postValue(Resource.Success(address))\n            else\n                addAddress.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun updateAddress(oldAddress: Address, newAddress: Address) {\n        updateAddress.postValue(Resource.Loading())\n        firebaseDatabase.findAddress(oldAddress).addOnCompleteListener { addressResponse ->\n            if (addressResponse.isSuccessful) {\n                val documentUid = addressResponse.result!!.documents[0].id\n                firebaseDatabase.updateAddress(documentUid, newAddress)?.addOnCompleteListener {\n                    if (it.isSuccessful)\n                        updateAddress.postValue(Resource.Success(newAddress))\n                    else\n                        updateAddress.postValue(Resource.Error(it.exception.toString()))\n\n                }\n\n            } else\n                updateAddress.postValue(Resource.Error(addressResponse.exception.toString()))\n\n        }\n    }\n\n    fun deleteAddress(address: Address) {\n        deleteAddress.postValue(Resource.Loading())\n        firebaseDatabase.findAddress(address).addOnCompleteListener { addressResponse ->\n            if (addressResponse.isSuccessful) {\n                val documentUid = addressResponse.result!!.documents[0].id\n                firebaseDatabase.deleteAddress(documentUid, address)?.addOnCompleteListener {\n                    if (it.isSuccessful)\n                        deleteAddress.postValue(Resource.Success(address))\n                    else\n                        deleteAddress.postValue(Resource.Error(it.exception.toString()))\n\n                }\n\n            } else\n                deleteAddress.postValue(Resource.Error(addressResponse.exception.toString()))\n\n        }\n    }\n\n    private val user: User? = null\n    fun getUser() {\n        if (user != null) {\n            profile.postValue(Resource.Success(user))\n            return\n        }\n\n        profile.postValue(Resource.Loading())\n        firebaseDatabase.getUser().addSnapshotListener { value, error ->\n            if (error != null)\n                profile.postValue(Resource.Error(error.message))\n            else\n                profile.postValue(Resource.Success(value?.toObject(User::class.java)))\n\n        }\n    }\n\n    fun uploadProfileImage(image: ByteArray) {\n        Log.d(\"ViewModel\", \"Image byte array size: ${image.size}\")\n        uploadProfileImage.postValue(Resource.Loading())\n        val name = UUID.nameUUIDFromBytes(image).toString()\n        Log.d(\"ViewModel\", \"Generated UUID: $name\")\n\n        firebaseDatabase.uploadUserProfileImage(image, name).addOnCompleteListener {\n            if (it.isSuccessful) {\n                Log.d(\"ViewModel\", \"Upload successful with name: $name\")\n                uploadProfileImage.postValue(Resource.Success(name))\n            } else {\n                Log.e(\"ViewModel\", \"Upload failed: ${it.exception}\")\n                uploadProfileImage.postValue(Resource.Error(it.exception.toString()))\n            }\n        }\n    }\n\n\n    fun updateInformation(firstName: String, lastName: String, email: String, imageName: String) {\n        updateUserInformation.postValue(Resource.Loading())\n\n        firebaseDatabase.getImageUrl(firstName, lastName, email, imageName) { user, exception ->\n\n            if (exception != null)\n                updateUserInformation.postValue(Resource.Error(exception))\n                    .also { Log.d(\"test1\", \"up\") }\n            else\n                user?.let {\n                    onUpdateInformation(user).also { Log.d(\"test1\", \"down\") }\n                }\n        }\n    }\n\n    private fun onUpdateInformation(user: User) {\n        firebaseDatabase.updateUserInformation(user).addOnCompleteListener {\n            if (it.isSuccessful)\n                updateUserInformation.postValue(Resource.Success(user))\n            else\n                updateUserInformation.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n    fun getUserOrders() {\n        userOrders.postValue(Resource.Loading())\n        firebaseDatabase.getUserOrders().addOnCompleteListener {\n            if (it.isSuccessful)\n                userOrders.postValue(Resource.Success(it.result?.toObjects(Order::class.java)))\n            else\n                userOrders.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun resetPassword(email: String) {\n        passwordReset.postValue(Resource.Loading())\n        firebaseDatabase.resetPassword(email).addOnCompleteListener {\n            if (it.isSuccessful)\n                passwordReset.postValue(Resource.Success(email))\n            else\n                passwordReset.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun getOrderAddressAndProducts(order: Order) {\n        orderAddress.postValue(Resource.Loading())\n        orderProducts.postValue(Resource.Loading())\n        firebaseDatabase.getOrderAddressAndProducts(order, { address, aError ->\n            if (aError != null)\n                orderAddress.postValue(Resource.Error(aError))\n            else\n                orderAddress.postValue(Resource.Success(address))\n        }, { products, pError ->\n\n            if (pError != null)\n                orderProducts.postValue(Resource.Error(pError))\n            else\n                orderProducts.postValue(Resource.Success(products))\n\n        })\n    }\n\n    fun searchProducts(searchQuery: String) {\n        search.postValue(Resource.Loading())\n        firebaseDatabase.searchProducts(searchQuery).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val productsList = it.result!!.toObjects(Product::class.java)\n                search.postValue(Resource.Success(productsList))\n\n            } else\n                search.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n    private var categoriesSafe: List<Category>? = null\n    fun getCategories() {\n        if(categoriesSafe != null){\n            categories.postValue(Resource.Success(categoriesSafe))\n            return\n        }\n        categories.postValue(Resource.Loading())\n        firebaseDatabase.getCategories().addOnCompleteListener {\n            if (it.isSuccessful) {\n                val categoriesList = it.result!!.toObjects(Category::class.java)\n                categoriesSafe = categoriesList\n                categories.postValue(Resource.Success(categoriesList))\n            } else\n                categories.postValue(Resource.Error(it.exception.toString()))\n        }\n\n\n    }\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt b/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt
---- a/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt	(date 1695407328325)
-@@ -102,14 +102,13 @@
-         getHomeProduct()
-     }
- 
--
-     // Fetch Materials from Firebase
-     fun getMaterials() {
-         _materialsLiveData.postValue(Resource.Loading())
- 
-         firebaseDatabase.getMaterials(10)
--            .addOnSuccessListener { documents ->
--                val materials = documents.toObjects(Material::class.java)
-+            .addOnSuccessListener { materials ->
-+                // materials is already a List<Material>
-                 _materialsLiveData.postValue(Resource.Success(materials))
-             }
-             .addOnFailureListener { exception ->
-@@ -119,6 +118,7 @@
- 
- 
- 
-+
-     private var furnitureProducts: List<Product>? = null
-     fun getFurniture(size: Int = 0) {
-         if (furnitureProducts != null && size == 0) {
-Index: app/src/main/res/layout/recycler_view_all_orders_item.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/parent_linear\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"8dp\">\n\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <ImageView\n            android:id=\"@+id/img_order_state\"\n            android:layout_width=\"@dimen/_10sdp\"\n            android:layout_height=\"@dimen/_10sdp\"\n            android:layout_gravity=\"center\"\n            android:src=\"@drawable/ic_circle\" />\n\n        <TextView\n            android:id=\"@+id/tv_order_id\"\n            style=\"@style/MediumTextViewThin\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginStart=\"5dp\"\n            android:layout_weight=\"1\"\n            tools:text=\"@tools:sample/lorem\" />\n\n        <ImageView\n            android:layout_width=\"@dimen/_15sdp\"\n            android:layout_height=\"@dimen/_15sdp\"\n            android:src=\"@drawable/ic_arrow\" />\n\n    </LinearLayout>\n\n    <TextView\n        android:id=\"@+id/tv_order_date\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        tools:text=\"@tools:sample/lorem\" />\n\n    <View\n        android:id=\"@+id/line\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"@dimen/_1sdp\"\n        android:layout_marginTop=\"15dp\"\n        android:background=\"@drawable/line\"\n        android:backgroundTint=\"@color/g_icon_tint\" />\n</LinearLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/recycler_view_all_orders_item.xml b/app/src/main/res/layout/recycler_view_all_orders_item.xml
---- a/app/src/main/res/layout/recycler_view_all_orders_item.xml	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/res/layout/recycler_view_all_orders_item.xml	(date 1695407655839)
-@@ -1,52 +1,62 @@
- <?xml version="1.0" encoding="utf-8"?>
--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
--    xmlns:tools="http://schemas.android.com/tools"
--    android:id="@+id/parent_linear"
--    android:layout_width="match_parent"
--    android:layout_height="wrap_content"
--    android:orientation="vertical"
--    android:padding="8dp">
-+<layout xmlns:android="http://schemas.android.com/apk/res/android"
-+    xmlns:tools="http://schemas.android.com/tools">
-+
-+    <data>
-+        <variable
-+            name="productModel"
-+            type="com.example.kleine.model.Material" />
-+    </data>
-+
-+    <LinearLayout
-+        android:id="@+id/parent_linear"
-+        android:layout_width="match_parent"
-+        android:layout_height="wrap_content"
-+        android:orientation="vertical"
-+        android:padding="8dp">
- 
--
--    <LinearLayout
--        android:layout_width="match_parent"
--        android:layout_height="wrap_content"
--        android:orientation="horizontal">
-+        <LinearLayout
-+            android:id="@+id/btnAllCourses"
-+            android:layout_width="match_parent"
-+            android:layout_height="wrap_content"
-+            android:orientation="horizontal"
-+            android:clickable="true"
-+            android:focusable="true">
- 
--        <ImageView
--            android:id="@+id/img_order_state"
--            android:layout_width="@dimen/_10sdp"
--            android:layout_height="@dimen/_10sdp"
--            android:layout_gravity="center"
--            android:src="@drawable/ic_circle" />
-+            <ImageView
-+                android:id="@+id/img_order_state"
-+                android:layout_width="@dimen/_10sdp"
-+                android:layout_height="@dimen/_10sdp"
-+                android:layout_gravity="center"
-+                android:src="@drawable/ic_circle" />
- 
--        <TextView
--            android:id="@+id/tv_order_id"
--            style="@style/MediumTextViewThin"
--            android:layout_width="wrap_content"
--            android:layout_height="wrap_content"
--            android:layout_marginStart="5dp"
--            android:layout_weight="1"
--            tools:text="@tools:sample/lorem" />
-+            <TextView
-+                android:id="@+id/tv_order_id"
-+                style="@style/MediumTextViewThin"
-+                android:layout_width="wrap_content"
-+                android:layout_height="wrap_content"
-+                android:layout_marginStart="5dp"
-+                android:layout_weight="1"
-+                android:text="@{productModel.name}" />
- 
--        <ImageView
--            android:layout_width="@dimen/_15sdp"
--            android:layout_height="@dimen/_15sdp"
--            android:src="@drawable/ic_arrow" />
--
--    </LinearLayout>
-+            <ImageView
-+                android:layout_width="@dimen/_15sdp"
-+                android:layout_height="@dimen/_15sdp"
-+                android:src="@drawable/ic_arrow" />
-+        </LinearLayout>
- 
--    <TextView
--        android:id="@+id/tv_order_date"
--        android:layout_width="wrap_content"
--        android:layout_height="wrap_content"
--        tools:text="@tools:sample/lorem" />
-+        <TextView
-+            android:id="@+id/tv_order_date"
-+            android:layout_width="wrap_content"
-+            android:layout_height="wrap_content"
-+            android:text="@{String.valueOf(productModel.desc)}" />
- 
--    <View
--        android:id="@+id/line"
--        android:layout_width="match_parent"
--        android:layout_height="@dimen/_1sdp"
--        android:layout_marginTop="15dp"
--        android:background="@drawable/line"
--        android:backgroundTint="@color/g_icon_tint" />
--</LinearLayout>
-\ No newline at end of file
-+        <View
-+            android:id="@+id/line"
-+            android:layout_width="match_parent"
-+            android:layout_height="@dimen/_1sdp"
-+            android:layout_marginTop="15dp"
-+            android:background="@drawable/line"
-+            android:backgroundTint="@color/g_icon_tint" />
-+    </LinearLayout>
-+</layout>
-Index: app/build.gradle
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>plugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n    id 'com.google.gms.google-services'\n    id 'kotlin-parcelize'\n    id 'androidx.navigation.safeargs.kotlin'\n    id 'dagger.hilt.android.plugin'\n}\n\n\nandroid {\n    compileSdk 31\n\n    defaultConfig {\n        applicationId \"com.example.kleine\"\n        minSdk 21\n        targetSdk 31\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = '1.8'\n    }\n\n    buildFeatures{\n        viewBinding true\n        dataBinding true\n    }\n}\n\ndependencies {\n\n    implementation 'androidx.room:room-common:2.5.2'\n    apply plugin :\"kotlin-kapt\"\n    implementation 'androidx.core:core-ktx:1.7.0'\n    implementation 'androidx.appcompat:appcompat:1.4.1'\n    implementation 'com.google.android.material:material:1.5.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'\n    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'\n\n    testImplementation 'junit:junit:4.+'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\n\n    //intuit\n    implementation 'com.intuit.sdp:sdp-android:1.0.6'\n    implementation 'com.intuit.ssp:ssp-android:1.0.6'\n\n\n    //loading button\n    implementation 'br.com.simplepass:loading-button-android:2.2.0'\n\n    //firebase\n    implementation 'com.google.firebase:firebase-firestore:24.0.1'\n    implementation 'com.google.firebase:firebase-firestore-ktx:24.0.1'\n    implementation 'com.google.firebase:firebase-auth-ktx:21.0.1'\n    implementation 'com.google.firebase:firebase-storage'\n    implementation 'com.google.firebase:firebase-storage-ktx:20.0.0'\n    implementation 'com.google.firebase:firebase-common-ktx:20.0.0'\n    implementation 'com.google.firebase:firebase-messaging-ktx:23.0.0'\n    implementation 'com.firebaseui:firebase-ui-auth:4.3.2'\n\n    //google play services\n    implementation 'com.google.android.gms:play-services-auth:20.1.0'\n\n    //smooth bar\n    implementation 'com.github.ibrahimsn98:SmoothBottomBar:1.7.9'\n\n    //Glide\n    implementation 'com.github.bumptech.glide:glide:4.13.0'\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.0'\n\n    //storage\n    implementation 'com.firebaseui:firebase-ui-storage:8.0.0'\n\n    //circular image\n    implementation 'de.hdodenhof:circleimageview:3.1.0'\n\n    //Navigation and safe args\n    def nav_version = \"2.4.1\"\n    implementation \"androidx.navigation:navigation-fragment-ktx:$nav_version\"\n    implementation \"androidx.navigation:navigation-ui-ktx:$nav_version\"\n\n    //viewpager2 indicatior\n    implementation 'io.github.vejei.viewpagerindicator:viewpagerindicator:1.0.0-alpha.1'\n\n    //lifecycle\n    implementation \"android.arch.lifecycle:extensions:1.1.0\"\n\n    //Firebase coroutines\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1'\n\n    //stepView\n    implementation 'com.shuhart.stepview:stepview:1.5.1'\n\n    //Android Ktx\n    implementation \"androidx.fragment:fragment-ktx:1.4.1\"\n\n    //pdf viewer\n    implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'\n\n\n    //Dagger hilt\n    implementation \"com.google.dagger:hilt-android:2.38.1\"\n    kapt \"com.google.dagger:hilt-compiler:2.38.1\"\n\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/build.gradle b/app/build.gradle
---- a/app/build.gradle	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/build.gradle	(date 1695378043551)
-@@ -95,6 +95,9 @@
-     def nav_version = "2.4.1"
-     implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
-     implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
-+    apply plugin: "androidx.navigation.safeargs.kotlin"
-+
-+
- 
-     //viewpager2 indicatior
-     implementation 'io.github.vejei.viewpagerindicator:viewpagerindicator:1.0.0-alpha.1'
-@@ -119,5 +122,12 @@
-     implementation "com.google.dagger:hilt-android:2.38.1"
-     kapt "com.google.dagger:hilt-compiler:2.38.1"
- 
-+    
- 
-+
-+
-+
-+
-+
-+
- }
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport android.widget.Toast\nimport androidx.appcompat.app.AlertDialog\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProviders\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.SpacingDecorator.VerticalSpacingItemDecorator\nimport com.example.kleine.adapters.recyclerview.CartRecyclerAdapter\nimport com.example.kleine.databinding.FragmentCartBinding\nimport com.example.kleine.model.CartProductsList\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.SELECT_ADDRESS_FLAG\nimport com.example.kleine.viewmodel.shopping.cart.CartViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\n\nprivate const val TAG = \"CartFragment\"\nclass CartFragment : Fragment() {\n    private lateinit var binding: FragmentCartBinding\n    private lateinit var viewModel: CartViewModel\n    private lateinit var cartAdapter: CartRecyclerAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = ViewModelProviders.of(this)[CartViewModel::class.java]\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentCartBinding.inflate(inflater)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        onHomeClick()\n\n        setupRecyclerView()\n        observeCart()\n\n        onCloseImgClick()\n\n        onPlusClick()\n        onMinusClick()\n        onItemClick()\n\n        observeProductClickNavigation()\n\n        onCheckoutClick()\n\n    }\n\n    private fun onCheckoutClick() {\n        binding.btnCheckout.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"price\", binding.tvTotalprice.text.toString())\n            bundle.putString(\"clickFlag\", SELECT_ADDRESS_FLAG)\n            bundle.putParcelable(\"products\", cartProducts)\n            findNavController().navigate(R.id.action_cartFragment_to_billingFragment, bundle)\n        }\n    }\n\n    private fun observeProductClickNavigation() {\n        viewModel.product.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        val product = response.data\n                        val bundle = Bundle()\n                        bundle.putParcelable(\"material\", product)\n                        findNavController().navigate(\n                            R.id.action_homeFragment_to_materialDetailsFragment,\n                            bundle\n                        )\n                        viewModel.product.postValue(null)\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun observePlus() {\n        viewModel.plus.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun observeMinus() {\n        viewModel.minus.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n\n    private fun onItemClick() {\n        cartAdapter.onItemClick = { cartProduct ->\n            viewModel.getProductFromCartProduct(cartProduct)\n        }\n    }\n\n\n    private fun onMinusClick() {\n        cartAdapter.onMinusesClick = { cartProduct ->\n            if (cartProduct.quantity > 1) {\n                viewModel.decreaseQuantity(cartProduct)\n                observeMinus()\n            } else {\n                val alertDialog = AlertDialog.Builder(requireContext()).create()\n                alertDialog.setTitle(\"\")\n                val view =\n                    LayoutInflater.from(context).inflate(R.layout.delete_alert_dialog, null, false)\n                alertDialog.setView(view)\n\n                view.findViewById<Button>(R.id.btn_no).setOnClickListener {\n                    alertDialog.dismiss()\n                }\n\n                view.findViewById<Button>(R.id.btn_yes).setOnClickListener {\n                    viewModel.deleteProductFromCart(cartProduct)\n                    alertDialog.dismiss()\n                }\n\n                alertDialog.show()\n            }\n        }\n    }\n\n    private fun onPlusClick() {\n        cartAdapter.onPlusClick = { cartProduct ->\n            viewModel.increaseQuantity(cartProduct)\n            observePlus()\n        }\n    }\n\n    private fun onCloseImgClick() {\n        binding.imgCloseCart.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun setupRecyclerView() {\n        cartAdapter = CartRecyclerAdapter()\n        binding.apply {\n            rvCart.layoutManager = LinearLayoutManager(context)\n            rvCart.adapter = cartAdapter\n            rvCart.addItemDecoration(VerticalSpacingItemDecorator(50))\n        }\n    }\n\n    private var cartProducts: CartProductsList? = null\n    private fun observeCart() {\n        viewModel.cartProducts.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n\n                    //Handle empty cart case\n                    val products = response.data\n                    if (products!!.isNotEmpty()) { // cart is not empty\n                        cartProducts = CartProductsList(products)\n                        cartAdapter.differ.submitList(products)\n                        var totalPrice:Double = 0.0\n                        products.forEach {\n                            if (it.newPrice != null && it.newPrice.isNotEmpty() && it.newPrice != \"0\") {\n                                totalPrice += it.newPrice.toDouble() * it.quantity\n                            } else\n                                totalPrice += it.price.toDouble() * it.quantity\n\n\n                        }\n\n                        binding.tvTotalprice.text = \"$ $totalPrice\"\n\n                    } else { // cart is empty\n                        cartAdapter.differ.submitList(products)\n                        binding.apply {\n                            btnCheckout.visibility = View.INVISIBLE\n                            linear.visibility = View.INVISIBLE\n                            imgEmptyBox.visibility = View.VISIBLE\n                            imgEmptyBoxTexture.visibility = View.VISIBLE\n                            tvEmptyCart.visibility = View.VISIBLE\n                        }\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Log.e(TAG, response.message.toString())\n                    Toast.makeText(activity, \"Oops error occurred\", Toast.LENGTH_SHORT).show()\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun hideLoading() {\n        binding.apply {\n            progressBar.visibility = View.GONE\n            linear.visibility = View.VISIBLE\n            btnCheckout.visibility = View.VISIBLE\n            imgEmptyBox.visibility = View.GONE\n            imgEmptyBoxTexture.visibility = View.GONE\n            tvEmptyCart.visibility = View.GONE\n        }\n    }\n\n    private fun showLoading() {\n        binding.apply {\n            progressBar.visibility = View.VISIBLE\n            linear.visibility = View.INVISIBLE\n            btnCheckout.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun onHomeClick() {\n        val btm = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        btm?.menu?.getItem(0)?.setOnMenuItemClickListener {\n            activity?.onBackPressed()\n            true\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n\n        val bottomNavigation = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNavigation?.visibility = View.VISIBLE\n    }\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt	(date 1695402597784)
-@@ -61,6 +61,8 @@
- 
-         onCheckoutClick()
- 
-+
-+
-     }
- 
-     private fun onCheckoutClick() {
-@@ -73,6 +75,9 @@
-         }
-     }
- 
-+
-+
-+
-     private fun observeProductClickNavigation() {
-         viewModel.product.observe(viewLifecycleOwner, Observer { response ->
- 
-@@ -280,6 +285,9 @@
-         })
-     }
- 
-+
-+
-+
-     private fun hideLoading() {
-         binding.apply {
-             progressBar.visibility = View.GONE
-Index: app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.adapters.viewpager\n\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.databinding.ViewpagerImageItemBinding\n\nclass ViewPager2Images : RecyclerView.Adapter<ViewPager2Images.ViewPager2ImagesViewHolder>() {\n    inner class ViewPager2ImagesViewHolder(val binding: ViewpagerImageItemBinding) : RecyclerView.ViewHolder(binding.root)\n\n    private val diffCallback = object : DiffUtil.ItemCallback<String>() {\n        override fun areItemsTheSame(oldItem: String, newItem: String): Boolean {\n            return oldItem == newItem\n        }\n\n        override fun areContentsTheSame(oldItem: String, newItem: String): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallback)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewPager2ImagesViewHolder {\n        return ViewPager2ImagesViewHolder(\n            ViewpagerImageItemBinding.inflate(\n                LayoutInflater.from(parent.context),parent,false\n            )\n        )\n    }\n\n    override fun onBindViewHolder(holder: ViewPager2ImagesViewHolder, position: Int) {\n        val imageUrl = differ.currentList[position]\n        Log.d(\"ViewPager2Images\", \"Loading image at position $position: $imageUrl\")\n        Glide.with(holder.itemView).load(imageUrl).into(holder.binding.imgsProduct)\n    }\n\n\n    override fun getItemCount(): Int {\n        return differ.currentList.size\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt b/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt
---- a/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt	(date 1695377872675)
-@@ -7,11 +7,13 @@
- import androidx.recyclerview.widget.DiffUtil
- import androidx.recyclerview.widget.RecyclerView
- import com.bumptech.glide.Glide
-+import com.example.kleine.R
- import com.example.kleine.databinding.ViewpagerImageItemBinding
- 
- class ViewPager2Images : RecyclerView.Adapter<ViewPager2Images.ViewPager2ImagesViewHolder>() {
-     inner class ViewPager2ImagesViewHolder(val binding: ViewpagerImageItemBinding) : RecyclerView.ViewHolder(binding.root)
- 
-+
-     private val diffCallback = object : DiffUtil.ItemCallback<String>() {
-         override fun areItemsTheSame(oldItem: String, newItem: String): Boolean {
-             return oldItem == newItem
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" project-jdk-name=\"jbr-17\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision 525036aef6fd4c8733bd9cd9498fa01894402c6e)
-+++ b/.idea/misc.xml	(date 1695450496970)
-@@ -1,6 +1,6 @@
- <project version="4">
-   <component name="ExternalStorageConfigurationManager" enabled="true" />
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/build/classes" />
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_9_23_23__10_41_PM__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23__10_41_PM__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23__10_41_PM__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23__10_41_PM__Changes_.xml	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ /dev/null	(revision d1757b64c3798be216457dcc702dac99c820626f)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_9_23_23,_10_41_PM_[Changes]" date="1695480064253" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_10_41_PM_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 9/23/23, 10:41 PM [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_10_38_PM_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_10_38_PM_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_10_38_PM_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_10_38_PM_[Changes]/shelved.patch	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ /dev/null	(revision d1757b64c3798be216457dcc702dac99c820626f)
@@ -1,1409 +0,0 @@
-Index: app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt
-deleted file mode 100644
---- a/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ /dev/null	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-@@ -1,212 +0,0 @@
--package com.example.kleine.fragments.shopping
--
--import android.annotation.SuppressLint
--import android.graphics.Paint
--import android.os.Bundle
--import android.util.Log
--import androidx.fragment.app.Fragment
--import android.view.LayoutInflater
--import android.view.View
--import android.view.ViewGroup
--import android.widget.Toast
--import androidx.lifecycle.Observer
--import androidx.navigation.fragment.navArgs
--import androidx.recyclerview.widget.LinearLayoutManager
--import com.example.kleine.R
--import com.example.kleine.SpacingDecorator.HorizantalSpacingItemDecorator
--import com.example.kleine.activities.ShoppingActivity
--import com.example.kleine.adapters.recyclerview.ColorsAndSizesAdapter
--import com.example.kleine.adapters.viewpager.ViewPager2Images
--import com.example.kleine.databinding.FragmentProductPreviewBinding
--import com.example.kleine.model.CartProduct
--import com.example.kleine.model.Product
--import com.example.kleine.resource.Resource
--import com.example.kleine.util.Constants.Companion.COLORS
--import com.example.kleine.util.Constants.Companion.COLORS_TYPE
--import com.example.kleine.util.Constants.Companion.IMAGES
--import com.example.kleine.util.Constants.Companion.PRODUCT_FLAG
--import com.example.kleine.util.Constants.Companion.SIZES
--import com.example.kleine.util.Constants.Companion.SIZES_TYPE
--import com.example.kleine.viewmodel.shopping.ShoppingViewModel
--import com.google.android.material.bottomnavigation.BottomNavigationView
--import io.github.vejei.viewpagerindicator.indicator.CircleIndicator
--
--class ProductPreviewFragment : Fragment() {
--
--    val args by navArgs<MaterialPreviewFragmentArgs>()
--    val TAG = "ProductPreviewFragment"
--
--    private lateinit var binding: FragmentProductPreviewBinding
--    private lateinit var colorsAdapter: ColorsAndSizesAdapter
--    private lateinit var sizesAdapter: ColorsAndSizesAdapter
--    private lateinit var viewPagerAdapter: ViewPager2Images
--    private lateinit var viewModel: ShoppingViewModel
--
--    override fun onCreate(savedInstanceState: Bundle?) {
--        super.onCreate(savedInstanceState)
--        colorsAdapter = ColorsAndSizesAdapter(COLORS_TYPE)
--        sizesAdapter = ColorsAndSizesAdapter(SIZES_TYPE)
--        viewPagerAdapter = ViewPager2Images()
--        viewModel = (activity as ShoppingActivity).viewModel
--    }
--
--    override fun onCreateView(
--        inflater: LayoutInflater, container: ViewGroup?,
--        savedInstanceState: Bundle?
--    ): View? {
--
--        binding = FragmentProductPreviewBinding.inflate(inflater)
--        return binding.root
--    }
--
--    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
--        super.onViewCreated(view, savedInstanceState)
--
--        val bottomNavigation =
--            requireActivity().findViewById<BottomNavigationView>(R.id.bottom_navigation)
--        bottomNavigation.visibility = View.GONE
--
--        val product = args.material
--
--        setupViewpager()
--
--
--
--//        setProductInformation(product)
--
--        onImageCloseClick()
--        onBtnAddToCartClick()
--
--        observeAddToCart()
--
--        onColorClick()
--        onSizeClick()
--    }
--
--    private var selectedSize: String = ""
--    private fun onSizeClick() {
--        sizesAdapter.onItemClick = { size ->
--            selectedSize = size
--            binding.tvSizeError.visibility = View.INVISIBLE
--
--        }
--    }
--
--    private var selectedColor: String = ""
--    private fun onColorClick() {
--        colorsAdapter.onItemClick = { color ->
--            selectedColor = color
--            binding.tvColorError.visibility = View.INVISIBLE
--        }
--    }
--
--
--    private fun observeAddToCart() {
--        viewModel.addToCart.observe(viewLifecycleOwner, Observer { response ->
--            val btn = binding.btnAddToCart
--            when (response) {
--                is Resource.Loading -> {
--                    startLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    stopLoading()
--                    viewModel.addToCart.value = null
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    Toast.makeText(activity, "Oops! error occurred", Toast.LENGTH_SHORT).show()
--                    viewModel.addToCart.value = null
--                    Log.e(TAG, response.message.toString())
--                }
--            }
--        })
--    }
--
--    private fun stopLoading() {
--        binding.apply {
--            btnAddToCart.visibility = View.VISIBLE
--            progressbar.visibility = View.INVISIBLE
--        }
--    }
--
--    private fun startLoading() {
--        binding.apply {
--            btnAddToCart.visibility = View.INVISIBLE
--            progressbar.visibility = View.VISIBLE
--        }
--    }
--
--
--    private fun onBtnAddToCartClick() {
--        binding.btnAddToCart.apply {
--            setOnClickListener {
--                if (selectedColor.isEmpty()) {
--                    binding.tvColorError.visibility = View.VISIBLE
--                    return@setOnClickListener
--                }
--                if (selectedSize.isEmpty()) {
--                    binding.tvSizeError.visibility = View.VISIBLE
--                    return@setOnClickListener
--                }
--
--
--                setBackgroundResource(R.color.g_black)
--            }
--        }
--    }
--
--
--    private fun onImageCloseClick() {
--        binding.imgClose.setOnClickListener {
--            activity?.onBackPressed()
--        }
--    }
--
--//    @SuppressLint("SetTextI18n")
--//    private fun setProductInformation(product: Product) {
--//        val imagesList = product.images!![IMAGES] as List<String>
--//        val colors = product.colors!![COLORS] as List<String>
--//        val sizes = product.sizes!![SIZES] as List<String>
--//        binding.apply {
--//            viewPagerAdapter.differ.submitList(imagesList)
--//            if (colors.isNotEmpty() && colors[0] != "")
--//                colorsAdapter.differ.submitList(colors.toList())
--//            if (sizes.isNotEmpty() && sizes[0] != "")
--//                sizesAdapter.differ.submitList(sizes)
--//            tvProductName.text = product.title
--//            tvProductDescription.text = product.description
--//            tvProductPrice.text = "$${product.price}"
--//            tvProductOfferPrice.visibility = View.GONE
--//            product.newPrice?.let {
--//                if (product.newPrice.isNotEmpty() && product.newPrice != "0") {
--//                    tvProductPrice.paintFlags =
--//                        tvProductPrice.paintFlags or Paint.STRIKE_THRU_TEXT_FLAG
--//                    tvProductOfferPrice.text = "$${product.newPrice}"
--//                    tvProductOfferPrice.visibility = View.VISIBLE
--//                }
--//            }
--//            product.sizeUnit?.let {
--//                if (it.isNotEmpty()) {
--//                    binding.tvSizeUnit.visibility = View.VISIBLE
--//                    binding.tvSizeUnit.text = " ($it)"
--//                }
--//            }
--//        }
--//    }
--
--
--
--
--
--    private fun setupViewpager() {
--        binding.viewpager2Images.adapter = viewPagerAdapter
--        binding.circleIndicator.setWithViewPager2(binding.viewpager2Images)
--        binding.circleIndicator.itemCount = 1 // Only one image
--        binding.circleIndicator.setAnimationMode(CircleIndicator.AnimationMode.SLIDE)
--    }
--
--
--}
-\ No newline at end of file
-Index: app/src/main/res/layout/fragment_product_preview.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n    <data>\n        <variable\n            name=\"productModel\"\n            type=\"com.example.kleine.model.Material\" />\n    </data>\n\n\n<androidx.core.widget.NestedScrollView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".fragments.shopping.MaterialPreviewFragment\"\n    android:fillViewport=\"true\">\n\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <androidx.cardview.widget.CardView\n            android:id=\"@+id/viewpager_card\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_350sdp\"\n            android:layout_marginTop=\"20dp\"\n            app:cardCornerRadius=\"15dp\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:orientation=\"vertical\"\n            android:backgroundTint=\"@color/white\"\n            android:overScrollMode=\"never\"\n            app:cardElevation=\"0dp\"\n            >\n\n\n            <androidx.viewpager2.widget.ViewPager2\n                android:id=\"@+id/viewpager2Images\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"0dp\"\n                android:layout_weight=\"1\"/>\n\n\n\n\n            <ImageView\n                android:id=\"@+id/img_close\"\n                android:layout_width=\"@dimen/_20sdp\"\n                android:layout_height=\"@dimen/_20sdp\"\n                android:layout_marginStart=\"10dp\"\n                android:layout_marginTop=\"10dp\"\n                android:src=\"@drawable/ic_close\"\n                app:tint=\"@color/black\"\n                android:scaleType=\"centerInside\"\n                />\n\n\n\n\n        </androidx.cardview.widget.CardView>\n\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline1\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.04\" />\n\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline2\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.96\" />\n\n\n\n\n\n\n\n\n        <LinearLayout\n            android:id=\"@+id/linear_product_name\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@+id/circle_indicator\"\n            android:orientation=\"horizontal\"\n            android:layout_marginTop=\"35dp\">\n\n\n            <TextView\n                android:id=\"@+id/tv_product_name\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:fontFamily=\"@font/poppins_light\"\n                android:text=\"@{productModel.name}\"\n                android:textColor=\"@color/black\"\n                android:textSize=\"@dimen/_20ssp\"\n                android:textStyle=\"bold\"\n                app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n                app:layout_constraintTop_toBottomOf=\"@id/guideline3\" />\n\n\n            <!--        <TextView-->\n            <!--            android:id=\"@+id/tv_product_offer_price\"-->\n            <!--            android:layout_width=\"wrap_content\"-->\n            <!--            android:layout_height=\"wrap_content\"-->\n            <!--            android:fontFamily=\"@font/poppins_light\"-->\n            <!--            android:text=\"$300\"-->\n            <!--            android:textColor=\"@color/g_hint\"-->\n            <!--            android:textSize=\"@dimen/_20ssp\"-->\n            <!--            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"-->\n            <!--            app:layout_constraintBottom_toBottomOf=\"@id/tv_product_name\"-->\n            <!--            app:layout_constraintTop_toTopOf=\"@+id/tv_product_name\"-->\n            <!--            android:layout_marginEnd=\"5dp\"/>-->\n\n\n            <!--        <TextView-->\n            <!--            android:id=\"@+id/tv_product_price\"-->\n            <!--            android:layout_width=\"wrap_content\"-->\n            <!--            android:layout_height=\"wrap_content\"-->\n            <!--            android:fontFamily=\"@font/poppins_light\"-->\n            <!--            android:text=\"$300\"-->\n            <!--            android:textColor=\"@color/g_hint\"-->\n            <!--            android:textSize=\"@dimen/_20ssp\"-->\n            <!--            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"-->\n            <!--            app:layout_constraintBottom_toBottomOf=\"@id/tv_product_name\"-->\n            <!--            app:layout_constraintTop_toTopOf=\"@+id/tv_product_name\"/>-->\n\n\n        </LinearLayout>\n\n\n        <LinearLayout\n            android:id=\"@+id/linear_product_description\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_product_name\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\">\n\n\n            <TextView\n                android:id=\"@+id/tv_product_description\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:fontFamily=\"@font/poppins_light\"\n                android:text=\"@{String.valueOf(productModel.desc)}\"\n                android:textColor=\"@color/g_hint\"\n                android:textSize=\"@dimen/_10ssp\"\n                android:textStyle=\"bold\" />\n        </LinearLayout>\n\n\n        <View\n            android:id=\"@+id/line\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_1sdp\"\n            android:layout_marginTop=\"10dp\"\n            android:background=\"@drawable/line\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_product_description\" />\n\n\n        <LinearLayout\n            android:id=\"@+id/linear\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/line\"\n            android:layout_marginTop=\"20dp\">\n\n\n            <LinearLayout\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:orientation=\"vertical\">\n\n\n                <LinearLayout\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\">\n\n\n                    <TextView\n                        android:id=\"@+id/tv_color\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:fontFamily=\"@font/poppins_light\"\n                        android:text=\"@string/string_status\"\n                        android:textColor=\"@color/black\"\n                        android:textSize=\"@dimen/_15ssp\" />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_color_error\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:text=\"@string/g_please_select_color\"\n                        android:textColor=\"@color/g_red\"\n                        android:visibility=\"invisible\"\n                        android:layout_marginTop=\"14dp\"\n                        android:layout_marginStart=\"10dp\"\n                        android:textSize=\"@dimen/_9ssp\"\n                        />\n\n\n                </LinearLayout>\n\n\n\n\n\n            </LinearLayout>\n\n\n            <LinearLayout\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:orientation=\"vertical\">\n                <LinearLayout\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\">\n                    <TextView\n                        android:id=\"@+id/tv_size\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:fontFamily=\"@font/poppins_light\"\n                        android:text=\"@string/string_rating\"\n                        android:textColor=\"@color/black\"\n                        android:textSize=\"@dimen/_15ssp\" />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_size_unit\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:textSize=\"@dimen/_10ssp\"\n                        android:visibility=\"invisible\"\n                        />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_size_error\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:text=\"@string/g_please_select_size\"\n                        android:textSize=\"@dimen/_9ssp\"\n                        android:textColor=\"@color/g_red\"\n                        android:visibility=\"invisible\"\n                        android:layout_marginTop=\"14dp\"\n                        android:layout_marginStart=\"10dp\"/>\n\n\n                </LinearLayout>\n\n\n\n            </LinearLayout>\n        </LinearLayout>\n\n\n        <ProgressBar\n            android:id=\"@+id/progressbar\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:indeterminateTint=\"@color/g_icon_tint\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear\"\n            android:layout_marginTop=\"45dp\"\n            android:visibility=\"invisible\"\n            />\n\n\n        <androidx.appcompat.widget.AppCompatButton\n            android:id=\"@+id/btn_add_to_cart\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_40sdp\"\n            android:layout_marginBottom=\"20dp\"\n            android:background=\"@drawable/btn_background\"\n            android:fontFamily=\"@font/poppins_thin\"\n            android:text=\"@string/g_add_to_card\"\n            android:textAllCaps=\"false\"\n            android:textColor=\"@color/white\"\n            android:textSize=\"@dimen/_12sdp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintHorizontal_bias=\"1.0\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear\"\n            app:layout_constraintVertical_bias=\"0.494\"\n            android:layout_marginTop=\"45dp\"\n            android:visibility=\"visible\"\n            />\n\n\n        <io.github.vejei.viewpagerindicator.indicator.CircleIndicator\n            android:id=\"@+id/circle_indicator\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintTop_toBottomOf=\"@id/viewpager_card\"\n            app:layout_constraintStart_toStartOf=\"@id/viewpager_card\"\n            app:layout_constraintEnd_toEndOf=\"@+id/viewpager_card\"\n            android:layout_marginTop=\"10dp\"\n            app:indicatorGap=\"5dp\"\n            app:indicatorRadius=\"5dp\"\n            app:indicatorItemCount=\"4\"\n            app:indicatorSelectedColor=\"@color/g_black\"/>\n\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n</androidx.core.widget.NestedScrollView>\n</layout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_product_preview.xml b/app/src/main/res/layout/fragment_product_preview.xml
---- a/app/src/main/res/layout/fragment_product_preview.xml	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/res/layout/fragment_product_preview.xml	(date 1695475418275)
-@@ -12,7 +12,7 @@
- <androidx.core.widget.NestedScrollView
-     android:layout_width="match_parent"
-     android:layout_height="match_parent"
--    tools:context=".fragments.shopping.MaterialPreviewFragment"
-+    tools:context="fragments.shopping.MaterialPreviewFragment"
-     android:fillViewport="true">
- 
- 
-@@ -82,18 +82,18 @@
- 
- 
- 
--
-         <LinearLayout
-             android:id="@+id/linear_product_name"
-             android:layout_width="0dp"
-             android:layout_height="wrap_content"
-             app:layout_constraintStart_toStartOf="@id/guideline1"
-             app:layout_constraintEnd_toEndOf="@id/guideline2"
--            app:layout_constraintTop_toBottomOf="@+id/circle_indicator"
-+            app:layout_constraintTop_toBottomOf="@+id/viewpager_card"
-             android:orientation="horizontal"
-             android:layout_marginTop="35dp">
- 
- 
-+
-             <TextView
-                 android:id="@+id/tv_product_name"
-                 android:layout_width="wrap_content"
-@@ -201,22 +201,13 @@
-                         android:layout_height="wrap_content"
-                         android:layout_marginTop="15dp"
-                         android:fontFamily="@font/poppins_light"
--                        android:text="@string/string_status"
-+                        android:text="@{productModel.status}"
-                         android:textColor="@color/black"
-                         android:textSize="@dimen/_15ssp" />
- 
- 
--                    <TextView
--                        android:id="@+id/tv_color_error"
--                        android:layout_width="wrap_content"
--                        android:layout_height="wrap_content"
--                        android:text="@string/g_please_select_color"
--                        android:textColor="@color/g_red"
--                        android:visibility="invisible"
--                        android:layout_marginTop="14dp"
--                        android:layout_marginStart="10dp"
--                        android:textSize="@dimen/_9ssp"
--                        />
-+
-+
- 
- 
-                 </LinearLayout>
-@@ -243,7 +234,7 @@
-                         android:layout_height="wrap_content"
-                         android:layout_marginTop="15dp"
-                         android:fontFamily="@font/poppins_light"
--                        android:text="@string/string_rating"
-+                        android:text="@{productModel.requirement}"
-                         android:textColor="@color/black"
-                         android:textSize="@dimen/_15ssp" />
- 
-@@ -257,17 +248,6 @@
-                         android:visibility="invisible"
-                         />
- 
--
--                    <TextView
--                        android:id="@+id/tv_size_error"
--                        android:layout_width="wrap_content"
--                        android:layout_height="wrap_content"
--                        android:text="@string/g_please_select_size"
--                        android:textSize="@dimen/_9ssp"
--                        android:textColor="@color/g_red"
--                        android:visibility="invisible"
--                        android:layout_marginTop="14dp"
--                        android:layout_marginStart="10dp"/>
- 
- 
-                 </LinearLayout>
-@@ -293,7 +273,7 @@
- 
- 
-         <androidx.appcompat.widget.AppCompatButton
--            android:id="@+id/btn_add_to_cart"
-+            android:id="@+id/btnEnroll"
-             android:layout_width="0dp"
-             android:layout_height="@dimen/_40sdp"
-             android:layout_marginBottom="20dp"
-@@ -314,20 +294,11 @@
-             />
- 
- 
--        <io.github.vejei.viewpagerindicator.indicator.CircleIndicator
--            android:id="@+id/circle_indicator"
--            android:layout_width="wrap_content"
--            android:layout_height="wrap_content"
--            app:layout_constraintTop_toBottomOf="@id/viewpager_card"
--            app:layout_constraintStart_toStartOf="@id/viewpager_card"
--            app:layout_constraintEnd_toEndOf="@+id/viewpager_card"
--            android:layout_marginTop="10dp"
--            app:indicatorGap="5dp"
--            app:indicatorRadius="5dp"
--            app:indicatorItemCount="4"
--            app:indicatorSelectedColor="@color/g_black"/>
-+
-+
- 
- 
-     </androidx.constraintlayout.widget.ConstraintLayout>
-+
- </androidx.core.widget.NestedScrollView>
- </layout>
-\ No newline at end of file
-Index: app/src/main/res/drawable/tab_selector.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/drawable/tab_selector.xml b/app/src/main/res/drawable/tab_selector.xml
-new file mode 100644
---- /dev/null	(date 1695475418553)
-+++ b/app/src/main/res/drawable/tab_selector.xml	(date 1695475418553)
-@@ -0,0 +1,5 @@
-+<?xml version="1.0" encoding="utf-8"?>
-+<selector xmlns:android="http://schemas.android.com/apk/res/android">
-+    <item android:drawable="@drawable/tab_icon_selected" android:state_selected="true"/>
-+    <item android:drawable="@drawable/tab_icon_default"/>
-+</selector>
-Index: app/src/main/java/com/example/kleine/model/Enrollment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/model/Enrollment.kt b/app/src/main/java/com/example/kleine/model/Enrollment.kt
-new file mode 100644
---- /dev/null	(date 1695475418511)
-+++ b/app/src/main/java/com/example/kleine/model/Enrollment.kt	(date 1695475418511)
-@@ -0,0 +1,10 @@
-+package com.example.kleine.model
-+
-+import android.os.Parcelable
-+import kotlinx.android.parcel.Parcelize
-+
-+@Parcelize
-+data class Enrollment(
-+    val userId: String = "", // ID of the user who has enrolled
-+    val materialId: String = "" // ID of the material/course in which the user has enrolled
-+): Parcelable
-Index: app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.adapters.recyclerview\n\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.navigation.NavDirections\nimport androidx.navigation.findNavController\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.R\nimport com.example.kleine.databinding.ProductLayoutRowBinding\nimport com.example.kleine.model.Material\nimport com.google.firebase.storage.FirebaseStorage\n\nclass MaterialAdapter : RecyclerView.Adapter<MaterialAdapter.MaterialViewHolder>() {\n\n    var onItemClick: ((Material) -> Unit)? = null\n\n    inner class MaterialViewHolder(val binding: ProductLayoutRowBinding) : RecyclerView.ViewHolder(binding.root) {\n        init {\n            itemView.setOnClickListener {\n                val material = differ.currentList[adapterPosition]\n                val actionId = R.id.action_homeFragment_to_materialDetailsFragment\n                it.findNavController().navigate(actionId)\n            }\n        }\n    }\n\n    private val diffCallback = object : DiffUtil.ItemCallback<Material>() {\n        override fun areItemsTheSame(oldItem: Material, newItem: Material): Boolean {\n            return oldItem == newItem\n        }\n\n        override fun areContentsTheSame(oldItem: Material, newItem: Material): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallback)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MaterialViewHolder {\n        Log.d(\"MaterialAdapter\", \"onCreateViewHolder called\")\n        return MaterialViewHolder(\n            ProductLayoutRowBinding.inflate(\n                LayoutInflater.from(parent.context),\n                parent,\n                false\n            )\n        )\n    }\n\n\n    override fun onBindViewHolder(holder: MaterialViewHolder, position: Int) {\n        Log.d(\"MaterialAdapter\", \"onBindViewHolder called for position $position\")\n\n        val material = differ.currentList[position]\n        holder.binding.apply {\n            productModel = material\n\n            val storage = FirebaseStorage.getInstance()\n            val storageRef = storage.reference\n\n            if (material.imageUrl.isNotEmpty()) {\n                val pathToImage = \"materialImages/${material.imageUrl}\"\n                Log.d(\"MaterialAdapter\", \"Dynamic Path to image: $pathToImage\")\n                Log.d(\"MaterialAdapter\", \"Material image URL: ${material.imageUrl}\")\n\n                val pathReference = storageRef.child(pathToImage)\n\n                pathReference.downloadUrl.addOnSuccessListener { uri ->\n                    Log.d(\"MaterialAdapter\", \"Successfully fetched URI: $uri\")\n                    Glide.with(holder.itemView).load(uri).into(imageView)\n                }.addOnFailureListener { exception ->\n                    Log.e(\"MaterialAdapter\", \"Failed to load image\", exception)\n                    imageView.setImageResource(R.drawable.default_book_logo)\n                }\n            } else {\n                imageView.setImageResource(R.drawable.default_book_logo)\n            }\n        }\n    }\n\n\n\n\n    override fun getItemCount(): Int {\n        val count = differ.currentList.size\n        Log.d(\"MaterialAdapter\", \"Item count: $count\")\n        return count\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt b/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt
---- a/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt	(date 1695475418303)
-@@ -2,6 +2,7 @@
- 
- import android.util.Log
- import android.view.LayoutInflater
-+import android.view.View
- import android.view.ViewGroup
- import androidx.navigation.NavDirections
- import androidx.navigation.findNavController
-@@ -11,6 +12,7 @@
- import com.bumptech.glide.Glide
- import com.example.kleine.R
- import com.example.kleine.databinding.ProductLayoutRowBinding
-+import com.example.kleine.fragments.shopping.HomeFragmentDirections
- import com.example.kleine.model.Material
- import com.google.firebase.storage.FirebaseStorage
- 
-@@ -19,13 +21,7 @@
-     var onItemClick: ((Material) -> Unit)? = null
- 
-     inner class MaterialViewHolder(val binding: ProductLayoutRowBinding) : RecyclerView.ViewHolder(binding.root) {
--        init {
--            itemView.setOnClickListener {
--                val material = differ.currentList[adapterPosition]
--                val actionId = R.id.action_homeFragment_to_materialDetailsFragment
--                it.findNavController().navigate(actionId)
--            }
--        }
-+
-     }
- 
-     private val diffCallback = object : DiffUtil.ItemCallback<Material>() {
-@@ -51,6 +47,16 @@
-         )
-     }
- 
-+    // Define a helper function for debounced clicks
-+    fun View.setDebouncedOnClickListener(debounceTime: Long = 500L, onClick: (view: View) -> Unit) {
-+        var lastClickTime = 0L
-+        this.setOnClickListener {
-+            if (System.currentTimeMillis() - lastClickTime >= debounceTime) {
-+                onClick(it)
-+                lastClickTime = System.currentTimeMillis()
-+            }
-+        }
-+    }
- 
-     override fun onBindViewHolder(holder: MaterialViewHolder, position: Int) {
-         Log.d("MaterialAdapter", "onBindViewHolder called for position $position")
-@@ -67,6 +73,7 @@
-                 Log.d("MaterialAdapter", "Dynamic Path to image: $pathToImage")
-                 Log.d("MaterialAdapter", "Material image URL: ${material.imageUrl}")
- 
-+
-                 val pathReference = storageRef.child(pathToImage)
- 
-                 pathReference.downloadUrl.addOnSuccessListener { uri ->
-@@ -77,9 +84,18 @@
-                     imageView.setImageResource(R.drawable.default_book_logo)
-                 }
-             } else {
--                imageView.setImageResource(R.drawable.default_book_logo)
-+                Log.e("MaterialAdapter", "Failed to load image because of empty")
-             }
-         }
-+        // Set an onClick listener for the item
-+        holder.itemView.setDebouncedOnClickListener {
-+            Log.d("MaterialAdapter", "Navigating with Material ID: ${material.id}")
-+            val action = HomeFragmentDirections.actionHomeFragmentToMaterialDetailsFragment(material)
-+            it.findNavController().navigate(action)
-+        }
-+
-+
-+
-     }
- 
- 
-Index: app/src/main/res/layout/fragment_order_details.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.core.widget.NestedScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".fragments.settings.OrderDetails\"\n    android:fillViewport=\"true\">\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar_all_order_details\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"?actionBarSize\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toTopOf=\"parent\">\n\n            <androidx.constraintlayout.widget.ConstraintLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\">\n\n                <ImageView\n                    android:id=\"@+id/img_close_order\"\n                    android:layout_width=\"@dimen/_20sdp\"\n                    android:layout_height=\"@dimen/_20sdp\"\n                    android:src=\"@drawable/ic_close\"\n                    android:scaleType=\"centerInside\"\n                    app:layout_constraintBottom_toBottomOf=\"parent\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toTopOf=\"parent\"\n                    app:tint=\"@color/black\" />\n\n                <TextView\n                    android:id=\"@+id/tv_order_id\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginStart=\"25dp\"\n                    android:fontFamily=\"@font/poppins_light\"\n                    android:textColor=\"@color/black\"\n                    android:textSize=\"@dimen/_20ssp\"\n                    app:layout_constraintBottom_toBottomOf=\"parent\"\n                    app:layout_constraintStart_toEndOf=\"@id/img_close_order\"\n                    app:layout_constraintTop_toTopOf=\"parent\" />\n            </androidx.constraintlayout.widget.ConstraintLayout>\n\n        </androidx.appcompat.widget.Toolbar>\n\n        <com.google.android.material.progressindicator.LinearProgressIndicator\n            android:id=\"@+id/progressbar_order\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintTop_toBottomOf=\"@id/toolbar_all_order_details\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            android:indeterminate=\"true\"\n            android:visibility=\"invisible\"/>\n\n        <LinearLayout\n            android:id=\"@+id/linear_steps_view\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/toolbar_all_order_details\">\n\n           <com.shuhart.stepview.StepView\n               android:id=\"@+id/step_view\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"wrap_content\"\n               android:padding=\"16dp\"\n               app:sv_selectedCircleColor=\"@color/g_orange\"\n               app:sv_selectedTextColor=\"@color/g_hint\"\n               app:sv_stepLineWidth=\"3dp\"\n               app:sv_stepPadding=\"4dp\"\n               app:sv_nextTextColor=\"@color/g_hint\"\n               app:sv_nextStepLineColor=\"@color/g_hint\"\n               app:sv_doneCircleColor=\"@color/g_orange\"\n               app:sv_doneStepLineColor=\"@color/g_orange\"\n               app:sv_doneCircleRadius=\"@dimen/_14sdp\"\n               app:sv_selectedCircleRadius=\"@dimen/_14sdp\"\n               app:sv_selectedStepNumberColor=\"@color/colorPrimary\"\n               app:sv_stepViewStyle=\"@style/StepView\"\n               app:sv_doneStepMarkColor=\"@color/colorPrimary\"\n               app:sv_stepNumberTextSize=\"@dimen/_12ssp\"\n               app:sv_animationType=\"Line\"\n               app:sv_doneTextColor=\"@color/g_hint\"\n               />\n        </LinearLayout>\n\n\n\n        <TextView\n            android:id=\"@+id/tv_shopping_addresses\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/g_address\"\n            android:fontFamily=\"@font/poppins_thin\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            android:textColor=\"@color/black\"\n            android:textSize=\"@dimen/_15ssp\"\n            android:layout_marginTop=\"20dp\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_steps_view\"\n            app:drawableTint=\"@color/black\"\n            app:drawableLeftCompat=\"@drawable/ic_baseline_location_on_24\" />\n\n        <LinearLayout\n            android:id=\"@+id/linear_address\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/tv_shopping_addresses\">\n\n\n                <TextView\n                    android:id=\"@+id/tv_full_name\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"@string/g_full_name\"\n                    android:textSize=\"@dimen/_13ssp\" />\n\n            <TextView\n                android:id=\"@+id/tv_address\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/g_address\"\n                android:textSize=\"@dimen/_13ssp\" />\n\n            <TextView\n                android:id=\"@+id/tv_phone_number\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/g_phone\"\n                android:textSize=\"@dimen/_13ssp\" />\n\n        </LinearLayout>\n\n        <View\n            android:id=\"@+id/line1\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_1sdp\"\n            android:layout_marginTop=\"15dp\"\n            android:background=\"@drawable/line\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_address\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            android:backgroundTint=\"@color/g_icon_tint\"\n            />\n\n        <TextView\n            android:id=\"@+id/tv_products\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/g_products\"\n            android:fontFamily=\"@font/poppins_thin\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            android:textColor=\"@color/black\"\n            android:textSize=\"@dimen/_15ssp\"\n            android:layout_marginTop=\"20dp\"\n            app:layout_constraintTop_toBottomOf=\"@id/line1\"\n            app:drawableTint=\"@color/black\"\n            app:drawableLeftCompat=\"@drawable/ic_cart\"\n            android:drawablePadding=\"5dp\"/>\n\n        <androidx.recyclerview.widget.RecyclerView\n            android:id=\"@+id/rv_products\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/line1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/tv_products\"\n            android:layout_marginTop=\"10dp\"\n            tools:listitem=\"@layout/cart_item\"\n            />\n\n        <androidx.constraintlayout.widget.ConstraintLayout\n            android:id=\"@+id/linear\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@id/rv_products\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            android:layout_marginTop=\"40dp\"\n            android:layout_marginBottom=\"20dp\"\n            android:background=\"@drawable/total_box_background\">\n\n            <TextView\n                android:layout_width=\"0dp\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/g_total\"\n                android:textSize=\"@dimen/_16ssp\"\n                android:textColor=\"@color/black\"\n                android:fontFamily=\"@font/sf_pro_display\"\n                android:layout_marginStart=\"10dp\"\n                android:layout_weight=\"1\"\n                android:layout_marginTop=\"@dimen/_15sdp\"\n                android:layout_marginBottom=\"@dimen/_15sdp\"\n                android:layout_gravity=\"start|center_vertical\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"/>\n\n            <TextView\n                android:id=\"@+id/tv_totalprice\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginEnd=\"10dp\"\n                android:textSize=\"@dimen/_16ssp\"\n                android:textColor=\"@color/black\"\n                android:fontFamily=\"@font/sf_pro_display\"\n                android:layout_marginTop=\"@dimen/_15sdp\"\n                android:layout_marginBottom=\"@dimen/_15sdp\"\n                android:layout_gravity=\"end|center_vertical\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"\n                />\n\n        </androidx.constraintlayout.widget.ConstraintLayout>\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline1\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.04\" />\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline2\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.96\" />\n    </androidx.constraintlayout.widget.ConstraintLayout>\n\n</androidx.core.widget.NestedScrollView>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_order_details.xml b/app/src/main/res/layout/fragment_order_details.xml
---- a/app/src/main/res/layout/fragment_order_details.xml	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/res/layout/fragment_order_details.xml	(date 1695475474375)
-@@ -115,31 +115,10 @@
-             android:orientation="vertical"
-             app:layout_constraintStart_toStartOf="@id/guideline1"
-             app:layout_constraintEnd_toEndOf="@id/guideline2"
--            app:layout_constraintTop_toBottomOf="@id/tv_shopping_addresses">
--
-+            app:layout_constraintTop_toBottomOf="@id/tv_shopping_addresses"/>
- 
--                <TextView
--                    android:id="@+id/tv_full_name"
--                    android:layout_width="wrap_content"
--                    android:layout_height="wrap_content"
--                    android:text="@string/g_full_name"
--                    android:textSize="@dimen/_13ssp" />
- 
--            <TextView
--                android:id="@+id/tv_address"
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:text="@string/g_address"
--                android:textSize="@dimen/_13ssp" />
- 
--            <TextView
--                android:id="@+id/tv_phone_number"
--                android:layout_width="wrap_content"
--                android:layout_height="wrap_content"
--                android:text="@string/g_phone"
--                android:textSize="@dimen/_13ssp" />
--
--        </LinearLayout>
- 
-         <View
-             android:id="@+id/line1"
-@@ -157,7 +136,7 @@
-             android:id="@+id/tv_products"
-             android:layout_width="wrap_content"
-             android:layout_height="wrap_content"
--            android:text="@string/g_products"
-+            android:text="Courses Material"
-             android:fontFamily="@font/poppins_thin"
-             app:layout_constraintStart_toStartOf="@id/guideline1"
-             android:textColor="@color/black"
-Index: app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.settings\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.AllOrdersAdapter\nimport com.example.kleine.databinding.FragmentAllOrdersBinding\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\n\n\nclass AllOrdersFragment : Fragment() {\n\n    val TAG = \"AllOrdersFragment\"\n    private lateinit var viewModel: ShoppingViewModel\n    private lateinit var binding: FragmentAllOrdersBinding\n    private lateinit var allOrdersAdapter: AllOrdersAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getUserOrders()\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        // Inflate the layout for this fragment\n        binding = FragmentAllOrdersBinding.inflate(inflater)\n        activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)?.visibility = View.GONE\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        setupRecyclerView()\n        observeAllOrders()\n        onCloseClick()\n        onItemClick()\n        binding.imgCloseOrders.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun onItemClick() {\n        allOrdersAdapter.onItemClick = {order ->\n            val bundle = Bundle()\n            bundle.putParcelable(\"order\",order)\n            findNavController().navigate(R.id.action_allOrdersFragment_to_orderDetails,bundle)\n\n        }\n    }\n\n    private fun onCloseClick() {\n        binding.imgCloseOrders.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun observeAllOrders() {\n        viewModel.userOrders.observe(viewLifecycleOwner) { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@observe\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n                    val orders = response.data\n                    if (orders!!.isEmpty())\n                        binding.apply {\n                            imgEmptyBox.visibility = View.VISIBLE\n                            imgEmptyBoxTexture.visibility = View.VISIBLE\n                            tvEmptyOrders.visibility = View.VISIBLE\n                            return@observe\n                        }\n                    binding.apply {\n                        imgEmptyBox.visibility = View.GONE\n                        imgEmptyBoxTexture.visibility = View.GONE\n                        tvEmptyOrders.visibility = View.GONE\n                    }\n                    allOrdersAdapter.differ.submitList(orders)\n                    return@observe\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@observe\n                }\n            }\n        }\n    }\n\n    private fun hideLoading() {\n        binding.progressbarAllOrders.visibility = View.GONE\n\n    }\n\n    private fun showLoading() {\n        binding.progressbarAllOrders.visibility = View.VISIBLE\n    }\n\n    private fun setupRecyclerView() {\n        allOrdersAdapter = AllOrdersAdapter()\n        binding.rvAllOrders.apply {\n            layoutManager = LinearLayoutManager(context)\n            adapter = allOrdersAdapter\n        }\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt b/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/java/com/example/kleine/fragments/settings/AllOrdersFragment.kt	(date 1695475418345)
-@@ -12,10 +12,16 @@
- import com.example.kleine.R
- import com.example.kleine.activities.ShoppingActivity
- import com.example.kleine.adapters.recyclerview.AllOrdersAdapter
-+import com.example.kleine.adapters.recyclerview.MaterialAdapter
- import com.example.kleine.databinding.FragmentAllOrdersBinding
-+import com.example.kleine.model.Enrollment
-+import com.example.kleine.model.Material
- import com.example.kleine.resource.Resource
- import com.example.kleine.viewmodel.shopping.ShoppingViewModel
- import com.google.android.material.bottomnavigation.BottomNavigationView
-+import com.google.firebase.auth.FirebaseAuth
-+import com.google.firebase.firestore.FieldPath
-+import com.google.firebase.firestore.FirebaseFirestore
- 
- 
- class AllOrdersFragment : Fragment() {
-@@ -24,6 +30,8 @@
-     private lateinit var viewModel: ShoppingViewModel
-     private lateinit var binding: FragmentAllOrdersBinding
-     private lateinit var allOrdersAdapter: AllOrdersAdapter
-+    private lateinit var materialAdapter: MaterialAdapter
-+
- 
-     override fun onCreate(savedInstanceState: Bundle?) {
-         super.onCreate(savedInstanceState)
-@@ -45,6 +53,7 @@
-     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-         super.onViewCreated(view, savedInstanceState)
- 
-+        fetchEnrolledMaterials()
-         setupRecyclerView()
-         observeAllOrders()
-         onCloseClick()
-@@ -54,14 +63,85 @@
-         }
-     }
- 
-+
-+    private fun fetchEnrolledMaterials() {
-+        val userId = FirebaseAuth.getInstance().currentUser?.uid
-+
-+        if (userId != null) {
-+            val firestore = FirebaseFirestore.getInstance()
-+            firestore.collection("enrollments")
-+                .whereEqualTo("userId", userId)
-+                .get()
-+                .addOnSuccessListener { querySnapshot ->
-+                    val enrollments = querySnapshot.documents.mapNotNull { document ->
-+                        document.toObject(Enrollment::class.java)
-+                    }
-+                    fetchMaterialsForEnrollments(enrollments)
-+                    Log.d(TAG, "Number of enrollments fetched: ${enrollments.size}")
-+
-+                }
-+                .addOnFailureListener { exception ->
-+                    Log.e(TAG, "Error fetching user enrollments", exception)
-+                    // Handle the error appropriately
-+                }
-+        } else {
-+            // Handle the case where the user is not logged in
-+        }
-+    }
-+
-+    private fun fetchMaterialsForEnrollments(enrollments: List<Enrollment>) {
-+        val firestore = FirebaseFirestore.getInstance()
-+
-+        // Filter out empty strings and remove duplicate IDs
-+        val materialIds = enrollments.map { it.materialId }.filter { it.isNotEmpty() }.distinct()
-+
-+        // Log the IDs being used in the query for debugging purposes
-+        Log.d(TAG, "Attempting to fetch materials with IDs: $materialIds")
-+
-+        // Only proceed with the query if there are valid IDs to search for
-+        if (materialIds.isNotEmpty()) {
-+            firestore.collection("Materials")
-+                .whereIn(FieldPath.documentId(), materialIds) // Updated line
-+                .get()
-+                .addOnSuccessListener { querySnapshot ->
-+                    val materials = querySnapshot.documents.mapNotNull { document ->
-+                        val material = document.toObject(Material::class.java)
-+                        material?.id = document.id // Set the id of the Material object
-+                        material
-+                    }
-+                    Log.d(TAG, "Materials fetched successfully: $materials")
-+                    displayMaterials(materials)
-+                }
-+                .addOnFailureListener { exception ->
-+                    Log.e(TAG, "Error fetching materials", exception)
-+                    // Handle the error appropriately
-+                }
-+        } else {
-+            Log.w(TAG, "No valid material IDs to fetch")
-+            // Handle the case where there are no valid material IDs
-+        }
-+    }
-+
-+
-+
-+
-+    private fun displayMaterials(materials: List<Material>) {
-+        Log.d(TAG, "Displaying materials: ${materials.size}")
-+        materialAdapter.differ.submitList(materials)
-+        materialAdapter.notifyDataSetChanged() // Force redraw
-+    }
-+
-+
-+
-     private fun onItemClick() {
--        allOrdersAdapter.onItemClick = {order ->
-+        materialAdapter.onItemClick = { material ->
-             val bundle = Bundle()
--            bundle.putParcelable("order",order)
--            findNavController().navigate(R.id.action_allOrdersFragment_to_orderDetails,bundle)
--
-+            bundle.putParcelable("material", material)
-+            findNavController().navigate(R.id.action_allOrdersFragment_to_orderDetails, bundle)
-         }
-     }
-+
-+
- 
-     private fun onCloseClick() {
-         binding.imgCloseOrders.setOnClickListener {
-@@ -120,10 +200,10 @@
-     }
- 
-     private fun setupRecyclerView() {
--        allOrdersAdapter = AllOrdersAdapter()
-+        materialAdapter = MaterialAdapter()
-         binding.rvAllOrders.apply {
-             layoutManager = LinearLayoutManager(context)
--            adapter = allOrdersAdapter
-+            adapter = materialAdapter
-         }
-     }
- }
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/model/Material.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.model\n\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.parcelize.Parcelize\n\n@Parcelize\n@Entity(tableName = \"material\")\ndata class Material(\n    @PrimaryKey(autoGenerate = true) // ID as auto increment\n    val desc: String = \"\",\n    val name: String = \"\", // Course name\n    val pass: Int = 0, // Number of students who passed this course/subject\n    val rating: Float = 0f, // Rating (1 - 5)\n    val requirement: String = \"\", // Requirement (e.g., Free)\n    val status: String = \"\", // Status (Available/Unavailable)\n    val view: Int = 0, // Number of students who viewed this course/subject\n    val imageUrl: String = \"\", // URL for the course banner\n    val enroll: Int = 0, // Number of students enrolled in this course/subject\n    val partnershipsID: String? = null  // partnership ID\n\n): Parcelable\n\n@Parcelize\ndata class MaterialData(\n    var id: String = \"\",\n    var name: String = \"\",\n    var desc: String = \"\",\n    var requirement: String = \"\",\n    var rating: Double = 0.0,\n    var imageUrl: String = \"\"\n): Parcelable {\n    constructor() : this(\"\", \"\", \"\", \"\", 0.0, \"\")\n}\n\n@Parcelize\ndata class MaterialEngageData(\n    val name: String = \"\",\n    val view: Long = 0,\n    val enroll: Long = 0,\n    val graduate: Long = 0,\n    val imageUrl: String = \"\"\n): Parcelable {\n    constructor() : this(\"\", 0,0,0,\"\")\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/model/Material.kt b/app/src/main/java/com/example/kleine/model/Material.kt
---- a/app/src/main/java/com/example/kleine/model/Material.kt	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/java/com/example/kleine/model/Material.kt	(date 1695475418573)
-@@ -8,7 +8,8 @@
- @Parcelize
- @Entity(tableName = "material")
- data class Material(
--    @PrimaryKey(autoGenerate = true) // ID as auto increment
-+//    @PrimaryKey(autoGenerate = true) // ID as auto increment
-+    var id: String = "",
-     val desc: String = "",
-     val name: String = "", // Course name
-     val pass: Int = 0, // Number of students who passed this course/subject
-Index: app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.firebaseDatabase\n\nimport android.util.Log\nimport com.example.kleine.model.*\nimport com.example.kleine.util.Constants.Companion.ADDRESS_COLLECTION\nimport com.example.kleine.util.Constants.Companion.BEST_DEALS\nimport com.example.kleine.util.Constants.Companion.CART_COLLECTION\nimport com.example.kleine.util.Constants.Companion.CATEGORIES_COLLECTION\nimport com.example.kleine.util.Constants.Companion.CATEGORY\nimport com.example.kleine.util.Constants.Companion.CHAIR_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CLOTHES\nimport com.example.kleine.util.Constants.Companion.COLOR\nimport com.example.kleine.util.Constants.Companion.CUPBOARD_CATEGORY\nimport com.example.kleine.util.Constants.Companion.ID\nimport com.example.kleine.util.Constants.Companion.ORDERS\nimport com.example.kleine.util.Constants.Companion.ORDER_CONFIRM_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_PLACED_STATE\nimport com.example.kleine.util.Constants.Companion.PRICE\nimport com.example.kleine.util.Constants.Companion.PRODUCTS_COLLECTION\nimport com.example.kleine.util.Constants.Companion.QUANTITY\nimport com.example.kleine.util.Constants.Companion.SIZE\nimport com.example.kleine.util.Constants.Companion.STORES_COLLECTION\nimport com.example.kleine.util.Constants.Companion.TITLE\nimport com.example.kleine.util.Constants.Companion.USERS_COLLECTION\n\n\nimport com.google.android.gms.tasks.Task\nimport com.google.firebase.auth.AuthCredential\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.ktx.auth\nimport com.google.firebase.firestore.DocumentSnapshot\nimport com.google.firebase.firestore.FirebaseFirestore\nimport com.google.firebase.firestore.Query\nimport com.google.firebase.firestore.QuerySnapshot\nimport com.google.firebase.firestore.Transaction\nimport com.google.firebase.firestore.ktx.firestore\nimport com.google.firebase.ktx.Firebase\nimport com.google.firebase.storage.FirebaseStorage\nimport com.google.firebase.storage.UploadTask\nimport com.google.firebase.storage.ktx.storage\nimport java.util.*\nimport kotlin.collections.ArrayList\nimport kotlin.collections.HashMap\nimport kotlin.random.Random\n\nclass FirebaseDb {\n    private val usersCollectionRef = Firebase.firestore.collection(USERS_COLLECTION)\n    private val productsCollection = Firebase.firestore.collection(PRODUCTS_COLLECTION)\n    private val categoriesCollection = Firebase.firestore.collection(CATEGORIES_COLLECTION)\n    private val storesCollection = Firebase.firestore.collection(STORES_COLLECTION)\n\n\n    private val firebaseStorage = Firebase.storage.reference\n\n    val userUid = FirebaseAuth.getInstance().currentUser?.uid\n\n    private val userCartCollection = userUid?.let {\n        Firebase.firestore.collection(USERS_COLLECTION).document(it).collection(CART_COLLECTION)\n    }\n    private val userAddressesCollection = userUid?.let {\n        Firebase.firestore.collection(USERS_COLLECTION).document(it).collection(ADDRESS_COLLECTION)\n\n    }\n\n\n    private val firebaseAuth = Firebase.auth\n\n    fun getProductsByCategory(category: String,page:Long) =\n        productsCollection.whereEqualTo(CATEGORY,category).limit(page).get()\n\n\n    fun getMostRequestedProducts(category: String,page:Long) =\n        productsCollection.whereEqualTo(CATEGORY, category)\n            .orderBy(ORDERS, Query.Direction.DESCENDING).limit(page).get()\n\n\n    fun createNewUser(\n        email: String, password: String\n    ) = firebaseAuth.createUserWithEmailAndPassword(email, password)\n\n    fun saveUserInformation(userUid: String, user: User, completion: (Exception?) -> Unit) {\n        usersCollectionRef.document(userUid).set(user)\n            .addOnSuccessListener { completion(null) }\n            .addOnFailureListener { e -> completion(e) }\n    }\n\n\n\n\n    fun loginUser(\n        email: String,\n        password: String\n    ) = firebaseAuth.signInWithEmailAndPassword(email, password)\n\n    fun getClothesProducts(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, CLOTHES).limit(pagingPage).get()\n\n    fun getBestDealsProducts(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, BEST_DEALS).limit(pagingPage).get()\n\n    fun getHomeProducts(pagingPage: Long) =\n        productsCollection.limit(pagingPage).get()\n\n    //add order by orders\n    fun getMostOrderedCupboard(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, CUPBOARD_CATEGORY).limit(pagingPage)\n            .orderBy(ORDERS, Query.Direction.DESCENDING).limit(pagingPage).get()\n\n    fun getCupboards(pagingPage: Long) =\n        productsCollection.whereEqualTo(CATEGORY, CUPBOARD_CATEGORY).limit(pagingPage)\n            .limit(pagingPage).get()\n\n    fun addProductToCart(product: CartProduct) = userCartCollection?.document()!!.set(product)\n\n    fun getProductInCart(product: CartProduct) = userCartCollection!!\n        .whereEqualTo(ID, product.id)\n        .whereEqualTo(COLOR, product.color)\n        .whereEqualTo(SIZE, product.size).get()\n\n    fun increaseProductQuantity(documentId: String): Task<Transaction> {\n        val document = userCartCollection!!.document(documentId)\n        return Firebase.firestore.runTransaction { transaction ->\n            val productBefore = transaction.get(document)\n            var quantity = productBefore.getLong(QUANTITY)\n            quantity = quantity!! + 1\n            transaction.update(document, QUANTITY, quantity)\n        }\n\n    }\n\n    fun getItemsInCart() = userCartCollection!!\n\n    fun decreaseProductQuantity(documentId: String): Task<Transaction> {\n        val document = userCartCollection!!.document(documentId)\n        return Firebase.firestore.runTransaction { transaction ->\n            val productBefore = transaction.get(document)\n            var quantity = productBefore.getLong(QUANTITY)\n            quantity = if (quantity!!.toInt() == 1)\n                1\n            else\n                quantity - 1\n            transaction.update(document, QUANTITY, quantity)\n\n        }\n\n    }\n\n    fun getMaterials(page: Long): Task<QuerySnapshot> {\n        return FirebaseFirestore.getInstance().collection(\"Materials\").limit(page).get()\n    }\n\n\n\n    fun deleteProductFromCart(documentId: String) =\n        userCartCollection!!.document(documentId).delete()\n\n\n    fun searchProducts(searchQuery: String) = productsCollection\n        .orderBy(\"title\")\n        .startAt(searchQuery)\n        .endAt(\"\\u03A9+$searchQuery\")\n        .limit(5)\n        .get()\n\n    fun getCategories() = categoriesCollection.orderBy(\"rank\").get()\n\n    fun getProductFromCartProduct(cartProduct: CartProduct) =\n        productsCollection.whereEqualTo(ID, cartProduct.id)\n            .whereEqualTo(TITLE, cartProduct.name)\n            .whereEqualTo(PRICE, cartProduct.price).get()\n\n    fun saveNewAddress(address: Address) = userAddressesCollection?.add(address)\n\n    fun getAddresses() = userAddressesCollection\n\n    fun findAddress(address: Address) = userAddressesCollection!!\n        .whereEqualTo(\"addressTitle\", address.addressTitle)\n        .whereEqualTo(\"fullName\", address.fullName).get()\n\n    fun updateAddress(documentUid: String, address: Address) =\n        userAddressesCollection?.document(documentUid)?.set(address)\n\n    fun deleteAddress(documentUid: String, address: Address) =\n        userAddressesCollection?.document(documentUid)?.delete()\n\n    fun placeOrder(products: List<CartProduct>, address: Address, order: Order) =\n        Firebase.firestore.runBatch { batch ->\n            //filter every product to its store\n            /**\n             * create a map of products that has the size of stores list,\n            the map has stores name as keys\n             */\n\n            val stores = ArrayList<String>()\n            products.forEach { cartProduct ->\n                if (!stores.contains(cartProduct.store)) {\n                    stores.add(cartProduct.store)\n                }\n            }\n\n            val productsMap = HashMap<String, ArrayList<CartProduct>>(stores.size)\n            stores.forEach { storeName ->\n                val tempList = ArrayList<CartProduct>()\n                products.forEach { cartProduct ->\n                    if (cartProduct.store == storeName)\n                        tempList.add(cartProduct)\n                    productsMap[storeName] = tempList\n                }\n            }\n\n\n            /**\n            // Adding order,address and products to each store\n             */\n            productsMap.forEach {\n                val store = it.key\n                val orderProducts = it.value\n                val orderNum = order.id\n                var price = 0\n\n                orderProducts.forEach { it2 ->\n                    if (it2.newPrice != null && it2.newPrice.isNotEmpty()) {\n                        price += it2.newPrice.toInt() * it2.quantity\n                    } else\n                        price += it2.price.toInt() * it2.quantity\n                }\n\n                Log.d(\"test\", \"$store $price\")\n\n                val storeOrder = Order(\n                    orderNum.toString(),\n                    Calendar.getInstance().time,\n                    price.toString(),\n                    ORDER_PLACED_STATE\n                )\n\n                val storeDocument = storesCollection\n                    .document(store)\n                    .collection(\"orders\")\n                    .document()\n\n                batch.set(storeDocument, storeOrder)\n\n                val storeOrderAddress = storeDocument.collection(ADDRESS_COLLECTION).document()\n                batch.set(storeOrderAddress, address)\n\n\n                orderProducts.forEach {\n                    val storeOrderProducts =\n                        storeDocument.collection(PRODUCTS_COLLECTION).document()\n                    batch.set(storeOrderProducts, it)\n                }\n\n\n            }\n\n            /**\n            // Adding order,address and products to the user\n             */\n            val userOrderDocument =\n                usersCollectionRef.document(FirebaseAuth.getInstance().currentUser!!.uid)\n                    .collection(\"orders\").document()\n            batch.set(userOrderDocument, order)\n\n            products.forEach {\n                val userProductDocument =\n                    userOrderDocument.collection(PRODUCTS_COLLECTION).document()\n                batch.set(userProductDocument, it)\n            }\n\n            val userAddressDocument = userOrderDocument.collection(ADDRESS_COLLECTION).document()\n\n            batch.set(userAddressDocument, address)\n\n        }.also {\n            deleteCartItems()\n        }\n\n    private fun deleteCartItems() {\n        userCartCollection?.get()?.addOnSuccessListener {\n            Firebase.firestore.runBatch { batch ->\n                it.documents.forEach {\n                    val document = userCartCollection.document(it.id)\n                    batch.delete(document)\n                }\n            }\n        }\n    }\n\n\n    fun getUser() = usersCollectionRef\n        .document(FirebaseAuth.getInstance().currentUser!!.uid)\n\n\n    fun uploadUserProfileImage(image: ByteArray, imageName: String): UploadTask {\n        val imageRef = firebaseStorage.child(\"profileImages\")\n            .child(firebaseAuth.currentUser!!.uid)\n            .child(imageName)\n\n        return imageRef.putBytes(image)\n\n    }\n\n    fun getImageUrl(\n        firstName: String,\n        lastName: String,\n        email: String,\n        imageName: String,\n        onResult: (User?, String?) -> Unit,\n    ) {\n        if (imageName.isNotEmpty())\n            firebaseStorage.child(\"profileImages\")\n                .child(firebaseAuth.currentUser!!.uid)\n                .child(imageName).downloadUrl.addOnCompleteListener {\n                    if (it.isSuccessful) {\n                        val imageUrl = it.result.toString()\n                        val user = User(firstName, lastName, email, imageUrl)\n                        onResult(user, null)\n                    } else\n                        onResult(null, it.exception.toString())\n\n                } else {\n            val user = User(firstName, lastName, email, \"\")\n            onResult(user, null)\n        }\n    }\n\n    fun updateUserInformation(user: User) =\n        Firebase.firestore.runTransaction { transaction ->\n            val userPath = usersCollectionRef.document(Firebase.auth.currentUser!!.uid)\n            if (user.imagePath.isNotEmpty()) {\n                transaction.set(userPath, user)\n            } else {\n                val imagePath = transaction.get(userPath)[\"imagePath\"] as String\n                user.imagePath = imagePath\n                transaction.set(userPath, user)\n            }\n\n        }\n\n\n    fun getUserOrders() = usersCollectionRef\n        .document(FirebaseAuth.getInstance().currentUser!!.uid)\n        .collection(ORDERS)\n        .orderBy(\"date\", Query.Direction.DESCENDING)\n        .get()\n\n    fun resetPassword(email: String) = firebaseAuth.sendPasswordResetEmail(email)\n\n    fun getOrderAddressAndProducts(\n        order: Order,\n        address: (Address?, String?) -> Unit,\n        products: (List<CartProduct>?, String?) -> Unit\n    ) {\n        usersCollectionRef\n            .document(Firebase.auth.currentUser!!.uid).collection(ORDERS)\n            .whereEqualTo(\"id\", order.id)\n            .get().addOnCompleteListener {\n                if (it.isSuccessful) {\n                    val id = it.result?.documents?.get(0)?.id\n                    usersCollectionRef.document(Firebase.auth.currentUser!!.uid)\n                        .collection(ORDERS).document(id!!).collection(ADDRESS_COLLECTION).get()\n                        .addOnCompleteListener { it2 ->\n                            if (it2.isSuccessful) {\n                                val address2 = it2.result?.toObjects(Address::class.java)\n                                Log.d(\"test\", address2!!.size.toString())\n                                address(address2?.get(0), null)\n                            } else\n                                address(null, it2.exception.toString())\n                        }\n\n                    usersCollectionRef.document(Firebase.auth.currentUser!!.uid)\n                        .collection(ORDERS).document(id).collection(PRODUCTS_COLLECTION).get()\n                        .addOnCompleteListener { it2 ->\n                            if (it2.isSuccessful) {\n                                val products2 = it2.result?.toObjects(CartProduct::class.java)\n                                Log.d(\"test\", products2!!.size.toString())\n                                products(products2, null)\n                            } else\n                                products(null, it2.exception.toString())\n                        }\n\n\n                } else {\n                    address(null, it.exception.toString())\n                    products(null, it.exception.toString())\n                }\n            }\n    }\n\n    //true -> already existed account\n    //false -> new account\n    fun checkUserByEmail(email: String, onResult: (String?, Boolean?) -> Unit) {\n        usersCollectionRef.whereEqualTo(\"email\", email).get()\n            .addOnCompleteListener {\n                if (it.isSuccessful) {\n                    val user = it.result.toObjects(User::class.java)\n                    if (user.isEmpty())\n                        onResult(null, false)\n                    else\n                        onResult(null, true)\n                } else\n                    onResult(it.exception.toString(), null)\n            }\n    }\n\n    fun signInWithGoogle(credential: AuthCredential) =\n        FirebaseAuth.getInstance().signInWithCredential(credential)\n\n    fun fetchStore(uid:String) = storesCollection.whereEqualTo(\"uid\",uid).get()\n\n\n\n    fun logout() = Firebase.auth.signOut()\n\n\n\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt b/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt
---- a/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/java/com/example/kleine/firebaseDatabase/FirebaseDb.kt	(date 1695475418592)
-@@ -25,6 +25,7 @@
- 
- 
- import com.google.android.gms.tasks.Task
-+import com.google.android.gms.tasks.TaskCompletionSource
- import com.google.firebase.auth.AuthCredential
- import com.google.firebase.auth.FirebaseAuth
- import com.google.firebase.auth.ktx.auth
-@@ -145,9 +146,28 @@
- 
-     }
- 
--    fun getMaterials(page: Long): Task<QuerySnapshot> {
--        return FirebaseFirestore.getInstance().collection("Materials").limit(page).get()
-+    fun getMaterials(page: Long): Task<List<Material>> {
-+        val taskCompletionSource = TaskCompletionSource<List<Material>>()
-+
-+        FirebaseFirestore.getInstance().collection("Materials").limit(page).get()
-+            .addOnSuccessListener { querySnapshot ->
-+                val materials = querySnapshot.documents.mapNotNull { document ->
-+                    val material = document.toObject(Material::class.java)
-+                    material?.id = document.id // Set the id of the Material object
-+                    material
-+                }
-+                // Set the result to the TaskCompletionSource
-+                taskCompletionSource.setResult(materials)
-+            }
-+            .addOnFailureListener { exception ->
-+                // Set the exception to the TaskCompletionSource
-+                taskCompletionSource.setException(exception)
-+            }
-+
-+        return taskCompletionSource.task
-     }
-+
-+
- 
- 
- 
-Index: app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.settings\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.LinearLayout\nimport android.widget.Toast\nimport androidx.lifecycle.Observer\nimport androidx.navigation.fragment.findNavController\nimport androidx.navigation.fragment.navArgs\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.SpacingDecorator.VerticalSpacingItemDecorator\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.CartRecyclerAdapter\nimport com.example.kleine.databinding.FragmentOrderDetailsBinding\nimport com.example.kleine.model.Address\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.ORDER_CONFIRM_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_Delivered_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_PLACED_STATE\nimport com.example.kleine.util.Constants.Companion.ORDER_SHIPPED_STATE\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\n\nclass OrderDetails : Fragment() {\n    val TAG = \"OrderDetails\"\n    val args by navArgs<OrderDetailsArgs>()\n    private lateinit var binding: FragmentOrderDetailsBinding\n    private lateinit var viewModel: ShoppingViewModel\n    private lateinit var productsAdapter: CartRecyclerAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getOrderAddressAndProducts(args.order)\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentOrderDetailsBinding.inflate(inflater)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        binding.tvOrderId.text = resources.getText(R.string.g_order)\n            .toString().plus(\"# ${args.order.id}\")\n        setupRecyclerview()\n        observeOrderAddress()\n\n        observeProducts()\n        onCloseImageClick()\n        setupStepView()\n\n    }\n\n    private fun onCloseImageClick() {\n        binding.imgCloseOrder.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun observeProducts() {\n        viewModel.orderProducts.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n\n                is Resource.Loading -> {\n                    showProductsLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideProductsLoading()\n                    productsAdapter.differ.submitList(response.data)\n                    binding.tvTotalprice.text = args.order.totalPrice\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideAddressLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@Observer\n                }\n            }\n\n        })\n    }\n\n    private fun hideProductsLoading() {\n        binding.apply {\n            progressbarOrder.visibility = View.GONE\n            rvProducts.visibility = View.VISIBLE\n            tvProducts.visibility = View.VISIBLE\n            linear.visibility = View.VISIBLE\n            line1.visibility = View.VISIBLE\n        }\n    }\n\n    private fun showProductsLoading() {\n        binding.apply {\n            progressbarOrder.visibility = View.VISIBLE\n            rvProducts.visibility = View.INVISIBLE\n            tvProducts.visibility = View.INVISIBLE\n            linear.visibility = View.INVISIBLE\n            line1.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun setupRecyclerview() {\n        productsAdapter = CartRecyclerAdapter(\"From Order Detail\")\n        binding.rvProducts.apply {\n            adapter = productsAdapter\n            layoutManager = LinearLayoutManager(context)\n            addItemDecoration(VerticalSpacingItemDecorator(23))\n        }\n    }\n\n    private fun observeOrderAddress() {\n        viewModel.orderAddress.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n\n                is Resource.Loading -> {\n                    showAddressLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideAddressLoading()\n                    val address = response.data\n                    binding.apply {\n                        tvFullName.text = address?.fullName\n                        tvAddress.text = address?.street\n                            .plus(\", ${address?.city}\")\n                            .plus(\", ${address?.state}\")\n                        tvPhoneNumber.text = address?.phone\n                    }\n\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideAddressLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@Observer\n                }\n            }\n\n        })\n    }\n\n    private fun hideAddressLoading() {\n        binding.apply {\n            progressbarOrder.visibility = View.GONE\n            stepView.visibility = View.VISIBLE\n            tvShoppingAddresses.visibility = View.VISIBLE\n            linearAddress.visibility = View.VISIBLE\n        }\n    }\n\n    private fun showAddressLoading() {\n        binding.apply {\n            binding.apply {\n                progressbarOrder.visibility = View.VISIBLE\n                stepView.visibility = View.INVISIBLE\n                tvShoppingAddresses.visibility = View.INVISIBLE\n                linearAddress.visibility = View.INVISIBLE\n            }\n        }\n    }\n\n    private fun setupStepView() {\n        val state = when (args.order.state) {\n            ORDER_PLACED_STATE -> 1\n            ORDER_CONFIRM_STATE -> 2\n            ORDER_SHIPPED_STATE -> 3\n            ORDER_Delivered_STATE -> 4\n            else -> {\n                2\n            }\n        }\n\n        Log.d(\"test2\", args.order.state)\n        Log.d(\"test2\", state.toString())\n        val steps = arrayOf<String>(\n            resources.getText(R.string.g_order_placed).toString(),\n            resources.getText(R.string.g_confirm).toString(),\n            resources.getText(R.string.g_shipped).toString(),\n            resources.getText(R.string.g_delivered).toString()\n        )\n\n        binding.stepView.apply {\n            getState().stepsNumber(4)\n                .steps(steps.toMutableList())\n                .commit()\n            if (state == 4) {\n                go(3,false)\n                done(true)\n            }else{\n                go(state, false)\n            }\n\n        }\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt b/app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt
---- a/app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/java/com/example/kleine/fragments/settings/OrderDetails.kt	(date 1695475644541)
-@@ -52,7 +52,6 @@
-         binding.tvOrderId.text = resources.getText(R.string.g_order)
-             .toString().plus("# ${args.order.id}")
-         setupRecyclerview()
--        observeOrderAddress()
- 
-         observeProducts()
-         onCloseImageClick()
-@@ -126,43 +125,7 @@
-         }
-     }
- 
--    private fun observeOrderAddress() {
--        viewModel.orderAddress.observe(viewLifecycleOwner, Observer { response ->
--            when (response) {
--
--                is Resource.Loading -> {
--                    showAddressLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideAddressLoading()
--                    val address = response.data
--                    binding.apply {
--                        tvFullName.text = address?.fullName
--                        tvAddress.text = address?.street
--                            .plus(", ${address?.city}")
--                            .plus(", ${address?.state}")
--                        tvPhoneNumber.text = address?.phone
--                    }
--
--                    return@Observer
--                }
- 
--                is Resource.Error -> {
--                    hideAddressLoading()
--                    Toast.makeText(
--                        activity,
--                        resources.getText(R.string.error_occurred),
--                        Toast.LENGTH_SHORT
--                    ).show()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--
--        })
--    }
- 
-     private fun hideAddressLoading() {
-         binding.apply {
-Index: app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.viewmodel.shopping\n\nimport android.util.Log\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.kleine.firebaseDatabase.FirebaseDb\nimport com.example.kleine.model.*\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.ACCESSORY_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CHAIR_CATEGORY\nimport com.example.kleine.util.Constants.Companion.CUPBOARD_CATEGORY\nimport com.example.kleine.util.Constants.Companion.FURNITURE_CATEGORY\nimport com.example.kleine.util.Constants.Companion.TABLES_CATEGORY\nimport com.google.firebase.firestore.FirebaseFirestore\nimport java.util.*\n\nprivate const val TAG = \"ShoppingViewModel\"\n\nclass ShoppingViewModel(\n    private val firebaseDatabase: FirebaseDb\n) : ViewModel() {\n\n\n    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()\n//    val materialsLiveData: MutableLiveData<Resource<List<Material>>> = MutableLiveData()\n    val materials: MutableLiveData<Resource<List<Material>>> = MutableLiveData()\n\n    private val _materialsLiveData = MutableLiveData<Resource<List<Material>>>()\n    val materialsLiveData: LiveData<Resource<List<Material>>> get() = _materialsLiveData\n\n\n//    val materials = MutableLiveData<Resource<List<Material>>>()\n\n    val clothes = MutableLiveData<List<Product>>()\n    val emptyClothes = MutableLiveData<Boolean>()\n    val bestDeals = MutableLiveData<List<Product>>()\n    val emptyBestDeals = MutableLiveData<Boolean>()\n\n    val home = MutableLiveData<Resource<List<Product>>>()\n\n    val chairs = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedChairs = MutableLiveData<Resource<List<Product>>>()\n\n    val tables = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedTables = MutableLiveData<Resource<List<Product>>>()\n\n    val accessory = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedAccessories = MutableLiveData<Resource<List<Product>>>()\n\n    val furniture = MutableLiveData<Resource<List<Product>>>()\n    val mostRequestedFurniture = MutableLiveData<Resource<List<Product>>>()\n\n    val mostRequestedCupboard = MutableLiveData<Resource<List<Product>>>()\n    val cupboard = MutableLiveData<Resource<List<Product>>>()\n    val addToCart = MutableLiveData<Resource<Boolean>>()\n\n    val addAddress = MutableLiveData<Resource<Address>>()\n    val updateAddress = MutableLiveData<Resource<Address>>()\n    val deleteAddress = MutableLiveData<Resource<Address>>()\n\n    val profile = MutableLiveData<Resource<User>>()\n\n    val uploadProfileImage = MutableLiveData<Resource<String>>()\n    val updateUserInformation = MutableLiveData<Resource<User>>()\n\n    val userOrders = MutableLiveData<Resource<List<Order>>>()\n\n    val passwordReset = MutableLiveData<Resource<String>>()\n\n    val orderAddress = MutableLiveData<Resource<Address>>()\n    val orderProducts = MutableLiveData<Resource<List<CartProduct>>>()\n\n    val categories = MutableLiveData<Resource<List<Category>>>()\n\n\n    val search = MutableLiveData<Resource<List<Product>>>()\n\n    private var homePage: Long = 10\n    private var clothesPaging: Long = 5\n    private var bestDealsPaging: Long = 5\n\n    private var cupboardPaging: Long = 4\n    private var mostOrderCupboardPaging: Long = 5\n\n    private var mostRequestedChairsPage: Long = 3\n    private var chairsPage: Long = 4\n\n    private var mostRequestedTablePage: Long = 3\n    private var tablePage: Long = 4\n\n    private var mostRequestedAccessoryPage: Long = 3\n    private var accessoryPage: Long = 4\n\n    private var mostRequestedFurniturePage: Long = 3\n    private var furniturePage: Long = 4\n\n\n    init {\n        getClothesProducts()\n        getBestDealsProduct()\n        getHomeProduct()\n    }\n\n\n    // Fetch Materials from Firebase\n    fun getMaterials() {\n        _materialsLiveData.postValue(Resource.Loading())\n\n        firebaseDatabase.getMaterials(10)\n            .addOnSuccessListener { documents ->\n                val materials = documents.toObjects(Material::class.java)\n                _materialsLiveData.postValue(Resource.Success(materials))\n            }\n            .addOnFailureListener { exception ->\n                _materialsLiveData.postValue(Resource.Error(exception.message ?: \"An unknown error occurred\"))\n            }\n    }\n\n\n\n    private var furnitureProducts: List<Product>? = null\n    fun getFurniture(size: Int = 0) {\n        if (furnitureProducts != null && size == 0) {\n            furniture.postValue(Resource.Success(furnitureProducts))\n            return\n        }\n        furniture.postValue(Resource.Loading())\n        shouldPaging(FURNITURE_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                tables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(FURNITURE_CATEGORY, furniturePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                furnitureProducts = productsList\n                                furniture.postValue(Resource.Success(productsList))\n                                furniturePage += 4\n\n                            }\n                        } else\n                            furniture.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                furniture.postValue(Resource.Error(\"Cannot paging\"))\n\n        }\n    }\n\n    private var mostRequestedFurnitureProducts: List<Product>? = null\n    fun getMostRequestedFurniture(size: Int = 0) {\n        if (mostRequestedFurnitureProducts != null && size == 0) {\n            mostRequestedFurniture.postValue(Resource.Success(mostRequestedFurnitureProducts))\n            return\n        }\n        mostRequestedFurniture.postValue(Resource.Loading())\n        shouldPaging(FURNITURE_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedFurniture.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(\n                    FURNITURE_CATEGORY,\n                    mostRequestedFurniturePage\n                )\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedFurnitureProducts = productsList\n                                mostRequestedFurniture.postValue(Resource.Success(productsList))\n                                mostRequestedFurniturePage += 4\n\n                            }\n                        } else\n                            mostRequestedFurniture.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedFurniture.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var accessoriesProducts: List<Product>? = null\n    fun getAccessories(size: Int = 0) {\n        if (accessoriesProducts != null && size == 0) {\n            accessory.postValue(Resource.Success(accessoriesProducts))\n            return\n        }\n        accessory.postValue(Resource.Loading())\n        shouldPaging(ACCESSORY_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                Log.d(\"test\", \"paging\")\n                firebaseDatabase.getProductsByCategory(ACCESSORY_CATEGORY, accessoryPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                accessory.postValue(Resource.Success(productsList))\n                                accessoriesProducts = productsList\n                                accessoryPage += 4\n\n                            }\n                        } else\n                            accessory.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else {\n                accessory.postValue(Resource.Error(\"Cannot page\"))\n            }\n        }\n    }\n\n    private var mostRequestedAccessoriesProducts: List<Product>? = null\n    fun getMostRequestedAccessories(size: Int = 0) {\n        if (mostRequestedAccessoriesProducts != null && size == 0) {\n            mostRequestedAccessories.postValue(Resource.Success(mostRequestedAccessoriesProducts))\n            return\n        }\n        mostRequestedAccessories.postValue(Resource.Loading())\n        shouldPaging(ACCESSORY_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(\n                    ACCESSORY_CATEGORY,\n                    mostRequestedAccessoryPage\n                )\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedAccessories.postValue(Resource.Success(productsList))\n                                mostRequestedAccessoriesProducts = productsList\n                                mostRequestedAccessoryPage += 4\n\n                            }\n                        } else\n                            mostRequestedAccessories.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedAccessories.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var chairsProducts: List<Product>? = null\n    fun getChairs(size: Int = 0) {\n        if (chairsProducts != null && size == 0) {\n            chairs.postValue(Resource.Success(chairsProducts))\n            return\n        }\n        chairs.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(CHAIR_CATEGORY, chairsPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                chairsProducts = productsList\n                                chairs.postValue(Resource.Success(productsList))\n                                chairsPage += 4\n\n                            }\n                        } else\n                            chairs.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                chairs.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedChairsProducts: List<Product>? = null\n    fun getMostRequestedChairs(size: Int = 0) {\n        if (mostRequestedChairsProducts != null && size == 0) {\n            mostRequestedChairs.postValue(Resource.Success(chairsProducts))\n            return\n        }\n        mostRequestedChairs.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                chairs.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(CHAIR_CATEGORY, mostRequestedChairsPage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedChairsProducts = productsList\n                                mostRequestedChairs.postValue(Resource.Success(productsList))\n                                mostRequestedChairsPage += 4\n\n                            }\n                        } else\n                            mostRequestedChairs.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                chairs.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var tablesProducts: List<Product>? = null\n    fun getTables(size: Int = 0) {\n        if (tablesProducts != null && size == 0) {\n            tables.postValue(Resource.Success(tablesProducts))\n            return\n        }\n        tables.postValue(Resource.Loading())\n        shouldPaging(TABLES_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                tables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(TABLES_CATEGORY, tablePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                tablesProducts = productsList\n                                tables.postValue(Resource.Success(productsList))\n                                tablePage += 4\n\n                            }\n                        } else\n                            tables.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                home.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedTablesProducts: List<Product>? = null\n    fun getMostRequestedTables(size: Int = 0) {\n        if (mostRequestedTablesProducts != null && size == 0) {\n            tables.postValue(Resource.Success(mostRequestedTablesProducts))\n            return\n        }\n        mostRequestedTables.postValue(Resource.Loading())\n        shouldPaging(TABLES_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedTables.postValue(Resource.Loading())\n                firebaseDatabase.getProductsByCategory(TABLES_CATEGORY, mostRequestedTablePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedTablesProducts = productsList\n                                mostRequestedTables.postValue(Resource.Success(productsList))\n                                mostRequestedTablePage += 3\n\n                            }\n                        } else\n                            mostRequestedTables.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                mostRequestedTables.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n\n    fun getClothesProducts() =\n        firebaseDatabase.getClothesProducts(clothesPaging).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result\n                if (!documents!!.isEmpty) {\n                    val productsList = documents.toObjects(Product::class.java)\n                    clothes.postValue(productsList)\n                    clothesPaging += 5\n                } else\n                    emptyClothes.postValue(true)\n\n            } else\n                Log.e(TAG, it.exception.toString())\n\n        }\n\n    fun getBestDealsProduct() =\n        firebaseDatabase.getBestDealsProducts(bestDealsPaging).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result\n                if (!documents!!.isEmpty) {\n                    val productsList = documents.toObjects(Product::class.java)\n                    bestDeals.postValue(productsList)\n                    bestDealsPaging += 5\n                } else\n                    emptyBestDeals.postValue(true)\n\n            } else\n                Log.e(TAG, it.exception.toString())\n        }\n\n    fun getHomeProduct(size: Int = 0) {\n        home.postValue(Resource.Loading())\n        shouldPagingHome(size)\n        { shouldPaging ->\n            if (shouldPaging) {\n                home.postValue(Resource.Loading())\n                firebaseDatabase.getHomeProducts(homePage)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                home.postValue(Resource.Success(productsList))\n                                homePage += 4\n\n                            }\n                        } else\n                            home.postValue(Resource.Error(it.exception.toString()))\n                    }\n            } else\n                home.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var mostRequestedCupboardProducts: List<Product>? = null\n    fun getMostRequestedCupboards(size: Int = 0) {\n        if (mostRequestedCupboardProducts != null && size == 0) {\n            mostRequestedCupboard.postValue(Resource.Success(mostRequestedCupboardProducts))\n            return\n        }\n\n        mostRequestedCupboard.postValue(Resource.Loading())\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                mostRequestedCupboard.postValue(Resource.Loading())\n                firebaseDatabase.getMostOrderedCupboard(mostOrderCupboardPaging)\n                    .addOnCompleteListener {\n                        if (it.isSuccessful) {\n                            val documents = it.result\n                            if (!documents!!.isEmpty) {\n                                val productsList = documents.toObjects(Product::class.java)\n                                mostRequestedCupboardProducts = productsList\n                                mostRequestedCupboard.postValue(Resource.Success(productsList))\n                                mostOrderCupboardPaging += 5\n\n                            }\n                        } else\n                            mostRequestedCupboard.postValue(Resource.Error(it.exception.toString()))\n                    }\n\n\n            } else\n                mostRequestedCupboard.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    private var dCupboardProducts: List<Product>? = null\n    fun getCupboardProduct(size: Int = 0) {\n        if (dCupboardProducts != null && size == 0) {\n            cupboard.postValue(Resource.Success(dCupboardProducts))\n            return\n        }\n        shouldPaging(CUPBOARD_CATEGORY, size) { shouldPaging ->\n            if (shouldPaging) {\n                cupboard.postValue(Resource.Loading())\n                firebaseDatabase.getCupboards(cupboardPaging).addOnCompleteListener {\n                    if (it.isSuccessful) {\n\n                        val documents = it.result\n                        if (!documents!!.isEmpty) {\n                            val productsList = documents.toObjects(Product::class.java)\n                            dCupboardProducts = productsList\n                            cupboard.postValue(Resource.Success(productsList))\n                            cupboardPaging += 10\n                        }\n\n                    } else\n                        cupboard.postValue(Resource.Error(it.exception.toString()))\n                }\n            } else\n                cupboard.postValue(Resource.Error(\"Cannot paging\"))\n        }\n    }\n\n    /*\n    * TODO : Move these functions to firebaseDatabase class\n     */\n\n    private fun shouldPaging(category: String, listSize: Int, onSuccess: (Boolean) -> Unit) {\n        FirebaseFirestore.getInstance()\n            .collection(\"categories\")\n            .whereEqualTo(\"name\", category).get().addOnSuccessListener {\n                val tempCategory = it.toObjects(Category::class.java)\n                val products = tempCategory[0].products\n                Log.d(\"test\", \" $category : prodcuts ${tempCategory[0].products}, size $listSize\")\n                if (listSize == products)\n                    onSuccess(false).also { Log.d(TAG, \"$category Paging:false\") }\n                else\n                    onSuccess(true).also { Log.d(TAG, \"$category Paging:true\") }\n            }\n    }\n\n    private fun shouldPagingHome(listSize: Int, onSuccess: (Boolean) -> Unit) {\n        FirebaseFirestore.getInstance()\n            .collection(\"categories\").get().addOnSuccessListener {\n                var productsCount = 0\n                it.toObjects(Category::class.java).forEach { category ->\n                    productsCount += category.products!!.toInt()\n                }\n\n                if (listSize == productsCount)\n                    onSuccess(false)\n                else\n                    onSuccess(true)\n\n            }\n    }\n\n\n    private fun checkIfProductAlreadyAdded(\n        product: CartProduct,\n        onSuccess: (Boolean, String) -> Unit\n    ) {\n        addToCart.postValue(Resource.Loading())\n        firebaseDatabase.getProductInCart(product).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val documents = it.result!!.documents\n                if (documents.isNotEmpty())\n                    onSuccess(true, documents[0].id) // true ---> product is already in cart\n                else\n                    onSuccess(false, \"\") // false ---> product is not in cart\n            } else\n                addToCart.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n\n    fun addProductToCart(product: CartProduct) =\n        checkIfProductAlreadyAdded(product) { isAdded, id ->\n            if (isAdded) {\n                firebaseDatabase.increaseProductQuantity(id).addOnCompleteListener {\n                    if (it.isSuccessful)\n                        addToCart.postValue(Resource.Success(true))\n                    else\n                        addToCart.postValue(Resource.Error(it.exception!!.message))\n\n                }\n            } else {\n                firebaseDatabase.addProductToCart(product).addOnCompleteListener {\n                    if (it.isSuccessful)\n                        addToCart.postValue(Resource.Success(true))\n                    else\n                        addToCart.postValue(Resource.Error(it.exception!!.message))\n                }\n            }\n        }\n\n\n    fun saveAddress(address: Address) {\n        addAddress.postValue(Resource.Loading())\n        firebaseDatabase.saveNewAddress(address)?.addOnCompleteListener {\n            if (it.isSuccessful)\n                addAddress.postValue(Resource.Success(address))\n            else\n                addAddress.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun updateAddress(oldAddress: Address, newAddress: Address) {\n        updateAddress.postValue(Resource.Loading())\n        firebaseDatabase.findAddress(oldAddress).addOnCompleteListener { addressResponse ->\n            if (addressResponse.isSuccessful) {\n                val documentUid = addressResponse.result!!.documents[0].id\n                firebaseDatabase.updateAddress(documentUid, newAddress)?.addOnCompleteListener {\n                    if (it.isSuccessful)\n                        updateAddress.postValue(Resource.Success(newAddress))\n                    else\n                        updateAddress.postValue(Resource.Error(it.exception.toString()))\n\n                }\n\n            } else\n                updateAddress.postValue(Resource.Error(addressResponse.exception.toString()))\n\n        }\n    }\n\n    fun deleteAddress(address: Address) {\n        deleteAddress.postValue(Resource.Loading())\n        firebaseDatabase.findAddress(address).addOnCompleteListener { addressResponse ->\n            if (addressResponse.isSuccessful) {\n                val documentUid = addressResponse.result!!.documents[0].id\n                firebaseDatabase.deleteAddress(documentUid, address)?.addOnCompleteListener {\n                    if (it.isSuccessful)\n                        deleteAddress.postValue(Resource.Success(address))\n                    else\n                        deleteAddress.postValue(Resource.Error(it.exception.toString()))\n\n                }\n\n            } else\n                deleteAddress.postValue(Resource.Error(addressResponse.exception.toString()))\n\n        }\n    }\n\n    private val user: User? = null\n    fun getUser() {\n        if (user != null) {\n            profile.postValue(Resource.Success(user))\n            return\n        }\n\n        profile.postValue(Resource.Loading())\n        firebaseDatabase.getUser().addSnapshotListener { value, error ->\n            if (error != null)\n                profile.postValue(Resource.Error(error.message))\n            else\n                profile.postValue(Resource.Success(value?.toObject(User::class.java)))\n\n        }\n    }\n\n    fun uploadProfileImage(image: ByteArray) {\n        Log.d(\"ViewModel\", \"Image byte array size: ${image.size}\")\n        uploadProfileImage.postValue(Resource.Loading())\n        val name = UUID.nameUUIDFromBytes(image).toString()\n        Log.d(\"ViewModel\", \"Generated UUID: $name\")\n\n        firebaseDatabase.uploadUserProfileImage(image, name).addOnCompleteListener {\n            if (it.isSuccessful) {\n                Log.d(\"ViewModel\", \"Upload successful with name: $name\")\n                uploadProfileImage.postValue(Resource.Success(name))\n            } else {\n                Log.e(\"ViewModel\", \"Upload failed: ${it.exception}\")\n                uploadProfileImage.postValue(Resource.Error(it.exception.toString()))\n            }\n        }\n    }\n\n\n    fun updateInformation(firstName: String, lastName: String, email: String, imageName: String) {\n        updateUserInformation.postValue(Resource.Loading())\n\n        firebaseDatabase.getImageUrl(firstName, lastName, email, imageName) { user, exception ->\n\n            if (exception != null)\n                updateUserInformation.postValue(Resource.Error(exception))\n                    .also { Log.d(\"test1\", \"up\") }\n            else\n                user?.let {\n                    onUpdateInformation(user).also { Log.d(\"test1\", \"down\") }\n                }\n        }\n    }\n\n    private fun onUpdateInformation(user: User) {\n        firebaseDatabase.updateUserInformation(user).addOnCompleteListener {\n            if (it.isSuccessful)\n                updateUserInformation.postValue(Resource.Success(user))\n            else\n                updateUserInformation.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n    fun getUserOrders() {\n        userOrders.postValue(Resource.Loading())\n        firebaseDatabase.getUserOrders().addOnCompleteListener {\n            if (it.isSuccessful)\n                userOrders.postValue(Resource.Success(it.result?.toObjects(Order::class.java)))\n            else\n                userOrders.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun resetPassword(email: String) {\n        passwordReset.postValue(Resource.Loading())\n        firebaseDatabase.resetPassword(email).addOnCompleteListener {\n            if (it.isSuccessful)\n                passwordReset.postValue(Resource.Success(email))\n            else\n                passwordReset.postValue(Resource.Error(it.exception.toString()))\n        }\n    }\n\n    fun getOrderAddressAndProducts(order: Order) {\n        orderAddress.postValue(Resource.Loading())\n        orderProducts.postValue(Resource.Loading())\n        firebaseDatabase.getOrderAddressAndProducts(order, { address, aError ->\n            if (aError != null)\n                orderAddress.postValue(Resource.Error(aError))\n            else\n                orderAddress.postValue(Resource.Success(address))\n        }, { products, pError ->\n\n            if (pError != null)\n                orderProducts.postValue(Resource.Error(pError))\n            else\n                orderProducts.postValue(Resource.Success(products))\n\n        })\n    }\n\n    fun searchProducts(searchQuery: String) {\n        search.postValue(Resource.Loading())\n        firebaseDatabase.searchProducts(searchQuery).addOnCompleteListener {\n            if (it.isSuccessful) {\n                val productsList = it.result!!.toObjects(Product::class.java)\n                search.postValue(Resource.Success(productsList))\n\n            } else\n                search.postValue(Resource.Error(it.exception.toString()))\n\n        }\n    }\n\n    private var categoriesSafe: List<Category>? = null\n    fun getCategories() {\n        if(categoriesSafe != null){\n            categories.postValue(Resource.Success(categoriesSafe))\n            return\n        }\n        categories.postValue(Resource.Loading())\n        firebaseDatabase.getCategories().addOnCompleteListener {\n            if (it.isSuccessful) {\n                val categoriesList = it.result!!.toObjects(Category::class.java)\n                categoriesSafe = categoriesList\n                categories.postValue(Resource.Success(categoriesList))\n            } else\n                categories.postValue(Resource.Error(it.exception.toString()))\n        }\n\n\n    }\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt b/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt
---- a/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/java/com/example/kleine/viewmodel/shopping/ShoppingViewModel.kt	(date 1695475418610)
-@@ -102,14 +102,13 @@
-         getHomeProduct()
-     }
- 
--
-     // Fetch Materials from Firebase
-     fun getMaterials() {
-         _materialsLiveData.postValue(Resource.Loading())
- 
-         firebaseDatabase.getMaterials(10)
--            .addOnSuccessListener { documents ->
--                val materials = documents.toObjects(Material::class.java)
-+            .addOnSuccessListener { materials ->
-+                // materials is already a List<Material>
-                 _materialsLiveData.postValue(Resource.Success(materials))
-             }
-             .addOnFailureListener { exception ->
-@@ -119,6 +118,7 @@
- 
- 
- 
-+
-     private var furnitureProducts: List<Product>? = null
-     fun getFurniture(size: Int = 0) {
-         if (furnitureProducts != null && size == 0) {
-Index: app/src/main/res/navigation/shopping_nav_graph.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/shopping_nav_graph\"\n    app:startDestination=\"@id/homeFragment\">\n\n    <fragment\n        android:id=\"@+id/homeFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.HomeFragment\"\n        android:label=\"fragment_home\"\n        tools:layout=\"@layout/fragment_home\">\n        <action\n            android:id=\"@+id/action_homeFragment_to_searchFragment\"\n            app:destination=\"@id/searchFragment\"\n            app:popUpTo=\"@id/homeFragment\" />\n        <argument\n            android:name=\"position\"\n            app:argType=\"integer\"\n            android:defaultValue=\"0\" />\n    </fragment>\n\n    <action\n        android:id=\"@+id/action_homeFragment_to_materialDetailsFragment\"\n        app:destination=\"@id/materialDetailsFragment\"\n        app:enterAnim=\"@anim/nav_default_enter_anim\"\n        app:exitAnim=\"@anim/nav_default_exit_anim\"\n        app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n        app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n\n\n    <fragment\n        android:id=\"@+id/materialDetailsFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.MaterialPreviewFragment\"\n        android:label=\"Material Details\">\n\n        <argument\n            android:name=\"material\"\n            app:argType=\"com.example.kleine.model.Material\"\n            android:defaultValue=\"@null\"\n            app:nullable=\"true\" />\n\n\n    </fragment>\n\n\n    <fragment\n        android:id=\"@+id/searchFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.SearchFragment\"\n        android:label=\"fragment_search\"\n        tools:layout=\"@layout/fragment_search\">\n\n        <action\n            android:id=\"@+id/action_searchFragment_to_homeFragment\"\n            app:destination=\"@id/homeFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/profileFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.ProfileFragment\"\n        android:label=\"fragment_profile\"\n        tools:layout=\"@layout/fragment_profile\">\n        <action\n            android:id=\"@+id/action_profileFragment_to_billingFragment\"\n            app:destination=\"@id/billingFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_editUserInformation\"\n            app:destination=\"@id/editUserInformation\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_allOrdersFragment\"\n            app:destination=\"@id/allOrdersFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_languageFragment\"\n            app:destination=\"@id/languageFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_viewPartnershipFragment\"\n            app:destination=\"@id/viewPartnershipFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_helpFragment\"\n            app:destination=\"@id/helpFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_joinPartnerFragment\"\n            app:destination=\"@id/joinPartnerFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_adminDashboardFragment\"\n            app:destination=\"@id/adminDashboardFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_tempCommentFragment\"\n            app:destination=\"@id/tempCommentFragment\">\n            <argument\n                android:name=\"documentId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n        </action>\n\n    </fragment>\n    <fragment\n        android:id=\"@+id/cartFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.CartFragment\"\n        android:label=\"fragment_cart\"\n        tools:layout=\"@layout/fragment_cart\">\n\n        <action\n            android:id=\"@+id/action_cartFragment_to_billingFragment\"\n            app:destination=\"@id/billingFragment\" />\n    </fragment>\n\n    <fragment\n        android:id=\"@+id/billingFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.BillingFragment\"\n        android:label=\"fragment_billing\"\n        tools:layout=\"@layout/fragment_billing\">\n        <action\n            android:id=\"@+id/action_billingFragment_to_addressFragment\"\n            app:destination=\"@id/addressFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\" />\n        <argument\n            android:name=\"clickFlag\"\n            app:argType=\"string\" />\n        <argument\n            android:name=\"price\"\n            android:defaultValue=\"null\"\n            app:argType=\"string\"\n            app:nullable=\"true\" />\n        <argument\n            android:name=\"products\"\n            android:defaultValue=\"@null\"\n            app:argType=\"com.example.kleine.model.CartProductsList\"\n            app:nullable=\"true\" />\n        <action\n            android:id=\"@+id/action_billingFragment_to_orderCompletion\"\n            app:destination=\"@id/orderCompletion\"\n            app:popUpTo=\"@id/billingFragment\"\n            app:popUpToInclusive=\"true\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/addressFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.AddressFragment\"\n        android:label=\"fragment_address\"\n        tools:layout=\"@layout/fragment_address\">\n\n        <argument\n            android:name=\"address\"\n            android:defaultValue=\"@null\"\n            app:argType=\"com.example.kleine.model.Address\"\n            app:nullable=\"true\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/orderCompletion\"\n        android:name=\"com.example.kleine.fragments.shopping.OrderCompletion\"\n        android:label=\"fragment_order_completion\"\n        tools:layout=\"@layout/fragment_order_completion\">\n        <argument\n            android:name=\"order_completion_flag\"\n            app:argType=\"string\" />\n        <argument\n            android:name=\"orderNumber\"\n            android:defaultValue=\"null\"\n            app:argType=\"string\"\n            app:nullable=\"true\" />\n        <action\n            android:id=\"@+id/action_orderCompletion_to_orderDetails\"\n            app:destination=\"@id/orderDetails\" />\n        <argument\n            android:name=\"order\"\n            app:argType=\"com.example.kleine.model.Order\"\n            app:nullable=\"true\"\n            android:defaultValue=\"@null\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/editUserInformation\"\n        android:name=\"com.example.kleine.fragments.settings.EditUserInformationFragment\"\n        android:label=\"fragment_edit_user_information\"\n        tools:layout=\"@layout/fragment_edit_user_information\">\n        <argument\n            android:name=\"user\"\n            app:argType=\"com.example.kleine.model.User\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/allOrdersFragment\"\n        android:name=\"com.example.kleine.fragments.settings.AllOrdersFragment\"\n        android:label=\"fragment_all_orders\"\n        tools:layout=\"@layout/fragment_all_orders\" >\n        <action\n            android:id=\"@+id/action_allOrdersFragment_to_orderDetails\"\n            app:destination=\"@id/orderDetails\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/orderDetails\"\n        android:name=\"com.example.kleine.fragments.settings.OrderDetails\"\n        android:label=\"fragment_order_details\"\n        tools:layout=\"@layout/fragment_order_details\" >\n        <argument\n            android:name=\"order\"\n            app:argType=\"com.example.kleine.model.Order\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/languageFragment\"\n        android:name=\"com.example.kleine.fragments.settings.LanguageFragment\"\n        android:label=\"fragment_language\"\n        tools:layout=\"@layout/fragment_language\" />\n    <fragment\n        android:id=\"@+id/viewPartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.ViewPartnershipFragment\"\n        android:label=\"fragment_view_partnership\"\n        tools:layout=\"@layout/fragment_view_partnership\">\n        <action\n            android:id=\"@+id/action_viewPartnershipFragment_to_partnershipViewMaterialFragment\"\n            app:destination=\"@id/partnershipViewMaterialFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_viewPartnershipFragment_to_updatePartnershipFragment\"\n            app:destination=\"@id/updatePartnershipFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/helpFragment\"\n        android:name=\"com.example.kleine.fragments.settings.HelpFragment\"\n        android:label=\"HelpFragment\"\n        tools:layout=\"@layout/fragment_help\"/>\n    <fragment\n        android:id=\"@+id/partnershipViewMaterialFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialFragment\"\n        android:label=\"fragment_partnership_view_material\"\n        tools:layout=\"@layout/fragment_partnership_view_material\" >\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_partnershipViewMaterialDetailFragment\"\n            app:destination=\"@id/partnershipViewMaterialDetailFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\">\n            <argument\n                android:name=\"documentId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n        </action>\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_setsFragment\"\n            app:destination=\"@id/setsFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/partnershipViewMaterialDetailFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialDetailFragment\"\n        android:label=\"fragment_partnership_view_material_detail\"\n        tools:layout=\"@layout/fragment_partnership_view_material_detail\" >\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialDetailFragment_to_replyCommentFragment\"\n            app:destination=\"@id/replyCommentFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/replyCommentFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.ReplyCommentFragment\"\n        android:label=\"fragment_reply_comment\"\n        tools:layout=\"@layout/fragment_reply_comment\" />\n    <fragment\n        android:id=\"@+id/joinPartnerFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.JoinPartnerFragment\"\n        android:label=\"fragment_join__partner_\"\n        tools:layout=\"@layout/fragment_join__partner_\" />\n    <fragment\n        android:id=\"@+id/adminDashboardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminDashboardFragment\"\n        android:label=\"fragment_admin_dashboard\"\n        tools:layout=\"@layout/fragment_admin_dashboard\" >\n        <action\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewPartnershipFragment\"\n            app:destination=\"@id/adminViewPartnershipFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n        <action\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewRewardFragment\"\n            app:destination=\"@id/adminViewRewardFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/adminViewPartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipFragment\"\n        android:label=\"fragment_admin_view_partnership\"\n        tools:layout=\"@layout/fragment_admin_view_partnership\" >\n        <action\n            android:id=\"@+id/action_adminViewPartnershipFragment_to_adminViewPartnershipRequestFragment\"\n            app:destination=\"@id/adminViewPartnershipRequestFragment\" />\n    </fragment>\n\n\n    <fragment\n        android:id=\"@+id/adminViewPartnershipRequestFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipRequestFragment\"\n        android:label=\"fragment_admin_view_partnership_request\"\n        tools:layout=\"@layout/fragment_admin_view_partnership_request\" />\n    <fragment\n        android:id=\"@+id/updatePartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.UpdatePartnershipFragment\"\n        android:label=\"UpdatePartnershipFragment\"\n        tools:layout=\"@layout/fragment_update_partnership\"/>\n\n<!--    quiz-->\n    <fragment\n        android:id=\"@+id/setsFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.SetsFragment\"\n        android:label=\"SetsFragment\"\n        tools:layout=\"@layout/fragment_sets\" >\n        <action\n            android:id=\"@+id/action_setsFragment_to_questionFragment\"\n            app:destination=\"@id/questionFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/questionFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.QuestionFragment\"\n        android:label=\"QuestionFragment\"\n        tools:layout=\"@layout/fragment_question\" >\n        <action\n            android:id=\"@+id/action_questionFragment_to_addUpdateQuestionFragment\"\n            app:destination=\"@id/addUpdateQuestionFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/addUpdateQuestionFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.AddUpdateQuestionFragment\"\n        android:label=\"AddUpdateQuestionFragment\"\n        tools:layout=\"@layout/fragment_add_update_question\" />\n    <fragment\n        android:id=\"@+id/quizFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.QuizFragment\"\n        android:label=\"QuizFragment\"\n        tools:layout=\"@layout/fragment_quiz\" >\n        <action\n            android:id=\"@+id/action_quizFragment_to_playFragment\"\n            app:destination=\"@id/playFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/playFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.PlayFragment\"\n        android:label=\"PlayFragment\"\n        tools:layout=\"@layout/fragment_play\" >\n        <action\n            android:id=\"@+id/action_playFragment_to_resultFragment\"\n            app:destination=\"@id/resultFragment\" />\n        <action\n            android:id=\"@+id/action_playFragment_to_quizFragment\"\n            app:destination=\"@id/quizFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/resultFragment\"\n        android:name=\"com.example.kleine.fragments.quiz.ResultFragment\"\n        android:label=\"ResultFragment\"\n        tools:layout=\"@layout/fragment_result\" >\n        <action\n            android:id=\"@+id/action_resultFragment_to_quizFragment\"\n            app:destination=\"@id/quizFragment\" />\n    </fragment>\n    <!--    end quiz-->\n\n<!--    reward-->\n    <fragment\n        android:id=\"@+id/adminViewRewardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewRewardFragment\"\n        android:label=\"AdminViewRewardFragment\"\n        tools:layout=\"@layout/fragment_admin_view_reward\">\n        <action\n            android:id=\"@+id/action_adminViewRewardFragment_to_adminAddRewardFragment\"\n            app:destination=\"@id/adminAddRewardFragment\" />\n        <action\n            android:id=\"@+id/action_adminViewRewardFragment_to_adminUpdateRewardFragment\"\n            app:destination=\"@id/adminUpdateRewardFragment\" >\n            <argument\n            android:name=\"documentId\"\n            app:argType=\"string\" />\n        </action>\n    </fragment>\n    <fragment\n        android:id=\"@+id/adminAddRewardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminAddRewardFragment\"\n        android:label=\"AdminAddRewardFragment\"\n        tools:layout=\"@layout/fragment_admin_add_reward\"/>\n    <fragment\n        android:id=\"@+id/adminUpdateRewardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminUpdateRewardFragment\"\n        android:label=\"AdminUpdateRewardFragment\"\n        tools:layout=\"@layout/fragment_admin_update_reward\"/>\n<!--    end reward-->\n    <fragment\n        android:id=\"@+id/tempCommentFragment\"\n        android:name=\"com.example.kleine.fragments.TempCommentFragment\"\n        android:label=\"fragment_temp_comment\"\n        tools:layout=\"@layout/fragment_temp_comment\"/>\n</navigation>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/navigation/shopping_nav_graph.xml b/app/src/main/res/navigation/shopping_nav_graph.xml
---- a/app/src/main/res/navigation/shopping_nav_graph.xml	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/res/navigation/shopping_nav_graph.xml	(date 1695475418384)
-@@ -5,11 +5,15 @@
-     android:id="@+id/shopping_nav_graph"
-     app:startDestination="@id/homeFragment">
- 
-+
-+
-+
-     <fragment
-         android:id="@+id/homeFragment"
-         android:name="com.example.kleine.fragments.shopping.HomeFragment"
-         android:label="fragment_home"
-         tools:layout="@layout/fragment_home">
-+
-         <action
-             android:id="@+id/action_homeFragment_to_searchFragment"
-             app:destination="@id/searchFragment"
-@@ -18,29 +22,25 @@
-             android:name="position"
-             app:argType="integer"
-             android:defaultValue="0" />
--    </fragment>
- 
--    <action
--        android:id="@+id/action_homeFragment_to_materialDetailsFragment"
--        app:destination="@id/materialDetailsFragment"
--        app:enterAnim="@anim/nav_default_enter_anim"
--        app:exitAnim="@anim/nav_default_exit_anim"
--        app:popEnterAnim="@anim/nav_default_pop_enter_anim"
--        app:popExitAnim="@anim/nav_default_pop_exit_anim"/>
-+        <action
-+            android:id="@+id/action_homeFragment_to_materialDetailsFragment"
-+            app:destination="@id/materialDetailsFragment"
-+            app:enterAnim="@anim/nav_default_enter_anim"
-+            app:exitAnim="@anim/nav_default_exit_anim"
-+            app:popEnterAnim="@anim/nav_default_pop_enter_anim"
-+            app:popExitAnim="@anim/nav_default_pop_exit_anim"/>
-+    </fragment>
- 
- 
-     <fragment
-         android:id="@+id/materialDetailsFragment"
-         android:name="com.example.kleine.fragments.shopping.MaterialPreviewFragment"
--        android:label="Material Details">
--
-+        tools:layout="@layout/fragment_product_preview">
-         <argument
-             android:name="material"
-             app:argType="com.example.kleine.model.Material"
--            android:defaultValue="@null"
-             app:nullable="true" />
--
--
-     </fragment>
- 
- 
-@@ -59,6 +59,8 @@
-         android:name="com.example.kleine.fragments.shopping.ProfileFragment"
-         android:label="fragment_profile"
-         tools:layout="@layout/fragment_profile">
-+
-+
-         <action
-             android:id="@+id/action_profileFragment_to_billingFragment"
-             app:destination="@id/billingFragment"
-@@ -222,6 +224,14 @@
-             app:exitAnim="@anim/to_left"
-             app:popEnterAnim="@anim/from_left"
-             app:popExitAnim="@anim/to_right"/>
-+
-+        <action
-+            android:id="@+id/action_allOrdersFragment_to_materialDetailsFragment"
-+            app:destination="@id/materialDetailsFragment"
-+            app:enterAnim="@anim/from_right"
-+            app:exitAnim="@anim/to_left"
-+            app:popEnterAnim="@anim/from_left"
-+            app:popExitAnim="@anim/to_right"/>
-     </fragment>
-     <fragment
-         android:id="@+id/orderDetails"
-Index: app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport com.example.kleine.databinding.FragmentProductPreviewBinding\nimport com.example.kleine.model.Material\n\nclass MaterialPreviewFragment : Fragment() {\n    private var _binding: FragmentProductPreviewBinding? = null\n    private val binding get() = _binding!!\n    private var material: Material? = null\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        _binding = FragmentProductPreviewBinding.inflate(inflater, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        // Retrieve the passed argument\n        material = arguments?.getParcelable(\"material\")\n\n        // Check if the material is not null\n        if (material != null) {\n            // Bind the material data to the views using data binding\n            binding.productModel = material\n        } else {\n            // Handle the case where material is null\n            // For instance, you can show a message to the user or navigate back\n            fragmentManager?.popBackStack()\n\n        }\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt	(date 1695475418402)
-@@ -1,18 +1,35 @@
- package com.example.kleine.fragments.shopping
- 
- import android.os.Bundle
-+import android.util.Log
- import android.view.LayoutInflater
- import android.view.View
- import android.view.ViewGroup
-+import android.widget.Toast
- import androidx.fragment.app.Fragment
-+import androidx.navigation.Navigation.findNavController
-+import androidx.navigation.fragment.findNavController
-+import androidx.viewpager2.widget.ViewPager2
-+import com.example.kleine.R
-+import com.example.kleine.adapters.viewpager.ViewPager2Images
- import com.example.kleine.databinding.FragmentProductPreviewBinding
-+import com.example.kleine.model.Enrollment
- import com.example.kleine.model.Material
-+import com.google.firebase.auth.FirebaseAuth
-+import com.google.firebase.firestore.FirebaseFirestore
-+
- 
- class MaterialPreviewFragment : Fragment() {
-     private var _binding: FragmentProductPreviewBinding? = null
-     private val binding get() = _binding!!
-     private var material: Material? = null
- 
-+    private val viewPagerAdapter = ViewPager2Images()
-+
-+    private val firebaseAuth: FirebaseAuth = FirebaseAuth.getInstance()
-+    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()
-+
-+
-     override fun onCreateView(
-         inflater: LayoutInflater, container: ViewGroup?,
-         savedInstanceState: Bundle?
-@@ -23,21 +40,77 @@
- 
-     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-         super.onViewCreated(view, savedInstanceState)
-+        onEnrollClick()
-+
-+
-+        // Set up the ViewPager2
-+        binding.viewpager2Images.adapter = viewPagerAdapter
- 
-         // Retrieve the passed argument
-         material = arguments?.getParcelable("material")
- 
--        // Check if the material is not null
--        if (material != null) {
--            // Bind the material data to the views using data binding
--            binding.productModel = material
--        } else {
--            // Handle the case where material is null
--            // For instance, you can show a message to the user or navigate back
--            fragmentManager?.popBackStack()
-+        material?.let { mat ->
-+            binding.productModel = mat
-+
-+            // Convert the single imageUrl into a list and submit to the adapter
-+            viewPagerAdapter.differ.submitList(listOf(mat.imageUrl))
- 
-+        } ?: run {
-+            Log.e("MaterialPreviewFragment", "Material is null!")
-         }
-+
-+        // Assuming you have one image per material for now
-+        // If there are multiple images, then update this value accordingly
-+        // binding.circleIndicator.indicatorItemCount = 1
-+        // Update: Commented the above line as it might not be available based on the library version.
-+
-+        binding.viewpager2Images.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {
-+            override fun onPageSelected(position: Int) {
-+                super.onPageSelected(position)
-+                // Update the CircleIndicator's selected position
-+                // You might need to check if such a method is available in your library version
-+                // binding.circleIndicator.setSelection(position)
-+                // Update: Commented the above line as it might not be available based on the library version.
-+            }
-+        })
-     }
-+
-+
-+
-+    private fun onEnrollClick() {
-+        binding.btnEnroll.setOnClickListener {
-+            Log.d("MaterialPreviewFragment", "Button Clicked")
-+
-+            // Get the current user ID
-+            val userId = firebaseAuth.currentUser?.uid ?: run {
-+                Toast.makeText(context, "User not logged in!", Toast.LENGTH_SHORT).show()
-+                return@setOnClickListener
-+            }
-+
-+            // Get the selected material ID
-+            val materialId = material?.id ?: run {
-+                Toast.makeText(context, "Material ID is null!", Toast.LENGTH_SHORT).show()
-+                return@setOnClickListener
-+            }
-+
-+            // Create a new Enrollment object
-+            val enrollment = Enrollment(userId = userId, materialId = materialId)
-+
-+            // Save the enrollment to Firebase Firestore
-+            firestore.collection("enrollments").add(enrollment)
-+                .addOnSuccessListener {
-+                    Toast.makeText(context, "Successfully enrolled in the course!", Toast.LENGTH_SHORT).show()
-+
-+                    // Navigate back to HomeFragment
-+                    findNavController().navigateUp()
-+                }
-+                .addOnFailureListener { exception ->
-+                    Log.w("MaterialPreviewFragment", "Error adding document", exception)
-+                    Toast.makeText(context, "Error enrolling in the course!", Toast.LENGTH_SHORT).show()
-+                }
-+        }
-+    }
-+
- 
-     override fun onDestroyView() {
-         super.onDestroyView()
-Index: app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport androidx.navigation.fragment.findNavController\nimport com.bumptech.glide.Glide\nimport com.example.kleine.BuildConfig\nimport com.example.kleine.R\nimport com.example.kleine.activities.LunchActivity\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.databinding.FragmentProfileBinding\nimport com.example.kleine.model.User\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.UPDATE_ADDRESS_FLAG\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport com.google.android.material.snackbar.Snackbar\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.firestore.FirebaseFirestore\n\n\nclass ProfileFragment : Fragment() {\n    val TAG = \"ProfileFragment\"\n    private lateinit var binding: FragmentProfileBinding\n    private lateinit var viewModel: ShoppingViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getUser()\n    }\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentProfileBinding.inflate(inflater, container, false)\n        val currentUser = FirebaseAuth.getInstance().currentUser\n\n        if (currentUser != null) {\n            val userId = currentUser.uid\n            val db = FirebaseFirestore.getInstance()\n            db.collection(\"users\").document(userId)\n                .get()\n                .addOnSuccessListener { document ->\n                    if (document != null) {\n                        val status = document.getString(\"status\")\n                        Log.d(TAG, \"User Status: $status\")\n                        if (status == \"ADMINS\") {\n                            // Admin user, show the fragment\n                            binding.adminOrders.visibility = View.VISIBLE\n                            binding.linearAdmin.visibility = View.VISIBLE\n                            binding.linearJoinPartnership.visibility = View.GONE\n                        }else if(status == \"PARTNERS\"){\n                            binding.adminOrders.visibility = View.GONE\n                            binding.linearAdmin.visibility = View.GONE\n                            binding.linearJoinPartnership.visibility = View.GONE\n                            binding.linearViewPartnership.visibility = View.VISIBLE\n                        }else{\n                            binding.linearJoinPartnership.visibility = View.VISIBLE\n                            binding.linearViewPartnership.visibility = View.GONE\n                            binding.adminOrders.visibility = View.GONE\n                            binding.linearAdmin.visibility = View.GONE\n                        }\n                    }\n                }\n        }\n\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        onHomeClick()\n        onLogoutClick()\n        onBillingAndAddressesClick()\n        onProfileClick()\n        onAllOrderClick()\n        onTrackOrderClick()\n        onJoinPartnershipCLick()\n        onViewPartnershipClick()\n        onAdminClick()\n        onHelpClick()\n\n        observeProfile()\n        binding.tvVersionCode.text =\n            \"${resources.getText(R.string.g_version)} ${BuildConfig.VERSION_NAME}\"\n\n\n        onTempCommentClick()\n    }\n\n    private fun onTempCommentClick() {\n        binding.linearComment.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"documentId\", \"5VlLkBQaULeJlawqN8Rq\")\n            findNavController().navigate(R.id.action_profileFragment_to_tempCommentFragment, bundle)\n        }\n    }\n\n    private fun onHelpClick() {\n        binding.linearHelp.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_helpFragment)\n        }\n    }\n\n    private fun onAdminClick() {\n        binding.linearAdmin.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_adminDashboardFragment)\n        }\n    }\n\n\n    private fun onJoinPartnershipCLick() {\n        binding.linearJoinPartnership.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_joinPartnerFragment)\n        }\n    }\n    private fun onViewPartnershipClick() {\n        binding.linearViewPartnership.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_viewPartnershipFragment)\n        }\n    }\n\n    private fun onTrackOrderClick() {\n        binding.linearTrackOrder.setOnClickListener {\n            val snackBar = requireActivity().findViewById<CoordinatorLayout>(R.id.snackBar_coordinator)\n            Snackbar.make(snackBar,resources.getText(R.string.g_coming_soon),Snackbar.LENGTH_SHORT).show()\n        }\n    }\n\n    private fun onAllOrderClick() {\n        binding.allOrders.setOnClickListener {\n            findNavController().navigate(R.id.action_profileFragment_to_allOrdersFragment)\n        }\n    }\n\n    private fun onProfileClick() {\n        binding.constraintProfile.setOnClickListener {\n            user?.let {\n                val bundle = Bundle()\n                bundle.putParcelable(\"user\",user)\n                findNavController().navigate(R.id.action_profileFragment_to_editUserInformation,bundle)\n            }\n        }\n\n\n    }\n\n    var user: User?=null\n    private fun observeProfile() {\n        viewModel.profile.observe(viewLifecycleOwner) { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@observe\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n                    val user = response.data\n                    this.user = user\n                    binding.apply {\n                        tvUserName.text = user?.firstName + \" \" + user?.lastName\n                        Glide.with(requireView()).load(user?.imagePath)\n                            .error(R.drawable.ic_default_profile_picture).into(binding.imgUser)\n                    }\n                    return@observe\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Toast.makeText(\n                        activity,\n                        resources.getText(R.string.error_occurred),\n                        Toast.LENGTH_SHORT\n                    ).show()\n                    Log.e(TAG, response.message.toString())\n                    return@observe\n                }\n            }\n        }\n    }\n\n    private fun hideLoading() {\n        binding.apply {\n            binding.progressbarSettings.visibility = View.GONE\n            constraintParnet.visibility = View.VISIBLE\n        }\n    }\n\n    private fun showLoading() {\n        binding.apply {\n            binding.progressbarSettings.visibility = View.VISIBLE\n            constraintParnet.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun onBillingAndAddressesClick() {\n        binding.linearBilling.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"clickFlag\", UPDATE_ADDRESS_FLAG)\n            findNavController().navigate(R.id.action_profileFragment_to_billingFragment, bundle)\n        }\n    }\n\n    private fun onLogoutClick() {\n\n        binding.linearOut.setOnClickListener {\n            FirebaseAuth.getInstance().signOut()\n            val intent = Intent(context, LunchActivity::class.java)\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\n            startActivity(intent)\n        }\n    }\n\n    private fun onHomeClick() {\n        val btm = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        btm?.menu?.getItem(0)?.setOnMenuItemClickListener {\n            activity?.onBackPressed()\n            true\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        val bottomNavigation = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNavigation?.visibility = View.VISIBLE\n    }\n\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/ProfileFragment.kt	(date 1695475418429)
-@@ -10,12 +10,17 @@
- import android.widget.Toast
- import androidx.coordinatorlayout.widget.CoordinatorLayout
- import androidx.navigation.fragment.findNavController
-+import androidx.recyclerview.widget.LinearLayoutManager
- import com.bumptech.glide.Glide
- import com.example.kleine.BuildConfig
- import com.example.kleine.R
- import com.example.kleine.activities.LunchActivity
- import com.example.kleine.activities.ShoppingActivity
-+import com.example.kleine.adapters.recyclerview.AllOrdersAdapter
-+import com.example.kleine.adapters.recyclerview.MaterialAdapter
- import com.example.kleine.databinding.FragmentProfileBinding
-+import com.example.kleine.model.Enrollment
-+import com.example.kleine.model.Material
- import com.example.kleine.model.User
- import com.example.kleine.resource.Resource
- import com.example.kleine.util.Constants.Companion.UPDATE_ADDRESS_FLAG
-@@ -30,6 +35,11 @@
-     val TAG = "ProfileFragment"
-     private lateinit var binding: FragmentProfileBinding
-     private lateinit var viewModel: ShoppingViewModel
-+    private lateinit var materialAdapter: MaterialAdapter
-+
-+    private lateinit var enrolledMaterials: List<Material>
-+
-+
- 
-     override fun onCreate(savedInstanceState: Bundle?) {
-         super.onCreate(savedInstanceState)
-@@ -79,6 +89,8 @@
-     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-         super.onViewCreated(view, savedInstanceState)
- 
-+        materialAdapter = MaterialAdapter()
-+
-         onHomeClick()
-         onLogoutClick()
-         onBillingAndAddressesClick()
-@@ -137,12 +149,69 @@
-         }
-     }
- 
-+
-+
-     private fun onAllOrderClick() {
-         binding.allOrders.setOnClickListener {
-+            fetchUserEnrollments()
-             findNavController().navigate(R.id.action_profileFragment_to_allOrdersFragment)
-         }
-     }
- 
-+
-+
-+    private fun fetchUserEnrollments() {
-+        val userId = FirebaseAuth.getInstance().currentUser?.uid
-+        if (userId != null) {
-+            val firestore = FirebaseFirestore.getInstance()
-+            firestore.collection("enrollments")
-+                .whereEqualTo("userId", userId)
-+                .get()
-+                .addOnSuccessListener { querySnapshot ->
-+                    val enrollments = querySnapshot.documents.mapNotNull { document ->
-+                        document.toObject(Enrollment::class.java)
-+                    }
-+                    fetchMaterialsForEnrollments(enrollments)
-+                }
-+                .addOnFailureListener { exception ->
-+                    Log.e(TAG, "Error fetching user enrollments", exception)
-+                    // Handle the error appropriately
-+                }
-+        } else {
-+            // Handle the case where the user is not logged in
-+        }
-+    }
-+
-+    private fun fetchMaterialsForEnrollments(enrollments: List<Enrollment>) {
-+        val firestore = FirebaseFirestore.getInstance()
-+        val materialIds = enrollments.map { it.materialId }
-+
-+        firestore.collection("Materials")
-+            .whereIn("id", materialIds)
-+            .get()
-+            .addOnSuccessListener { querySnapshot ->
-+                val materials = querySnapshot.documents.mapNotNull { document ->
-+                    document.toObject(Material::class.java)
-+                }
-+                displayMaterials(materials)
-+            }
-+            .addOnFailureListener { exception ->
-+                Log.e(TAG, "Error fetching materials", exception)
-+                // Handle the error appropriately
-+            }
-+    }
-+
-+
-+
-+    private fun displayMaterials(materials: List<Material>) {
-+        // Update your UI with the fetched materials
-+        // For example, update the RecyclerView Adapter with the materials
-+        materialAdapter.differ.submitList(materials)
-+    }
-+
-+
-+
-+
-     private fun onProfileClick() {
-         binding.constraintProfile.setOnClickListener {
-             user?.let {
-Index: app/src/main/res/layout/recycler_view_all_orders_item.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/parent_linear\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"8dp\">\n\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <ImageView\n            android:id=\"@+id/img_order_state\"\n            android:layout_width=\"@dimen/_10sdp\"\n            android:layout_height=\"@dimen/_10sdp\"\n            android:layout_gravity=\"center\"\n            android:src=\"@drawable/ic_circle\" />\n\n        <TextView\n            android:id=\"@+id/tv_order_id\"\n            style=\"@style/MediumTextViewThin\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginStart=\"5dp\"\n            android:layout_weight=\"1\"\n            tools:text=\"@tools:sample/lorem\" />\n\n        <ImageView\n            android:layout_width=\"@dimen/_15sdp\"\n            android:layout_height=\"@dimen/_15sdp\"\n            android:src=\"@drawable/ic_arrow\" />\n\n    </LinearLayout>\n\n    <TextView\n        android:id=\"@+id/tv_order_date\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        tools:text=\"@tools:sample/lorem\" />\n\n    <View\n        android:id=\"@+id/line\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"@dimen/_1sdp\"\n        android:layout_marginTop=\"15dp\"\n        android:background=\"@drawable/line\"\n        android:backgroundTint=\"@color/g_icon_tint\" />\n</LinearLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/recycler_view_all_orders_item.xml b/app/src/main/res/layout/recycler_view_all_orders_item.xml
---- a/app/src/main/res/layout/recycler_view_all_orders_item.xml	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/res/layout/recycler_view_all_orders_item.xml	(date 1695475418791)
-@@ -1,52 +1,62 @@
- <?xml version="1.0" encoding="utf-8"?>
--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
--    xmlns:tools="http://schemas.android.com/tools"
--    android:id="@+id/parent_linear"
--    android:layout_width="match_parent"
--    android:layout_height="wrap_content"
--    android:orientation="vertical"
--    android:padding="8dp">
-+<layout xmlns:android="http://schemas.android.com/apk/res/android"
-+    xmlns:tools="http://schemas.android.com/tools">
-+
-+    <data>
-+        <variable
-+            name="productModel"
-+            type="com.example.kleine.model.Material" />
-+    </data>
-+
-+    <LinearLayout
-+        android:id="@+id/parent_linear"
-+        android:layout_width="match_parent"
-+        android:layout_height="wrap_content"
-+        android:orientation="vertical"
-+        android:padding="8dp">
- 
--
--    <LinearLayout
--        android:layout_width="match_parent"
--        android:layout_height="wrap_content"
--        android:orientation="horizontal">
-+        <LinearLayout
-+            android:id="@+id/btnAllCourses"
-+            android:layout_width="match_parent"
-+            android:layout_height="wrap_content"
-+            android:orientation="horizontal"
-+            android:clickable="true"
-+            android:focusable="true">
- 
--        <ImageView
--            android:id="@+id/img_order_state"
--            android:layout_width="@dimen/_10sdp"
--            android:layout_height="@dimen/_10sdp"
--            android:layout_gravity="center"
--            android:src="@drawable/ic_circle" />
-+            <ImageView
-+                android:id="@+id/img_order_state"
-+                android:layout_width="@dimen/_10sdp"
-+                android:layout_height="@dimen/_10sdp"
-+                android:layout_gravity="center"
-+                android:src="@drawable/ic_circle" />
- 
--        <TextView
--            android:id="@+id/tv_order_id"
--            style="@style/MediumTextViewThin"
--            android:layout_width="wrap_content"
--            android:layout_height="wrap_content"
--            android:layout_marginStart="5dp"
--            android:layout_weight="1"
--            tools:text="@tools:sample/lorem" />
-+            <TextView
-+                android:id="@+id/tv_order_id"
-+                style="@style/MediumTextViewThin"
-+                android:layout_width="wrap_content"
-+                android:layout_height="wrap_content"
-+                android:layout_marginStart="5dp"
-+                android:layout_weight="1"
-+                android:text="@{productModel.name}" />
- 
--        <ImageView
--            android:layout_width="@dimen/_15sdp"
--            android:layout_height="@dimen/_15sdp"
--            android:src="@drawable/ic_arrow" />
--
--    </LinearLayout>
-+            <ImageView
-+                android:layout_width="@dimen/_15sdp"
-+                android:layout_height="@dimen/_15sdp"
-+                android:src="@drawable/ic_arrow" />
-+        </LinearLayout>
- 
--    <TextView
--        android:id="@+id/tv_order_date"
--        android:layout_width="wrap_content"
--        android:layout_height="wrap_content"
--        tools:text="@tools:sample/lorem" />
-+        <TextView
-+            android:id="@+id/tv_order_date"
-+            android:layout_width="wrap_content"
-+            android:layout_height="wrap_content"
-+            android:text="@{String.valueOf(productModel.desc)}" />
- 
--    <View
--        android:id="@+id/line"
--        android:layout_width="match_parent"
--        android:layout_height="@dimen/_1sdp"
--        android:layout_marginTop="15dp"
--        android:background="@drawable/line"
--        android:backgroundTint="@color/g_icon_tint" />
--</LinearLayout>
-\ No newline at end of file
-+        <View
-+            android:id="@+id/line"
-+            android:layout_width="match_parent"
-+            android:layout_height="@dimen/_1sdp"
-+            android:layout_marginTop="15dp"
-+            android:background="@drawable/line"
-+            android:backgroundTint="@color/g_icon_tint" />
-+    </LinearLayout>
-+</layout>
-Index: app/build.gradle
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>plugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n    id 'com.google.gms.google-services'\n    id 'kotlin-parcelize'\n    id 'androidx.navigation.safeargs.kotlin'\n    id 'dagger.hilt.android.plugin'\n}\n\n\nandroid {\n    compileSdk 31\n\n    defaultConfig {\n        applicationId \"com.example.kleine\"\n        minSdk 21\n        targetSdk 31\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = '1.8'\n    }\n\n    buildFeatures{\n        viewBinding true\n        dataBinding true\n    }\n}\n\ndependencies {\n\n    implementation 'androidx.room:room-common:2.5.2'\n    apply plugin :\"kotlin-kapt\"\n    implementation 'androidx.core:core-ktx:1.7.0'\n    implementation 'androidx.appcompat:appcompat:1.4.1'\n    implementation 'com.google.android.material:material:1.5.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'\n    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'\n\n    testImplementation 'junit:junit:4.+'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\n\n    //intuit\n    implementation 'com.intuit.sdp:sdp-android:1.0.6'\n    implementation 'com.intuit.ssp:ssp-android:1.0.6'\n\n\n    //loading button\n    implementation 'br.com.simplepass:loading-button-android:2.2.0'\n\n    //firebase\n    implementation 'com.google.firebase:firebase-firestore:24.0.1'\n    implementation 'com.google.firebase:firebase-firestore-ktx:24.0.1'\n    implementation 'com.google.firebase:firebase-auth-ktx:21.0.1'\n    implementation 'com.google.firebase:firebase-storage'\n    implementation 'com.google.firebase:firebase-storage-ktx:20.0.0'\n    implementation 'com.google.firebase:firebase-common-ktx:20.0.0'\n    implementation 'com.google.firebase:firebase-messaging-ktx:23.0.0'\n    implementation 'com.firebaseui:firebase-ui-auth:4.3.2'\n\n    //google play services\n    implementation 'com.google.android.gms:play-services-auth:20.1.0'\n\n    //smooth bar\n    implementation 'com.github.ibrahimsn98:SmoothBottomBar:1.7.9'\n\n    //Glide\n    implementation 'com.github.bumptech.glide:glide:4.13.0'\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.0'\n\n    //storage\n    implementation 'com.firebaseui:firebase-ui-storage:8.0.0'\n\n    //circular image\n    implementation 'de.hdodenhof:circleimageview:3.1.0'\n\n    //Navigation and safe args\n    def nav_version = \"2.4.1\"\n    implementation \"androidx.navigation:navigation-fragment-ktx:$nav_version\"\n    implementation \"androidx.navigation:navigation-ui-ktx:$nav_version\"\n\n    //viewpager2 indicatior\n    implementation 'io.github.vejei.viewpagerindicator:viewpagerindicator:1.0.0-alpha.1'\n\n    //lifecycle\n    implementation \"android.arch.lifecycle:extensions:1.1.0\"\n\n    //Firebase coroutines\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1'\n\n    //stepView\n    implementation 'com.shuhart.stepview:stepview:1.5.1'\n\n    //Android Ktx\n    implementation \"androidx.fragment:fragment-ktx:1.4.1\"\n\n    //pdf viewer\n    implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'\n\n\n    //Dagger hilt\n    implementation \"com.google.dagger:hilt-android:2.38.1\"\n    kapt \"com.google.dagger:hilt-compiler:2.38.1\"\n\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/build.gradle b/app/build.gradle
---- a/app/build.gradle	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/build.gradle	(date 1695475418824)
-@@ -95,6 +95,9 @@
-     def nav_version = "2.4.1"
-     implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
-     implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
-+    apply plugin: "androidx.navigation.safeargs.kotlin"
-+
-+
- 
-     //viewpager2 indicatior
-     implementation 'io.github.vejei.viewpagerindicator:viewpagerindicator:1.0.0-alpha.1'
-@@ -119,5 +122,12 @@
-     implementation "com.google.dagger:hilt-android:2.38.1"
-     kapt "com.google.dagger:hilt-compiler:2.38.1"
- 
-+    
- 
-+
-+
-+
-+
-+
-+
- }
-\ No newline at end of file
-Index: app/src/main/res/values/strings.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><resources>\n    <string name=\"app_name\">HELP</string>\n    <string name=\"g_app_name\">HELP</string>\n    <string name=\"g_the_right_address\">In Learning, \\nWe Trust</string>\n\n    <!--    <string name=\"g_for_shopping\">For Shopping</string>-->\n    <!--    <string name=\"g_any_day\">Anyday</string>-->\n\n    <string name=\"g_best_quality\">Knowledge opens the door to a world of opportunities, illuminating the path to progress \\n When this wisdom intertwines with cooperative efforts, we collectively illuminate a brighter, more sustainable future</string>\n    <string name=\"g_start\">Start</string>\n    <!-- TODO: Remove or change this placeholder text -->\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\n    <string name=\"all_your_orders\">All your orders in one \\n saved package</string>\n    <string name=\"g_register\">Register</string>\n    <string name=\"g_let_s_register\">Let\\'s Register</string>\n    <string name=\"g_do_you_have_an_account_log_in\">Do you have an account? log in</string>\n    <string name=\"g_first_name\">First Name</string>\n    <string name=\"g_email\">Email</string>\n    <string name=\"g_second_name\">Last Name</string>\n    <string name=\"g_password\">Password</string>\n    <string name=\"g_don_t_have_an_account_register\">Don\\'t have an account? Register</string>\n    <string name=\"g_let_s_login\">Let\\'s Login</string>\n    <string name=\"g_log_in\">Log in</string>\n    <string name=\"g_google\">Google</string>\n    <string name=\"g_facebook\">Facebook</string>\n    <string name=\"first_name_cant_be_empty\">First name can\\'t be empty</string>\n    <string name=\"last_name_cant_be_empty\">Last name can\\'t be empty</string>\n    <string name=\"email_cant_be_empty\">Email can\\'t be empty</string>\n    <string name=\"password_cant_be_empty\">password can\\'t be empty</string>\n    <string name=\"password_at_least_six\">password should have 6</string>\n    <string name=\"valid_email\">check your email</string>\n    <string name=\"signed_up_successfully\">you have created new account, login now</string>\n    <string name=\"g_home\">Novice</string>\n    <string name=\"g_search\">search</string>\n    <string name=\"g_cart\">Cart</string>\n    <string name=\"g_profile\">profile</string>\n    <string name=\"g_add_to_cart\">Add to cart</string>\n    <string name=\"g_search_now\">Search Now</string>\n    <string name=\"g_best_deals\">Best Deals</string>\n    <string name=\"g_chair\">Beginner</string>\n    <string name=\"g_cupboard\">Intermediate</string>\n    <string name=\"g_table\">Proficient</string>\n    <string name=\"g_accessory\">Advanced</string>\n    <string name=\"g_furniture\">Expert</string>\n    <string name=\"g_enlightening\">Master</string>\n    <string name=\"g_best_products\">Trending Courses</string>\n    <string name=\"g_see_product\">See product</string>\n    <string name=\"g_color\">Color</string>\n    <string name=\"g_size\">Size</string>\n    <string name=\"g_add_to_card\">Enroll Courses</string>\n    <string name=\"g_added\">Added</string>\n    <string name=\"g_already_added\">Product is in your cart</string>\n    <string name=\"g_please_select_color\">Please select color</string>\n    <string name=\"g_please_select_size\">Please select size</string>\n    <string name=\"g_my_cart\">My Course</string>\n    <string name=\"g_checkout\">Checkout</string>\n    <string name=\"g_total\">Total:</string>\n    <string name=\"g_your_shopping_cart_is_empty\">Your Course List \\n Is Empty</string>\n    <string name=\"g_delete_item\">Delete item</string>\n    <string name=\"g_are_you_sure_you_want_to_delete_this_item_from_cart\">Are you sure you want to delete this item from cart ?</string>\n    <string name=\"g_no\">No</string>\n    <string name=\"g_yes\">Yes</string>\n    <string name=\"g_categories\">Categories</string>\n    <string name=\"g_cancel\">Cancel</string>\n    <string name=\"g_payment_methods\">Redeem Reward</string>\n    <string name=\"payment_explanation\">Congratulations on completing one of our courses ! Kindly entered your address to redeem the reward ! </string>\n    <string name=\"g_shipping\">Address</string>\n    <string name=\"g_full_name\">Full Name</string>\n    <string name=\"g_city\">City</string>\n    <string name=\"g_phone\">Phone</string>\n    <string name=\"g_state\">State</string>\n    <string name=\"g_save\">Save</string>\n    <string name=\"g_address\">Address</string>\n    <string name=\"g_address_location_ie_home\">Address Location ie. Home</string>\n    <string name=\"g_update\">Update</string>\n    <string name=\"g_place_order\">Save</string>\n    <string name=\"g_delete\">Delete</string>\n    <string name=\"g_select_address_error\">Select or add new address !</string>\n    <string name=\"g_place_order_confirmation\">Are you sure you want to place this order ?</string>\n    <string name=\"g_confirm\">Confirm</string>\n    <string name=\"place_order_error\">Error occurred try again later or contact us</string>\n    <string name=\"g_payment_failed\">Your Order is Failed !</string>\n    <string name=\"g_payment_success\">Your Order is Completed</string>\n    <string name=\"order_error_message\">Try again later, if this error keeps showing up please contact us .</string>\n    <string name=\"order_success_message\">We received your order and we will contact you through a phone call in the next 24H\n    \\n your order number is #</string>\n    <string name=\"g_track_order\">You can track your order by going to your profile and select all orders then select your recent order.</string>\n    <string name=\"g_settings\">Settings</string>\n    <string name=\"g_edit_personal_details\">Edit personal details</string>\n    <string name=\"g_orders\">Courses</string>\n    <string name=\"g_order\">Order</string>\n    <string name=\"g_all_orders\">All Courses</string>\n    <string name=\"g__track_order\">Enrolled Courses</string>\n    <string name=\"g_notifications\">Notifications</string>\n    <string name=\"g_information\">Information</string>\n\n\n    <string name=\"g_admin\">Admin</string>\n    <string name=\"g_preference\">Preferences</string>\n    <string name=\"g_join_partnership\">Join Partnership</string>\n    <string name=\"g_logout\">Logout</string>\n    <string name=\"g_billing\">Billing And Addresses</string>\n    <string name=\"g_version\">Version</string>\n    <string name=\"error_occurred\">Oops error occurred</string>\n    <string name=\"g_edit_profile\">Edit Profile</string>\n    <string name=\"g_change_forgot_password\">Forgot/Change password</string>\n    <string name=\"g_cant_change_email_message\">You cannot change your email address, if you are looking to change it please contact with us</string>\n    <string name=\"select_profile_image\">Select profile image</string>\n    <string name=\"g_no_orders_to_show\">No courses to show</string>\n    <string name=\"g_reset_password\">Reset Password</string>\n    <string name=\"g_reset_password_message\">We will send you password reset link on your Email</string>\n    <string name=\"g_send\">Send</string>\n    <string name=\"g_password_reset\">We sent reset password link to your email</string>\n    <string name=\"g_order_placed\">Order Placed</string>\n    <string name=\"g_shipped\">Shipped</string>\n    <string name=\"g_delivered\">Delivered</string>\n    <string name=\"g_products\">Products</string>\n    <string name=\"g_coming_soon\">This feature is not available yet</string>\n    <string name=\"g_english\">English</string>\n    <string name=\"g_arabic\">عربي</string>\n    <string name=\"g_forgot_password\">Forgot Password</string>\n    <string name=\"g_check_your_email\">Check your Email</string>\n    <string name=\"street\">Street</string>\n    <string name=\"g_order_details\">Order Details</string>\n    <string name=\"product_added\">Product added to your cart</string>\n    <string name=\"switch_account\">Switch Account</string>\n    <string name=\"open_menu\">Open Menu</string>\n    <string name=\"close_menu\">Close Menu</string>\n    <string name=\"my_store\">My Store</string>\n    <string name=\"g_total_sales\">Total Sales</string>\n    <string name=\"today_sales\">Today Sales</string>\n    <string name=\"pending_orders\">Pending Orders</string>\n    <string name=\"help\">Help</string>\n    <string name=\"help_text\">Got a question? We\\'re here to answer!</string>\n\n    <!-- reward -->\n    <string name=\"titleVoucher\">Select Voucher</string>\n    <string name=\"okButton\">OK</string>\n    <string name=\"rewardName\">Reward Name</string>\n    <string name=\"rewardExpired\">Reward Expired Date</string>\n    <string name=\"labelVoucherExpiredDate\">Expired Date: </string>\n    <string name=\"voucherTermsCondition\">Terms and Conditions</string>\n    <string name=\"labelShippingVoucher\">Voucher(s) can be selected: </string>\n    <string name=\"voucherCodeHint\">Enter Voucher Code</string>\n    <string name=\"noVoucherMsg\">No voucher available!</string>\n    <string name=\"g_difficultyLevel\">Level : </string>\n    <string name=\"g_totalChapter\">Chapter : </string>\n    <string name=\"g_product_name_label\">Material Name</string>\n\n    <string name=\"voucherName\">Voucher</string>\n    <string name=\"voucherExpired\">Voucher Expired Date</string>\n\n\n\n    <!-- Card View  -->\n\n    <string name=\"string_productCategory\">Course Category</string>\n    <string name=\"string_productTitle\">Course Title</string>\n    <string name=\"string_productPrice\">Product Price</string>\n    <string name=\"string_productRate\">4.9</string>\n    <string name=\"string_rate\">Rate</string>\n    <string name=\"string_product_image\">Course Image</string>\n    <string name=\"string_fav\">Favourite</string>\n\n\n\n    <string name=\"string_sale_text\">Grab Some Course !! </string>\n    <string name=\"string_curve_image\">Curve Image</string>\n    <string name=\"string_75\">520%</string>\n\n    <string name=\"string_status\">Status</string>\n\n    <string name=\"string_rating\">Rating</string>\n\n\n\n    <!-- Difficulty Levels  -->\n    <string-array name=\"difficulty_levels\">\n        <item>Novice</item>\n        <item>Beginners</item>\n        <item>Intermediate</item>\n        <item>Proficient</item>\n        <item>Advanced</item>\n        <item>Expert</item>\n        <item>Master</item>\n    </string-array>\n\n</resources>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
---- a/app/src/main/res/values/strings.xml	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/res/values/strings.xml	(date 1695475541059)
-@@ -172,7 +172,7 @@
- 
-     <string name="string_rating">Rating</string>
- 
--
-+    <string name="rewardDescription">Your reward description here</string>
- 
-     <!-- Difficulty Levels  -->
-     <string-array name="difficulty_levels">
-Index: app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport android.widget.Toast\nimport androidx.appcompat.app.AlertDialog\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProviders\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.SpacingDecorator.VerticalSpacingItemDecorator\nimport com.example.kleine.adapters.recyclerview.CartRecyclerAdapter\nimport com.example.kleine.databinding.FragmentCartBinding\nimport com.example.kleine.model.CartProductsList\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.SELECT_ADDRESS_FLAG\nimport com.example.kleine.viewmodel.shopping.cart.CartViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\n\nprivate const val TAG = \"CartFragment\"\nclass CartFragment : Fragment() {\n    private lateinit var binding: FragmentCartBinding\n    private lateinit var viewModel: CartViewModel\n    private lateinit var cartAdapter: CartRecyclerAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = ViewModelProviders.of(this)[CartViewModel::class.java]\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentCartBinding.inflate(inflater)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        onHomeClick()\n\n        setupRecyclerView()\n        observeCart()\n\n        onCloseImgClick()\n\n        onPlusClick()\n        onMinusClick()\n        onItemClick()\n\n        observeProductClickNavigation()\n\n        onCheckoutClick()\n\n    }\n\n    private fun onCheckoutClick() {\n        binding.btnCheckout.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"price\", binding.tvTotalprice.text.toString())\n            bundle.putString(\"clickFlag\", SELECT_ADDRESS_FLAG)\n            bundle.putParcelable(\"products\", cartProducts)\n            findNavController().navigate(R.id.action_cartFragment_to_billingFragment, bundle)\n        }\n    }\n\n    private fun observeProductClickNavigation() {\n        viewModel.product.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        val product = response.data\n                        val bundle = Bundle()\n                        bundle.putParcelable(\"material\", product)\n                        findNavController().navigate(\n                            R.id.action_homeFragment_to_materialDetailsFragment,\n                            bundle\n                        )\n                        viewModel.product.postValue(null)\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun observePlus() {\n        viewModel.plus.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun observeMinus() {\n        viewModel.minus.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n\n    private fun onItemClick() {\n        cartAdapter.onItemClick = { cartProduct ->\n            viewModel.getProductFromCartProduct(cartProduct)\n        }\n    }\n\n\n    private fun onMinusClick() {\n        cartAdapter.onMinusesClick = { cartProduct ->\n            if (cartProduct.quantity > 1) {\n                viewModel.decreaseQuantity(cartProduct)\n                observeMinus()\n            } else {\n                val alertDialog = AlertDialog.Builder(requireContext()).create()\n                alertDialog.setTitle(\"\")\n                val view =\n                    LayoutInflater.from(context).inflate(R.layout.delete_alert_dialog, null, false)\n                alertDialog.setView(view)\n\n                view.findViewById<Button>(R.id.btn_no).setOnClickListener {\n                    alertDialog.dismiss()\n                }\n\n                view.findViewById<Button>(R.id.btn_yes).setOnClickListener {\n                    viewModel.deleteProductFromCart(cartProduct)\n                    alertDialog.dismiss()\n                }\n\n                alertDialog.show()\n            }\n        }\n    }\n\n    private fun onPlusClick() {\n        cartAdapter.onPlusClick = { cartProduct ->\n            viewModel.increaseQuantity(cartProduct)\n            observePlus()\n        }\n    }\n\n    private fun onCloseImgClick() {\n        binding.imgCloseCart.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun setupRecyclerView() {\n        cartAdapter = CartRecyclerAdapter()\n        binding.apply {\n            rvCart.layoutManager = LinearLayoutManager(context)\n            rvCart.adapter = cartAdapter\n            rvCart.addItemDecoration(VerticalSpacingItemDecorator(50))\n        }\n    }\n\n    private var cartProducts: CartProductsList? = null\n    private fun observeCart() {\n        viewModel.cartProducts.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n\n                    //Handle empty cart case\n                    val products = response.data\n                    if (products!!.isNotEmpty()) { // cart is not empty\n                        cartProducts = CartProductsList(products)\n                        cartAdapter.differ.submitList(products)\n                        var totalPrice:Double = 0.0\n                        products.forEach {\n                            if (it.newPrice != null && it.newPrice.isNotEmpty() && it.newPrice != \"0\") {\n                                totalPrice += it.newPrice.toDouble() * it.quantity\n                            } else\n                                totalPrice += it.price.toDouble() * it.quantity\n\n\n                        }\n\n                        binding.tvTotalprice.text = \"$ $totalPrice\"\n\n                    } else { // cart is empty\n                        cartAdapter.differ.submitList(products)\n                        binding.apply {\n                            btnCheckout.visibility = View.INVISIBLE\n                            linear.visibility = View.INVISIBLE\n                            imgEmptyBox.visibility = View.VISIBLE\n                            imgEmptyBoxTexture.visibility = View.VISIBLE\n                            tvEmptyCart.visibility = View.VISIBLE\n                        }\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Log.e(TAG, response.message.toString())\n                    Toast.makeText(activity, \"Oops error occurred\", Toast.LENGTH_SHORT).show()\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun hideLoading() {\n        binding.apply {\n            progressBar.visibility = View.GONE\n            linear.visibility = View.VISIBLE\n            btnCheckout.visibility = View.VISIBLE\n            imgEmptyBox.visibility = View.GONE\n            imgEmptyBoxTexture.visibility = View.GONE\n            tvEmptyCart.visibility = View.GONE\n        }\n    }\n\n    private fun showLoading() {\n        binding.apply {\n            progressBar.visibility = View.VISIBLE\n            linear.visibility = View.INVISIBLE\n            btnCheckout.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun onHomeClick() {\n        val btm = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        btm?.menu?.getItem(0)?.setOnMenuItemClickListener {\n            activity?.onBackPressed()\n            true\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n\n        val bottomNavigation = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNavigation?.visibility = View.VISIBLE\n    }\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt	(date 1695475418892)
-@@ -61,6 +61,8 @@
- 
-         onCheckoutClick()
- 
-+
-+
-     }
- 
-     private fun onCheckoutClick() {
-@@ -73,6 +75,9 @@
-         }
-     }
- 
-+
-+
-+
-     private fun observeProductClickNavigation() {
-         viewModel.product.observe(viewLifecycleOwner, Observer { response ->
- 
-@@ -280,6 +285,9 @@
-         })
-     }
- 
-+
-+
-+
-     private fun hideLoading() {
-         binding.apply {
-             progressBar.visibility = View.GONE
-Index: app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.adapters.viewpager\n\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.databinding.ViewpagerImageItemBinding\n\nclass ViewPager2Images : RecyclerView.Adapter<ViewPager2Images.ViewPager2ImagesViewHolder>() {\n    inner class ViewPager2ImagesViewHolder(val binding: ViewpagerImageItemBinding) : RecyclerView.ViewHolder(binding.root)\n\n    private val diffCallback = object : DiffUtil.ItemCallback<String>() {\n        override fun areItemsTheSame(oldItem: String, newItem: String): Boolean {\n            return oldItem == newItem\n        }\n\n        override fun areContentsTheSame(oldItem: String, newItem: String): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallback)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewPager2ImagesViewHolder {\n        return ViewPager2ImagesViewHolder(\n            ViewpagerImageItemBinding.inflate(\n                LayoutInflater.from(parent.context),parent,false\n            )\n        )\n    }\n\n    override fun onBindViewHolder(holder: ViewPager2ImagesViewHolder, position: Int) {\n        val imageUrl = differ.currentList[position]\n        Log.d(\"ViewPager2Images\", \"Loading image at position $position: $imageUrl\")\n        Glide.with(holder.itemView).load(imageUrl).into(holder.binding.imgsProduct)\n    }\n\n\n    override fun getItemCount(): Int {\n        return differ.currentList.size\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt b/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt
---- a/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt	(revision c280b4f7c7115ffe5c9bc73071878be52c972c68)
-+++ b/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt	(date 1695475418918)
-@@ -7,11 +7,13 @@
- import androidx.recyclerview.widget.DiffUtil
- import androidx.recyclerview.widget.RecyclerView
- import com.bumptech.glide.Glide
-+import com.example.kleine.R
- import com.example.kleine.databinding.ViewpagerImageItemBinding
- 
- class ViewPager2Images : RecyclerView.Adapter<ViewPager2Images.ViewPager2ImagesViewHolder>() {
-     inner class ViewPager2ImagesViewHolder(val binding: ViewpagerImageItemBinding) : RecyclerView.ViewHolder(binding.root)
- 
-+
-     private val diffCallback = object : DiffUtil.ItemCallback<String>() {
-         override fun areItemsTheSame(oldItem: String, newItem: String): Boolean {
-             return oldItem == newItem
Index: .idea/shelf/Uncommitted_changes_before_Update_at_9_23_23__9_23_PM__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23__9_23_PM__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23__9_23_PM__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23__9_23_PM__Changes_.xml	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ /dev/null	(revision d1757b64c3798be216457dcc702dac99c820626f)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_9_23_23,_9_23_PM_[Changes]" date="1695475419401" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_9_23_PM_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 9/23/23, 9:23 PM [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_9_21_23__11_48_PM__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_9_21_23__11_48_PM__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_9_21_23__11_48_PM__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_9_21_23__11_48_PM__Changes_.xml	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ /dev/null	(revision d1757b64c3798be216457dcc702dac99c820626f)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_9_21_23,_11_48_PM_[Changes]" date="1695311333233" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_9_21_23,_11_48_PM_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 9/21/23, 11:48 PM [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_9_23_23__10_38_PM__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23__10_38_PM__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23__10_38_PM__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23__10_38_PM__Changes_.xml	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ /dev/null	(revision d1757b64c3798be216457dcc702dac99c820626f)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_9_23_23,_10_38_PM_[Changes]" date="1695479913731" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_9_23_23,_10_38_PM_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 9/23/23, 10:38 PM [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_9_21_23,_11_48_PM_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_9_21_23,_11_48_PM_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_9_21_23,_11_48_PM_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_9_21_23,_11_48_PM_[Changes]/shelved.patch	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ /dev/null	(revision d1757b64c3798be216457dcc702dac99c820626f)
@@ -1,1927 +0,0 @@
-Index: app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.adapters.recyclerview\n\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.R\nimport com.example.kleine.databinding.ProductLayoutRowBinding\nimport com.example.kleine.model.Material\nimport com.google.firebase.storage.FirebaseStorage\n\nclass MaterialAdapter : RecyclerView.Adapter<MaterialAdapter.MaterialViewHolder>() {\n\n    var onItemClick: ((Material) -> Unit)? = null\n\n    inner class MaterialViewHolder(val binding: ProductLayoutRowBinding) :\n        RecyclerView.ViewHolder(binding.root)\n\n    private val diffCallback = object : DiffUtil.ItemCallback<Material>() {\n        override fun areItemsTheSame(oldItem: Material, newItem: Material): Boolean {\n            return oldItem == newItem\n        }\n\n        override fun areContentsTheSame(oldItem: Material, newItem: Material): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallback)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MaterialViewHolder {\n        Log.d(\"MaterialAdapter\", \"onCreateViewHolder called\")\n        return MaterialViewHolder(\n            ProductLayoutRowBinding.inflate(\n                LayoutInflater.from(parent.context),\n                parent,\n                false\n            )\n        )\n    }\n\n\n    override fun onBindViewHolder(holder: MaterialViewHolder, position: Int) {\n        Log.d(\"MaterialAdapter\", \"onBindViewHolder called for position $position\")\n\n        val material = differ.currentList[position]\n        holder.binding.apply {\n            productModel = material  // This binds your XML views to your data model\n\n            val storage = FirebaseStorage.getInstance()\n            val storageRef = storage.reference\n\n            // Check if imageUrl is not empty\n            if (material.imageUrl.isNotEmpty()) {\n                // Construct the dynamic path based on the material's image URL\n                val pathToImage = \"materialImages/${material.imageUrl}\"\n\n                // Log the dynamic path and material image URL for debugging\n                Log.d(\"MaterialAdapter\", \"Dynamic Path to image: $pathToImage\")\n                Log.d(\"MaterialAdapter\", \"Material image URL: ${material.imageUrl}\")\n\n                // Use the dynamic path to reference the image in Firebase Storage\n                val pathReference = storageRef.child(pathToImage)\n\n                // Attempt to download the image using the dynamic path\n                pathReference.downloadUrl.addOnSuccessListener { uri ->\n                    Log.d(\"MaterialAdapter\", \"Successfully fetched URI: $uri\")\n                    Glide.with(holder.itemView).load(uri).into(imageView)\n                }.addOnFailureListener { exception ->\n                    Log.e(\"MaterialAdapter\", \"Failed to load image\", exception)\n                    imageView.setImageResource(R.drawable.default_book_logo)  // Set a default image\n                }\n            } else {\n                imageView.setImageResource(R.drawable.default_book_logo)  // Set a default image\n            }\n        }\n\n        // Set an onClick listener for the item\n        holder.itemView.setOnClickListener {\n            onItemClick?.invoke(differ.currentList[position])\n        }\n    }\n\n\n\n\n\n\n\n\n\n    override fun getItemCount(): Int {\n        val count = differ.currentList.size\n        Log.d(\"MaterialAdapter\", \"Item count: $count\")\n        return count\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt b/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt
---- a/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ b/app/src/main/java/com/example/kleine/adapters/recyclerview/MaterialAdapter.kt	(date 1695310555819)
-@@ -3,6 +3,8 @@
- import android.util.Log
- import android.view.LayoutInflater
- import android.view.ViewGroup
-+import androidx.navigation.NavDirections
-+import androidx.navigation.findNavController
- import androidx.recyclerview.widget.AsyncListDiffer
- import androidx.recyclerview.widget.DiffUtil
- import androidx.recyclerview.widget.RecyclerView
-@@ -16,8 +18,15 @@
- 
-     var onItemClick: ((Material) -> Unit)? = null
- 
--    inner class MaterialViewHolder(val binding: ProductLayoutRowBinding) :
--        RecyclerView.ViewHolder(binding.root)
-+    inner class MaterialViewHolder(val binding: ProductLayoutRowBinding) : RecyclerView.ViewHolder(binding.root) {
-+        init {
-+            itemView.setOnClickListener {
-+                val material = differ.currentList[adapterPosition]
-+                val actionId = R.id.action_homeFragment_to_materialDetailsFragment
-+                it.findNavController().navigate(actionId)
-+            }
-+        }
-+    }
- 
-     private val diffCallback = object : DiffUtil.ItemCallback<Material>() {
-         override fun areItemsTheSame(oldItem: Material, newItem: Material): Boolean {
-@@ -48,46 +57,30 @@
- 
-         val material = differ.currentList[position]
-         holder.binding.apply {
--            productModel = material  // This binds your XML views to your data model
-+            productModel = material
- 
-             val storage = FirebaseStorage.getInstance()
-             val storageRef = storage.reference
- 
--            // Check if imageUrl is not empty
-             if (material.imageUrl.isNotEmpty()) {
--                // Construct the dynamic path based on the material's image URL
-                 val pathToImage = "materialImages/${material.imageUrl}"
--
--                // Log the dynamic path and material image URL for debugging
-                 Log.d("MaterialAdapter", "Dynamic Path to image: $pathToImage")
-                 Log.d("MaterialAdapter", "Material image URL: ${material.imageUrl}")
- 
--                // Use the dynamic path to reference the image in Firebase Storage
-                 val pathReference = storageRef.child(pathToImage)
- 
--                // Attempt to download the image using the dynamic path
-                 pathReference.downloadUrl.addOnSuccessListener { uri ->
-                     Log.d("MaterialAdapter", "Successfully fetched URI: $uri")
-                     Glide.with(holder.itemView).load(uri).into(imageView)
-                 }.addOnFailureListener { exception ->
-                     Log.e("MaterialAdapter", "Failed to load image", exception)
--                    imageView.setImageResource(R.drawable.default_book_logo)  // Set a default image
-+                    imageView.setImageResource(R.drawable.default_book_logo)
-                 }
-             } else {
--                imageView.setImageResource(R.drawable.default_book_logo)  // Set a default image
-+                imageView.setImageResource(R.drawable.default_book_logo)
-             }
-         }
--
--        // Set an onClick listener for the item
--        holder.itemView.setOnClickListener {
--            onItemClick?.invoke(differ.currentList[position])
--        }
-     }
--
--
--
--
--
- 
- 
- 
-Index: app/src/main/res/layout/fragment_product_preview.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.core.widget.NestedScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".fragments.shopping.ProductPreviewFragment\"\n    android:fillViewport=\"true\">\n\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <androidx.cardview.widget.CardView\n            android:id=\"@+id/viewpager_card\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_350sdp\"\n            android:layout_marginTop=\"20dp\"\n            app:cardCornerRadius=\"15dp\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:orientation=\"vertical\"\n            android:backgroundTint=\"@color/white\"\n            android:overScrollMode=\"never\"\n            app:cardElevation=\"0dp\"\n            >\n\n\n            <androidx.viewpager2.widget.ViewPager2\n                android:id=\"@+id/viewpager2_images\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:scaleType=\"fitCenter\"\n                android:src=\"@drawable/test_image_cchair\"\n                />\n\n\n            <ImageView\n                android:id=\"@+id/img_close\"\n                android:layout_width=\"@dimen/_20sdp\"\n                android:layout_height=\"@dimen/_20sdp\"\n                android:layout_marginStart=\"10dp\"\n                android:layout_marginTop=\"10dp\"\n                android:src=\"@drawable/ic_close\"\n                app:tint=\"@color/black\"\n                android:scaleType=\"centerInside\"\n                />\n\n\n\n\n        </androidx.cardview.widget.CardView>\n\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline1\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.04\" />\n\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline2\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.96\" />\n\n\n\n\n\n\n\n\n        <LinearLayout\n            android:id=\"@+id/linear_product_name\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@+id/circle_indicator\"\n            android:orientation=\"horizontal\"\n            android:layout_marginTop=\"35dp\">\n\n\n            <TextView\n                android:id=\"@+id/tv_product_name\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:fontFamily=\"@font/poppins_light\"\n                android:text=\"Foundation of Mathematics\"\n                android:textColor=\"@color/black\"\n                android:textSize=\"@dimen/_20ssp\"\n                android:textStyle=\"bold\"\n                app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n                app:layout_constraintTop_toBottomOf=\"@id/guideline3\" />\n\n\n            <!--        <TextView-->\n            <!--            android:id=\"@+id/tv_product_offer_price\"-->\n            <!--            android:layout_width=\"wrap_content\"-->\n            <!--            android:layout_height=\"wrap_content\"-->\n            <!--            android:fontFamily=\"@font/poppins_light\"-->\n            <!--            android:text=\"$300\"-->\n            <!--            android:textColor=\"@color/g_hint\"-->\n            <!--            android:textSize=\"@dimen/_20ssp\"-->\n            <!--            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"-->\n            <!--            app:layout_constraintBottom_toBottomOf=\"@id/tv_product_name\"-->\n            <!--            app:layout_constraintTop_toTopOf=\"@+id/tv_product_name\"-->\n            <!--            android:layout_marginEnd=\"5dp\"/>-->\n\n\n            <!--        <TextView-->\n            <!--            android:id=\"@+id/tv_product_price\"-->\n            <!--            android:layout_width=\"wrap_content\"-->\n            <!--            android:layout_height=\"wrap_content\"-->\n            <!--            android:fontFamily=\"@font/poppins_light\"-->\n            <!--            android:text=\"$300\"-->\n            <!--            android:textColor=\"@color/g_hint\"-->\n            <!--            android:textSize=\"@dimen/_20ssp\"-->\n            <!--            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"-->\n            <!--            app:layout_constraintBottom_toBottomOf=\"@id/tv_product_name\"-->\n            <!--            app:layout_constraintTop_toTopOf=\"@+id/tv_product_name\"/>-->\n\n\n        </LinearLayout>\n\n\n        <LinearLayout\n            android:id=\"@+id/linear_product_description\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_product_name\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\">\n\n\n            <TextView\n                android:id=\"@+id/tv_product_description\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:fontFamily=\"@font/poppins_light\"\n                android:text=\"Subhead chair content.\"\n                android:textColor=\"@color/g_hint\"\n                android:textSize=\"@dimen/_10ssp\"\n                android:textStyle=\"bold\" />\n        </LinearLayout>\n\n\n        <View\n            android:id=\"@+id/line\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_1sdp\"\n            android:layout_marginTop=\"10dp\"\n            android:background=\"@drawable/line\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_product_description\" />\n\n\n        <LinearLayout\n            android:id=\"@+id/linear\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/line\"\n            android:layout_marginTop=\"20dp\">\n\n\n            <LinearLayout\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:orientation=\"vertical\">\n\n\n                <LinearLayout\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\">\n\n\n                    <TextView\n                        android:id=\"@+id/tv_color\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:fontFamily=\"@font/poppins_light\"\n                        android:text=\"@string/g_difficultyLevel\"\n                        android:textColor=\"@color/black\"\n                        android:textSize=\"@dimen/_15ssp\" />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_color_error\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:text=\"@string/g_please_select_color\"\n                        android:textColor=\"@color/g_red\"\n                        android:visibility=\"invisible\"\n                        android:layout_marginTop=\"14dp\"\n                        android:layout_marginStart=\"10dp\"\n                        android:textSize=\"@dimen/_9ssp\"\n                        />\n\n\n                </LinearLayout>\n                <androidx.recyclerview.widget.RecyclerView\n                    android:id=\"@+id/rv_colors\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\"\n                    app:layoutManager=\"androidx.recyclerview.widget.LinearLayoutManager\"\n                    android:layout_marginEnd=\"15dp\"/>\n\n\n\n\n            </LinearLayout>\n\n\n            <LinearLayout\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:orientation=\"vertical\">\n                <LinearLayout\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\">\n                    <TextView\n                        android:id=\"@+id/tv_size\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:fontFamily=\"@font/poppins_light\"\n                        android:text=\"@string/g_totalChapter\"\n                        android:textColor=\"@color/black\"\n                        android:textSize=\"@dimen/_15ssp\" />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_size_unit\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:textSize=\"@dimen/_10ssp\"\n                        android:visibility=\"invisible\"\n                        />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_size_error\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:text=\"@string/g_please_select_size\"\n                        android:textSize=\"@dimen/_9ssp\"\n                        android:textColor=\"@color/g_red\"\n                        android:visibility=\"invisible\"\n                        android:layout_marginTop=\"14dp\"\n                        android:layout_marginStart=\"10dp\"/>\n\n\n                </LinearLayout>\n                <androidx.recyclerview.widget.RecyclerView\n                    android:id=\"@+id/rv_sizes\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\"\n                    app:layoutManager=\"androidx.recyclerview.widget.LinearLayoutManager\"/>\n\n\n\n\n            </LinearLayout>\n        </LinearLayout>\n\n\n        <ProgressBar\n            android:id=\"@+id/progressbar\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:indeterminateTint=\"@color/g_icon_tint\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear\"\n            android:layout_marginTop=\"45dp\"\n            android:visibility=\"invisible\"\n            />\n\n\n        <androidx.appcompat.widget.AppCompatButton\n            android:id=\"@+id/btn_add_to_cart\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_40sdp\"\n            android:layout_marginBottom=\"20dp\"\n            android:background=\"@drawable/btn_background\"\n            android:fontFamily=\"@font/poppins_thin\"\n            android:text=\"@string/g_add_to_card\"\n            android:textAllCaps=\"false\"\n            android:textColor=\"@color/white\"\n            android:textSize=\"@dimen/_12sdp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintHorizontal_bias=\"1.0\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear\"\n            app:layout_constraintVertical_bias=\"0.494\"\n            android:layout_marginTop=\"45dp\"\n            android:visibility=\"visible\"\n            />\n\n\n        <io.github.vejei.viewpagerindicator.indicator.CircleIndicator\n            android:id=\"@+id/circle_indicator\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintTop_toBottomOf=\"@id/viewpager_card\"\n            app:layout_constraintStart_toStartOf=\"@id/viewpager_card\"\n            app:layout_constraintEnd_toEndOf=\"@+id/viewpager_card\"\n            android:layout_marginTop=\"10dp\"\n            app:indicatorGap=\"5dp\"\n            app:indicatorRadius=\"5dp\"\n            app:indicatorItemCount=\"4\"\n            app:indicatorSelectedColor=\"@color/g_black\"/>\n\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n</androidx.core.widget.NestedScrollView>\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_product_preview.xml b/app/src/main/res/layout/fragment_product_preview.xml
---- a/app/src/main/res/layout/fragment_product_preview.xml	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ b/app/src/main/res/layout/fragment_product_preview.xml	(date 1695311056286)
-@@ -1,10 +1,18 @@
- <?xml version="1.0" encoding="utf-8"?>
--<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-+<layout xmlns:android="http://schemas.android.com/apk/res/android"
-     xmlns:app="http://schemas.android.com/apk/res-auto"
--    xmlns:tools="http://schemas.android.com/tools"
-+    xmlns:tools="http://schemas.android.com/tools">
-+    <data>
-+        <variable
-+            name="productModel"
-+            type="com.example.kleine.model.Material" />
-+    </data>
-+
-+
-+<androidx.core.widget.NestedScrollView
-     android:layout_width="match_parent"
-     android:layout_height="match_parent"
--    tools:context=".fragments.shopping.ProductPreviewFragment"
-+    tools:context=".fragments.shopping.MaterialPreviewFragment"
-     android:fillViewport="true">
- 
- 
-@@ -28,12 +36,12 @@
- 
- 
-             <androidx.viewpager2.widget.ViewPager2
--                android:id="@+id/viewpager2_images"
-+                android:id="@+id/viewpager2Images"
-                 android:layout_width="match_parent"
--                android:layout_height="match_parent"
--                android:scaleType="fitCenter"
--                android:src="@drawable/test_image_cchair"
--                />
-+                android:layout_height="0dp"
-+                android:layout_weight="1"/>
-+
-+
- 
- 
-             <ImageView
-@@ -92,7 +100,7 @@
-                 android:layout_height="wrap_content"
-                 android:layout_weight="1"
-                 android:fontFamily="@font/poppins_light"
--                android:text="Foundation of Mathematics"
-+                android:text="@{productModel.name}"
-                 android:textColor="@color/black"
-                 android:textSize="@dimen/_20ssp"
-                 android:textStyle="bold"
-@@ -145,7 +153,7 @@
-                 android:layout_width="wrap_content"
-                 android:layout_height="wrap_content"
-                 android:fontFamily="@font/poppins_light"
--                android:text="Subhead chair content."
-+                android:text="@{String.valueOf(productModel.desc)}"
-                 android:textColor="@color/g_hint"
-                 android:textSize="@dimen/_10ssp"
-                 android:textStyle="bold" />
-@@ -193,7 +201,7 @@
-                         android:layout_height="wrap_content"
-                         android:layout_marginTop="15dp"
-                         android:fontFamily="@font/poppins_light"
--                        android:text="@string/g_difficultyLevel"
-+                        android:text="@string/string_status"
-                         android:textColor="@color/black"
-                         android:textSize="@dimen/_15ssp" />
- 
-@@ -212,13 +220,7 @@
- 
- 
-                 </LinearLayout>
--                <androidx.recyclerview.widget.RecyclerView
--                    android:id="@+id/rv_colors"
--                    android:layout_width="match_parent"
--                    android:layout_height="wrap_content"
--                    android:orientation="horizontal"
--                    app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
--                    android:layout_marginEnd="15dp"/>
-+
- 
- 
- 
-@@ -241,7 +243,7 @@
-                         android:layout_height="wrap_content"
-                         android:layout_marginTop="15dp"
-                         android:fontFamily="@font/poppins_light"
--                        android:text="@string/g_totalChapter"
-+                        android:text="@string/string_rating"
-                         android:textColor="@color/black"
-                         android:textSize="@dimen/_15ssp" />
- 
-@@ -269,13 +271,6 @@
- 
- 
-                 </LinearLayout>
--                <androidx.recyclerview.widget.RecyclerView
--                    android:id="@+id/rv_sizes"
--                    android:layout_width="match_parent"
--                    android:layout_height="wrap_content"
--                    android:orientation="horizontal"
--                    app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"/>
--
- 
- 
- 
-@@ -335,3 +330,4 @@
- 
-     </androidx.constraintlayout.widget.ConstraintLayout>
- </androidx.core.widget.NestedScrollView>
-+</layout>
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/model/Material.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.model\n\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.parcelize.Parcelize\n\n@Entity(tableName = \"material\")\ndata class Material(\n    @PrimaryKey(autoGenerate = true) // ID as auto increment\n    val desc: String = \"\",\n    val name: String = \"\", // Course name\n    val pass: Int = 0, // Number of students who passed this course/subject\n    val rating: Float = 0f, // Rating (1 - 5)\n    val requirement: String = \"\", // Requirement (e.g., Free)\n    val status: String = \"\", // Status (Available/Unavailable)\n    val view: Int = 0, // Number of students who viewed this course/subject\n    val imageUrl: String = \"\", // URL for the course banner\n    val enroll: Int = 0, // Number of students enrolled in this course/subject\n    val partnershipsID: String? = null  // partnership ID\n\n)\n@Parcelize\ndata class MaterialData(\n    var id: String = \"\",\n    var name: String = \"\",\n    var desc: String = \"\",\n    var requirement: String = \"\",\n    var rating: Double = 0.0,\n    var imageUrl: String = \"\"\n): Parcelable {\n    constructor() : this(\"\", \"\", \"\", \"\", 0.0, \"\")\n}\n\n@Parcelize\ndata class MaterialEngageData(\n    val name: String = \"\",\n    val view: Long = 0,\n    val enroll: Long = 0,\n    val graduate: Long = 0,\n    val imageUrl: String = \"\"\n): Parcelable {\n    constructor() : this(\"\", 0,0,0,\"\")\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/model/Material.kt b/app/src/main/java/com/example/kleine/model/Material.kt
---- a/app/src/main/java/com/example/kleine/model/Material.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ b/app/src/main/java/com/example/kleine/model/Material.kt	(date 1695286443832)
-@@ -5,6 +5,7 @@
- import androidx.room.PrimaryKey
- import kotlinx.parcelize.Parcelize
- 
-+@Parcelize
- @Entity(tableName = "material")
- data class Material(
-     @PrimaryKey(autoGenerate = true) // ID as auto increment
-@@ -19,7 +20,8 @@
-     val enroll: Int = 0, // Number of students enrolled in this course/subject
-     val partnershipsID: String? = null  // partnership ID
- 
--)
-+): Parcelable
-+
- @Parcelize
- data class MaterialData(
-     var id: String = "",
-Index: app/src/main/java/com/example/kleine/fragments/categories/HomeProductsFragment.kt
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/categories/HomeProductsFragment.kt b/app/src/main/java/com/example/kleine/fragments/categories/HomeProductsFragment.kt
-deleted file mode 100644
---- a/app/src/main/java/com/example/kleine/fragments/categories/HomeProductsFragment.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ /dev/null	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-@@ -1,291 +0,0 @@
--package com.example.kleine.fragments.categories
--
--import android.os.Bundle
--import android.util.Log
--import android.view.LayoutInflater
--import android.view.View
--import android.view.ViewGroup
--import androidx.coordinatorlayout.widget.CoordinatorLayout
--import androidx.core.widget.NestedScrollView
--import androidx.fragment.app.Fragment
--import androidx.lifecycle.Observer
--import androidx.navigation.fragment.findNavController
--import androidx.recyclerview.widget.GridLayoutManager
--import androidx.recyclerview.widget.LinearLayoutManager
--import androidx.recyclerview.widget.RecyclerView
--import com.example.kleine.R
--import com.example.kleine.activities.ShoppingActivity
--import com.example.kleine.adapters.recyclerview.AdsRecyclerAdapter
--import com.example.kleine.adapters.recyclerview.BestDealsRecyclerAdapter
--import com.example.kleine.adapters.recyclerview.ProductsRecyclerAdapter
--import com.example.kleine.databinding.FragmentHomeProductsBinding
--import com.example.kleine.firebaseDatabase.FirebaseDb
--import com.example.kleine.model.CartProduct
--import com.example.kleine.resource.Resource
--import com.example.kleine.util.Constants.Companion.PRODUCT_FLAG
--import com.example.kleine.viewmodel.shopping.ShoppingViewModel
--import com.google.android.material.snackbar.Snackbar
--
--class HomeProductsFragment : Fragment() {
--    private lateinit var binding: FragmentHomeProductsBinding
--    private lateinit var headerAdapter: AdsRecyclerAdapter
--    private lateinit var viewModel: ShoppingViewModel
--    private lateinit var bestDealsAdapter: BestDealsRecyclerAdapter
--    private lateinit var productsAdapter: ProductsRecyclerAdapter
--    private val TAG = "HomeProductsFragment"
--
--    override fun onCreate(savedInstanceState: Bundle?) {
--        super.onCreate(savedInstanceState)
--        val database = FirebaseDb()
--        viewModel = (activity as ShoppingActivity).viewModel
--        headerAdapter = AdsRecyclerAdapter()
--        bestDealsAdapter = BestDealsRecyclerAdapter()
--        productsAdapter = ProductsRecyclerAdapter()
--    }
--
--    override fun onCreateView(
--        inflater: LayoutInflater,
--        container: ViewGroup?,
--        savedInstanceState: Bundle?
--    ): View {
--        binding = FragmentHomeProductsBinding.inflate(inflater, container, false)
--        return binding.root
--    }
--
--    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
--        super.onViewCreated(view, savedInstanceState)
--
--        binding.tvBestDeals.visibility = View.GONE
--
--        setupHeaderRecyclerView()
--        observeHeaderProducts()
--
--        setupBestDealsRecyclerView()
--        observeBestDeals()
--
--        setupAllProductsRecyclerView()
--        observeAllProducts()
--
--        headerPaging()
--        bestDealsPaging()
--        productsPaging()
--
--        observeEmptyHeader()
--        observeEmptyBestDeals()
--
--        onHeaderProductClick()
--        onBestDealsProductClick()
--
--        observeAddHeaderProductsToCart()
--
--
--        productsAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product", product)
--            bundle.putString("flag", PRODUCT_FLAG)
--            findNavController().navigate(
--                R.id.action_homeFragment_to_productPreviewFragment2,
--                bundle
--            )
--        }
--
--
--    }
--
--    private fun observeAddHeaderProductsToCart() {
--        viewModel.addToCart.observe(viewLifecycleOwner, Observer { response ->
--
--            when (response) {
--                is Resource.Loading -> {
--                    showTopScreenProgressbar()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideTopScreenProgressbar()
--                    val snackBarPosition = requireActivity().findViewById<CoordinatorLayout>(R.id.snackBar_coordinator)
--                    Snackbar.make(snackBarPosition,requireContext().getText(R.string.product_added),2500).show()
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    hideTopScreenProgressbar()
--                    return@Observer
--                }
--            }
--        })
--    }
--
--    private fun hideTopScreenProgressbar() {
--
--    }
--
--    private fun showTopScreenProgressbar() {
--
--    }
--
--    private fun onBestDealsProductClick() {
--        bestDealsAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product", product)
--            findNavController().navigate(
--                R.id.action_homeFragment_to_productPreviewFragment2,
--                bundle
--            )
--
--        }
--    }
--
--    private fun onHeaderProductClick() {
--        headerAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product", product)
--            findNavController().navigate(
--                R.id.action_homeFragment_to_productPreviewFragment2,
--                bundle
--            )
--        }
--
--        headerAdapter.onAddToCartClick = { product ->
--            val image = (product.images?.get("images") as List<String>)[0]
--            val cartProduct = CartProduct(
--                product.id,
--                product.description!!,
--                product.seller!!,
--                image,
--                product.productPrice!!,
--                product.newPrice,
--                1,
--                "",
--                ""
--            )
--            viewModel.addProductToCart(cartProduct)
--        }
--    }
--
--    private fun observeEmptyBestDeals() {
--        viewModel.emptyBestDeals.observe(viewLifecycleOwner, Observer {
--            if (it == true) {
--                binding.apply {
--                    rvBestDeals.visibility = View.GONE
--                    tvBestDeals.visibility = View.GONE
--                }
--            }
--        })
--    }
--
--    private fun observeEmptyHeader() {
--        viewModel.emptyClothes.observe(viewLifecycleOwner, Observer {
--            if (it == true) {
--                binding.apply {
--                    rvAds.visibility = View.GONE
--                }
--            }
--        })
--    }
--
--
--    private fun bestDealsPaging() {
--        binding.rvBestDeals.addOnScrollListener(object : RecyclerView.OnScrollListener() {
--            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
--                super.onScrolled(recyclerView, dx, dy)
--                if (!recyclerView.canScrollHorizontally(1) && dx != 0) {
--                    viewModel.getBestDealsProduct()
--                }
--            }
--        })
--    }
--
--    private fun headerPaging() {
--        binding.rvAds.addOnScrollListener(object : RecyclerView.OnScrollListener() {
--            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
--                super.onScrolled(recyclerView, dx, dy)
--                if (!recyclerView.canScrollVertically(1) && dx != 0) {
--                    viewModel.getClothesProducts()
--                }
--            }
--        })
--    }
--
--    private fun productsPaging() {
--        binding.scrollChair.setOnScrollChangeListener(NestedScrollView.OnScrollChangeListener { v, scrollX, scrollY, oldScrollX, oldScrollY ->
--
--            if (v!!.getChildAt(0).bottom <= (v.height + scrollY)) {
--                viewModel.getHomeProduct(productsAdapter.differ.currentList.size)
--            }
--        })
--    }
--
--    private fun observeAllProducts() {
--        viewModel.home.observe(viewLifecycleOwner, Observer { response ->
--
--            when (response) {
--                is Resource.Loading -> {
--                    showBottomLoading()
--
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideBottomLoading()
--                    productsAdapter.differ.submitList(response.data)
--                    Log.d("test", response.data?.size.toString())
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    hideBottomLoading()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--        })
--    }
--
--    private fun hideBottomLoading() {
--        binding.progressbar2.visibility = View.GONE
--        binding.tvBestProducts.visibility = View.VISIBLE
--
--    }
--
--    private fun showBottomLoading() {
--        binding.progressbar2.visibility = View.VISIBLE
--        binding.tvBestProducts.visibility = View.GONE
--    }
--
--    private fun setupAllProductsRecyclerView() {
--        binding.rvChairs.apply {
--            layoutManager = GridLayoutManager(context, 2, GridLayoutManager.VERTICAL, false)
--            adapter = productsAdapter
--        }
--    }
--
--
--    private fun setupBestDealsRecyclerView() {
--        binding.rvBestDeals.apply {
--            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
--            adapter = bestDealsAdapter
--        }
--    }
--
--
--    private fun observeHeaderProducts() {
--        viewModel.clothes.observe(viewLifecycleOwner, Observer { clothesList ->
--            headerAdapter.differ.submitList(clothesList.toList())
--        })
--    }
--
--    private fun observeBestDeals() {
--        viewModel.bestDeals.observe(viewLifecycleOwner, Observer { bestDealsList ->
--            bestDealsAdapter.differ.submitList(bestDealsList.toList())
--            binding.tvBestDeals.visibility = View.VISIBLE
--        })
--    }
--
--    private fun setupHeaderRecyclerView() {
--        binding.rvAds.apply {
--            adapter = headerAdapter
--            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
--        }
--    }
--}
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/fragments/categories/ChairFragment.kt
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/categories/ChairFragment.kt b/app/src/main/java/com/example/kleine/fragments/categories/ChairFragment.kt
-deleted file mode 100644
---- a/app/src/main/java/com/example/kleine/fragments/categories/ChairFragment.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ /dev/null	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-@@ -1,179 +0,0 @@
--package com.example.kleine.fragments.categories
--
--import android.os.Bundle
--import android.util.Log
--import androidx.fragment.app.Fragment
--import android.view.LayoutInflater
--import android.view.View
--import android.view.ViewGroup
--import androidx.core.widget.NestedScrollView
--import androidx.lifecycle.Observer
--import androidx.navigation.fragment.findNavController
--import androidx.recyclerview.widget.GridLayoutManager
--import androidx.recyclerview.widget.LinearLayoutManager
--import androidx.recyclerview.widget.RecyclerView
--import com.example.kleine.R
--import com.example.kleine.SpacingDecorator.HorizantalSpacingItemDecorator
--import com.example.kleine.activities.ShoppingActivity
--import com.example.kleine.adapters.recyclerview.ProductsRecyclerAdapter
--import com.example.kleine.databinding.FragmentChairBinding
--import com.example.kleine.resource.Resource
--import com.example.kleine.util.Constants
--import com.example.kleine.viewmodel.shopping.ShoppingViewModel
--
--
--class ChairFragment : Fragment() {
--    val TAG = "ChairFragment"
--    private lateinit var viewModel: ShoppingViewModel
--    private lateinit var binding: FragmentChairBinding
--    private lateinit var headerAdapter: ProductsRecyclerAdapter
--    private lateinit var productsAdapter: ProductsRecyclerAdapter
--
--    override fun onCreate(savedInstanceState: Bundle?) {
--        super.onCreate(savedInstanceState)
--
--        headerAdapter = ProductsRecyclerAdapter()
--        productsAdapter = ProductsRecyclerAdapter()
--        viewModel = (activity as ShoppingActivity).viewModel
--
--        viewModel.getMostRequestedChairs()
--        viewModel.getChairs()
--    }
--
--    override fun onCreateView(
--        inflater: LayoutInflater, container: ViewGroup?,
--        savedInstanceState: Bundle?
--    ): View? {
--        binding = FragmentChairBinding.inflate(inflater)
--        return binding.root
--    }
--
--    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
--        super.onViewCreated(view, savedInstanceState)
--
--        setupHeaderRecyclerview()
--        observeHeader()
--
--        setupProductsRecyclerView()
--        observeProducts()
--
--        headerPaging()
--        productsPaging()
--
--        productsAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product",product)
--            bundle.putString("flag", Constants.PRODUCT_FLAG)
--
--            findNavController().navigate(R.id.action_homeFragment_to_productPreviewFragment2,bundle)
--        }
--
--        headerAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product",product)
--            bundle.putString("flag", Constants.PRODUCT_FLAG)
--            findNavController().navigate(R.id.action_homeFragment_to_productPreviewFragment2,bundle)
--        }
--
--    }
--
--    private fun productsPaging() {
--        binding.scrollCupboard.setOnScrollChangeListener(NestedScrollView.OnScrollChangeListener { v, scrollX, scrollY, oldScrollX, oldScrollY ->
--            if (v!!.getChildAt(0).bottom <= (v.height + scrollY)) {
--                viewModel.getChairs(productsAdapter.differ.currentList.size)
--            }
--        })
--    }
--
--    private fun headerPaging() {
--        binding.rvHeader.addOnScrollListener(object : RecyclerView.OnScrollListener() {
--            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
--                super.onScrolled(recyclerView, dx, dy)
--
--                if (!recyclerView.canScrollHorizontally(1) && dx != 0)
--                    viewModel.getMostRequestedChairs(headerAdapter.differ.currentList.size)
--
--            }
--        })
--    }
--
--    private fun observeProducts() {
--        viewModel.chairs.observe(viewLifecycleOwner, Observer { response ->
--
--            when (response) {
--                is Resource.Loading -> {
--                    showBottomLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideBottomLoading()
--                    productsAdapter.differ.submitList(response.data)
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    hideBottomLoading()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--        })
--    }
--
--    private fun hideBottomLoading() {
--        binding.progressbar2.visibility = View.GONE
--    }
--
--    private fun showBottomLoading() {
--        binding.progressbar2.visibility = View.VISIBLE
--    }
--
--    private fun setupProductsRecyclerView() {
--        binding.rvProducts.apply {
--            adapter = productsAdapter
--            layoutManager = GridLayoutManager(context, 2, GridLayoutManager.VERTICAL, false)
--        }
--    }
--
--    private fun observeHeader() {
--        viewModel.mostRequestedChairs.observe(viewLifecycleOwner, Observer { response ->
--
--            when (response) {
--                is Resource.Loading -> {
--                    showTopLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideTopLoading()
--                    headerAdapter.differ.submitList(response.data)
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    hideTopLoading()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--        })
--    }
--
--    private fun hideTopLoading() {
--        binding.progressbar1.visibility = View.GONE
--    }
--
--    private fun showTopLoading() {
--        binding.progressbar1.visibility = View.VISIBLE
--    }
--
--    private fun setupHeaderRecyclerview() {
--        binding.rvHeader.apply {
--            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
--            adapter = headerAdapter
--            addItemDecoration(HorizantalSpacingItemDecorator(100))
--        }
--    }
--
--}
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/fragments/categories/CupboardFragment.kt
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/categories/CupboardFragment.kt b/app/src/main/java/com/example/kleine/fragments/categories/CupboardFragment.kt
-deleted file mode 100644
---- a/app/src/main/java/com/example/kleine/fragments/categories/CupboardFragment.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ /dev/null	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-@@ -1,192 +0,0 @@
--package com.example.kleine.fragments.categories
--
--import android.os.Bundle
--import android.util.Log
--import android.view.LayoutInflater
--import android.view.View
--import android.view.ViewGroup
--import android.widget.Toast
--import androidx.core.widget.NestedScrollView
--import androidx.fragment.app.Fragment
--import androidx.lifecycle.Observer
--import androidx.navigation.fragment.findNavController
--import androidx.recyclerview.widget.GridLayoutManager
--import androidx.recyclerview.widget.LinearLayoutManager
--import androidx.recyclerview.widget.RecyclerView
--import com.example.kleine.R
--import com.example.kleine.SpacingDecorator.HorizantalSpacingItemDecorator
--import com.example.kleine.activities.ShoppingActivity
--import com.example.kleine.adapters.recyclerview.ProductsRecyclerAdapter
--import com.example.kleine.databinding.FragmentCupboardBinding
--import com.example.kleine.resource.Resource
--import com.example.kleine.util.Constants
--import com.example.kleine.viewmodel.shopping.ShoppingViewModel
--
--class CupboardFragment : Fragment(R.layout.fragment_cupboard) {
--    private lateinit var viewModel: ShoppingViewModel
--    private lateinit var binding: FragmentCupboardBinding
--    private lateinit var mostOrderedCupboardsAdapter: ProductsRecyclerAdapter
--    private lateinit var cupboardAdapter: ProductsRecyclerAdapter
--    private val TAG = "CupboardFragment"
--    override fun onCreate(savedInstanceState: Bundle?) {
--        super.onCreate(savedInstanceState)
--        mostOrderedCupboardsAdapter = ProductsRecyclerAdapter()
--        cupboardAdapter = ProductsRecyclerAdapter()
--        viewModel = (activity as ShoppingActivity).viewModel
--
--        viewModel.getMostRequestedCupboards()
--        viewModel.getCupboardProduct()
--        Log.d("test","cupboardFragment")
--
--    }
--
--    override fun onCreateView(
--        inflater: LayoutInflater,
--        container: ViewGroup?,
--        savedInstanceState: Bundle?
--    ): View {
--
--        binding = FragmentCupboardBinding.inflate(inflater)
--        return binding.root
--    }
--
--    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
--        super.onViewCreated(view, savedInstanceState)
--
--        setupMostOrderedCupboardRecyclerView()
--        observeMostOrderedCupboard()
--
--        setupCupboardRecyclerView()
--        observeCupboard()
--
--        mostRequestedCupboardPaging()
--        cupboardPaging()
--
--        cupboardAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product",product)
--            bundle.putString("flag", Constants.PRODUCT_FLAG)
--
--            findNavController().navigate(R.id.action_homeFragment_to_productPreviewFragment2,bundle)
--        }
--
--        mostOrderedCupboardsAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product",product)
--            bundle.putString("flag", Constants.PRODUCT_FLAG)
--            findNavController().navigate(R.id.action_homeFragment_to_productPreviewFragment2,bundle)
--        }
--
--    }
--
--    private fun cupboardPaging() {
--        binding.scrollCupboard.setOnScrollChangeListener(NestedScrollView.OnScrollChangeListener { v, scrollX, scrollY, oldScrollX, oldScrollY ->
--            if (v!!.getChildAt(0).bottom <= (v.height + scrollY)) {
--                viewModel.getCupboardProduct(cupboardAdapter.differ.currentList.size)
--            }
--        })
--    }
--
--    private fun mostRequestedCupboardPaging() {
--        binding.rvHeader.addOnScrollListener(object : RecyclerView.OnScrollListener() {
--            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
--                super.onScrolled(recyclerView, dx, dy)
--
--                if (!recyclerView.canScrollHorizontally(1) && dx != 0)
--                    viewModel.getMostRequestedCupboards(mostOrderedCupboardsAdapter.differ.currentList.size)
--
--            }
--        })
--    }
--
--    private fun observeCupboard() {
--        viewModel.cupboard.observe(viewLifecycleOwner, Observer { response ->
--
--            when (response) {
--                is Resource.Loading -> {
--                    showBottomLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideBottomLoading()
--                    cupboardAdapter.differ.submitList(response.data)
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    hideBottomLoading()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--        })
--    }
--
--    private fun hideBottomLoading() {
--        binding.progressbar2.visibility = View.GONE
--    }
--
--    private fun showBottomLoading() {
--        binding.progressbar2.visibility = View.VISIBLE
--    }
--
--    private fun setupCupboardRecyclerView() {
--        binding.rvProducts.apply {
--            adapter = cupboardAdapter
--            layoutManager = GridLayoutManager(context, 2, GridLayoutManager.VERTICAL, false)
--        }
--    }
--
--    private fun observeMostOrderedCupboard() {
--        viewModel.mostRequestedCupboard.observe(viewLifecycleOwner, Observer { response ->
--
--            when (response) {
--                is Resource.Loading -> {
--                    showTopLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideTopLoading()
--                    mostOrderedCupboardsAdapter.differ.submitList(response.data)
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    hideTopLoading()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--        })
--    }
--
--    private fun hideTopLoading() {
--        binding.progressbar1.visibility = View.GONE
--    }
--
--    private fun showTopLoading() {
--        binding.progressbar1.visibility = View.VISIBLE
--    }
--
--    private fun setupMostOrderedCupboardRecyclerView() {
--        binding.rvHeader.apply {
--            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
--            adapter = mostOrderedCupboardsAdapter
--            addItemDecoration(HorizantalSpacingItemDecorator(100))
--        }
--    }
--
--    override fun onDestroy() {
--        super.onDestroy()
--
--    }
--
--    override fun onResume() {
--        super.onResume()
--
--
--    }
--
--}
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/fragments/categories/FurnitureFragment.kt
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/categories/FurnitureFragment.kt b/app/src/main/java/com/example/kleine/fragments/categories/FurnitureFragment.kt
-deleted file mode 100644
---- a/app/src/main/java/com/example/kleine/fragments/categories/FurnitureFragment.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ /dev/null	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-@@ -1,185 +0,0 @@
--package com.example.kleine.fragments.categories
--
--import android.os.Bundle
--import android.util.Log
--import android.view.LayoutInflater
--import android.view.View
--import android.view.ViewGroup
--import androidx.core.widget.NestedScrollView
--import androidx.fragment.app.Fragment
--import androidx.lifecycle.Observer
--import androidx.lifecycle.ViewModelProvider
--import androidx.navigation.fragment.findNavController
--import androidx.recyclerview.widget.GridLayoutManager
--import androidx.recyclerview.widget.LinearLayoutManager
--import androidx.recyclerview.widget.RecyclerView
--import com.example.kleine.R
--import com.example.kleine.SpacingDecorator.HorizantalSpacingItemDecorator
--import com.example.kleine.activities.ShoppingActivity
--import com.example.kleine.adapters.recyclerview.ProductsRecyclerAdapter
--import com.example.kleine.databinding.FragmentChairBinding
--import com.example.kleine.databinding.FragmentFurnitureBinding
--import com.example.kleine.firebaseDatabase.FirebaseDb
--import com.example.kleine.resource.Resource
--import com.example.kleine.util.Constants
--import com.example.kleine.viewmodel.shopping.ShoppingViewModel
--import com.example.kleine.viewmodel.shopping.ShoppingViewModelProviderFactory
--
--class FurnitureFragment : Fragment(R.layout.fragment_furniture) {
--    val TAG = "FurnitureFragment"
--    private lateinit var viewModel: ShoppingViewModel
--    private lateinit var binding: FragmentFurnitureBinding
--    private lateinit var headerAdapter: ProductsRecyclerAdapter
--    private lateinit var productsAdapter: ProductsRecyclerAdapter
--
--    override fun onCreate(savedInstanceState: Bundle?) {
--        super.onCreate(savedInstanceState)
--        headerAdapter = ProductsRecyclerAdapter()
--        productsAdapter = ProductsRecyclerAdapter()
--        viewModel = (activity as ShoppingActivity).viewModel
--
--        viewModel.getMostRequestedFurniture()
--        viewModel.getFurniture()
--
--        Log.d("Test","Furniture")
--
--    }
--
--    override fun onCreateView(
--        inflater: LayoutInflater,
--        container: ViewGroup?,
--        savedInstanceState: Bundle?
--    ): View? {
--        binding = FragmentFurnitureBinding.inflate(inflater)
--        return binding.root
--    }
--
--    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
--        super.onViewCreated(view, savedInstanceState)
--
--        setupHeaderRecyclerview()
--        observeHeader()
--
--        setupProductsRecyclerView()
--        observeProducts()
--
--        headerPaging()
--        productsPaging()
--
--        productsAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product",product)
--            bundle.putString("flag", Constants.PRODUCT_FLAG)
--
--            findNavController().navigate(R.id.action_homeFragment_to_productPreviewFragment2,bundle)
--        }
--
--        headerAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product",product)
--            bundle.putString("flag", Constants.PRODUCT_FLAG)
--            findNavController().navigate(R.id.action_homeFragment_to_productPreviewFragment2,bundle)
--        }
--
--    }
--
--    private fun productsPaging() {
--        binding.scrollCupboard.setOnScrollChangeListener(NestedScrollView.OnScrollChangeListener { v, scrollX, scrollY, oldScrollX, oldScrollY ->
--            if (v!!.getChildAt(0).bottom <= (v.height + scrollY)) {
--                viewModel.getFurniture(productsAdapter.differ.currentList.size)
--            }
--        })
--    }
--
--    private fun headerPaging() {
--        binding.rvHeader.addOnScrollListener(object : RecyclerView.OnScrollListener() {
--            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
--                super.onScrolled(recyclerView, dx, dy)
--
--                if (!recyclerView.canScrollHorizontally(1) && dx != 0)
--                    viewModel.getMostRequestedFurniture(headerAdapter.differ.currentList.size)
--
--            }
--        })
--    }
--
--    private fun observeProducts() {
--        viewModel.furniture.observe(viewLifecycleOwner, Observer { response ->
--
--            when (response) {
--                is Resource.Loading -> {
--                    showBottomLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideBottomLoading()
--                    productsAdapter.differ.submitList(response.data)
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    hideBottomLoading()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--        })
--    }
--
--    private fun hideBottomLoading() {
--        binding.progressbar2.visibility = View.GONE
--    }
--
--    private fun showBottomLoading() {
--        binding.progressbar2.visibility = View.VISIBLE
--    }
--
--    private fun setupProductsRecyclerView() {
--        binding.rvProducts.apply {
--            adapter = productsAdapter
--            layoutManager = GridLayoutManager(context, 2, GridLayoutManager.VERTICAL, false)
--        }
--    }
--
--    private fun observeHeader() {
--        viewModel.mostRequestedFurniture.observe(viewLifecycleOwner, Observer { response ->
--
--            when (response) {
--                is Resource.Loading -> {
--                    showTopLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideTopLoading()
--                    headerAdapter.differ.submitList(response.data)
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    hideTopLoading()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--        })
--    }
--
--    private fun hideTopLoading() {
--        binding.progressbar1.visibility = View.GONE
--    }
--
--    private fun showTopLoading() {
--        binding.progressbar1.visibility = View.VISIBLE
--    }
--
--    private fun setupHeaderRecyclerview() {
--        binding.rvHeader.apply {
--            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
--            adapter = headerAdapter
--            addItemDecoration(HorizantalSpacingItemDecorator(100))
--        }
--    }
--
--}
-Index: app/src/main/java/com/example/kleine/fragments/categories/AccessoryFragment.kt
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/categories/AccessoryFragment.kt b/app/src/main/java/com/example/kleine/fragments/categories/AccessoryFragment.kt
-deleted file mode 100644
---- a/app/src/main/java/com/example/kleine/fragments/categories/AccessoryFragment.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ /dev/null	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-@@ -1,188 +0,0 @@
--package com.example.kleine.fragments.categories
--
--import android.os.Bundle
--import android.util.Log
--import android.view.LayoutInflater
--import android.view.View
--import android.view.ViewGroup
--import android.widget.Toast
--import androidx.core.widget.NestedScrollView
--import androidx.fragment.app.Fragment
--import androidx.lifecycle.Observer
--import androidx.lifecycle.ViewModelProvider
--import androidx.navigation.fragment.findNavController
--import androidx.recyclerview.widget.GridLayoutManager
--import androidx.recyclerview.widget.LinearLayoutManager
--import androidx.recyclerview.widget.RecyclerView
--import com.example.kleine.R
--import com.example.kleine.SpacingDecorator.HorizantalSpacingItemDecorator
--import com.example.kleine.activities.ShoppingActivity
--import com.example.kleine.adapters.recyclerview.ProductsRecyclerAdapter
--import com.example.kleine.databinding.FragmentAccessoryBinding
--import com.example.kleine.databinding.FragmentTableBinding
--import com.example.kleine.firebaseDatabase.FirebaseDb
--import com.example.kleine.resource.Resource
--import com.example.kleine.util.Constants
--import com.example.kleine.viewmodel.shopping.ShoppingViewModel
--import com.example.kleine.viewmodel.shopping.ShoppingViewModelProviderFactory
--
--class AccessoryFragment : Fragment(R.layout.fragment_enlightening) {
--    val TAG = "AccessoryFragment"
--    private lateinit var viewModel: ShoppingViewModel
--    private lateinit var binding: FragmentAccessoryBinding
--    private lateinit var headerAdapter: ProductsRecyclerAdapter
--    private lateinit var productsAdapter: ProductsRecyclerAdapter
--
--
--    override fun onCreate(savedInstanceState: Bundle?) {
--        super.onCreate(savedInstanceState)
--        headerAdapter = ProductsRecyclerAdapter()
--        productsAdapter = ProductsRecyclerAdapter()
--        viewModel = (activity as ShoppingActivity).viewModel
--
--        viewModel.getAccessories()
--        viewModel.getMostRequestedAccessories()
--
--        Log.d("Test","accessory")
--
--    }
--
--    override fun onCreateView(
--        inflater: LayoutInflater,
--        container: ViewGroup?,
--        savedInstanceState: Bundle?
--    ): View {
--        binding = FragmentAccessoryBinding.inflate(inflater)
--        return binding.root
--    }
--
--    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
--        super.onViewCreated(view, savedInstanceState)
--
--        setupHeaderRecyclerview()
--        observeHeader()
--
--        setupProductsRecyclerView()
--        observeProducts()
--
--        headerPaging()
--        productsPaging()
--
--        productsAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product",product)
--            bundle.putString("flag", Constants.PRODUCT_FLAG)
--            Log.d("test",product.newPrice!!)
--
--            findNavController().navigate(R.id.action_homeFragment_to_productPreviewFragment2,bundle)
--        }
--
--        headerAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product",product)
--            bundle.putString("flag", Constants.PRODUCT_FLAG)
--            findNavController().navigate(R.id.action_homeFragment_to_productPreviewFragment2,bundle)
--        }
--
--    }
--
--    private fun productsPaging() {
--        binding.scrollCupboard.setOnScrollChangeListener(NestedScrollView.OnScrollChangeListener { v, scrollX, scrollY, oldScrollX, oldScrollY ->
--            if (v!!.getChildAt(0).bottom <= (v.height + scrollY)) {
--                viewModel.getAccessories(productsAdapter.differ.currentList.size)
--            }
--        })
--    }
--
--    private fun headerPaging() {
--        binding.rvHeader.addOnScrollListener(object : RecyclerView.OnScrollListener() {
--            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
--                super.onScrolled(recyclerView, dx, dy)
--
--                if (!recyclerView.canScrollHorizontally(1) && dx != 0)
--                    viewModel.getMostRequestedAccessories(headerAdapter.differ.currentList.size)
--
--            }
--        })
--    }
--
--    private fun observeProducts() {
--        viewModel.accessory.observe(viewLifecycleOwner, Observer { response ->
--
--            when (response) {
--                is Resource.Loading -> {
--                    showBottomLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideBottomLoading()
--                    productsAdapter.differ.submitList(response.data)
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    hideBottomLoading()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--        })
--    }
--
--    private fun hideBottomLoading() {
--        binding.progressbar2.visibility = View.GONE
--    }
--
--    private fun showBottomLoading() {
--        binding.progressbar2.visibility = View.VISIBLE
--    }
--
--    private fun setupProductsRecyclerView() {
--        binding.rvProducts.apply {
--            adapter = productsAdapter
--            layoutManager = GridLayoutManager(context, 2, GridLayoutManager.VERTICAL, false)
--        }
--    }
--
--    private fun observeHeader() {
--        viewModel.mostRequestedAccessories.observe(viewLifecycleOwner, Observer { response ->
--
--            when (response) {
--                is Resource.Loading -> {
--                    showTopLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideTopLoading()
--                    headerAdapter.differ.submitList(response.data)
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    hideTopLoading()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--        })
--    }
--
--    private fun hideTopLoading() {
--        binding.progressbar1.visibility = View.GONE
--    }
--
--    private fun showTopLoading() {
--        binding.progressbar1.visibility = View.VISIBLE
--    }
--
--    private fun setupHeaderRecyclerview() {
--        binding.rvHeader.apply {
--            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
--            adapter = headerAdapter
--            addItemDecoration(HorizantalSpacingItemDecorator(100))
--        }
--    }
--
--}
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/fragments/categories/TableFragment.kt
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/categories/TableFragment.kt b/app/src/main/java/com/example/kleine/fragments/categories/TableFragment.kt
-deleted file mode 100644
---- a/app/src/main/java/com/example/kleine/fragments/categories/TableFragment.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ /dev/null	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-@@ -1,185 +0,0 @@
--package com.example.kleine.fragments.categories
--
--import android.os.Bundle
--import android.util.Log
--import android.view.LayoutInflater
--import android.view.View
--import android.view.ViewGroup
--import android.widget.Toast
--import androidx.core.widget.NestedScrollView
--import androidx.fragment.app.Fragment
--import androidx.lifecycle.Observer
--import androidx.lifecycle.ViewModelProvider
--import androidx.navigation.fragment.findNavController
--import androidx.recyclerview.widget.GridLayoutManager
--import androidx.recyclerview.widget.LinearLayoutManager
--import androidx.recyclerview.widget.RecyclerView
--import com.example.kleine.R
--import com.example.kleine.SpacingDecorator.HorizantalSpacingItemDecorator
--import com.example.kleine.activities.ShoppingActivity
--import com.example.kleine.adapters.recyclerview.ProductsRecyclerAdapter
--import com.example.kleine.databinding.FragmentChairBinding
--import com.example.kleine.databinding.FragmentTableBinding
--import com.example.kleine.firebaseDatabase.FirebaseDb
--import com.example.kleine.resource.Resource
--import com.example.kleine.util.Constants
--import com.example.kleine.viewmodel.shopping.ShoppingViewModel
--import com.example.kleine.viewmodel.shopping.ShoppingViewModelProviderFactory
--
--class TableFragment : Fragment(R.layout.fragment_table) {
--    val TAG = "TableFragment"
--    private lateinit var viewModel: ShoppingViewModel
--    private lateinit var binding: FragmentTableBinding
--    private lateinit var headerAdapter: ProductsRecyclerAdapter
--    private lateinit var productsAdapter: ProductsRecyclerAdapter
--
--
--    override fun onCreate(savedInstanceState: Bundle?) {
--        super.onCreate(savedInstanceState)
--        headerAdapter = ProductsRecyclerAdapter()
--        productsAdapter = ProductsRecyclerAdapter()
--        viewModel = (activity as ShoppingActivity).viewModel
--        viewModel.getTables()
--        viewModel.getMostRequestedTables()
--    }
--
--    override fun onCreateView(
--        inflater: LayoutInflater,
--        container: ViewGroup?,
--        savedInstanceState: Bundle?
--    ): View? {
--
--        binding = FragmentTableBinding.inflate(inflater)
--        return binding.root
--    }
--
--    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
--        super.onViewCreated(view, savedInstanceState)
--
--        setupHeaderRecyclerview()
--        observeHeader()
--
--        setupProductsRecyclerView()
--        observeProducts()
--
--        headerPaging()
--        productsPaging()
--
--        productsAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product",product)
--            bundle.putString("flag", Constants.PRODUCT_FLAG)
--            Log.d("test",product.newPrice!!)
--
--            findNavController().navigate(R.id.action_homeFragment_to_productPreviewFragment2,bundle)
--        }
--
--        headerAdapter.onItemClick = { product ->
--            val bundle = Bundle()
--            bundle.putParcelable("product",product)
--            bundle.putString("flag", Constants.PRODUCT_FLAG)
--            findNavController().navigate(R.id.action_homeFragment_to_productPreviewFragment2,bundle)
--        }
--
--    }
--
--    private fun productsPaging() {
--        binding.scrollCupboard.setOnScrollChangeListener(NestedScrollView.OnScrollChangeListener { v, scrollX, scrollY, oldScrollX, oldScrollY ->
--            if (v!!.getChildAt(0).bottom <= (v.height + scrollY)) {
--                viewModel.getTables(productsAdapter.differ.currentList.size)
--            }
--        })
--    }
--
--    private fun headerPaging() {
--        binding.rvHeader.addOnScrollListener(object : RecyclerView.OnScrollListener() {
--            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
--                super.onScrolled(recyclerView, dx, dy)
--
--                if (!recyclerView.canScrollHorizontally(1) && dx != 0)
--                    viewModel.getMostRequestedTables(headerAdapter.differ.currentList.size)
--
--            }
--        })
--    }
--
--    private fun observeProducts() {
--        viewModel.tables.observe(viewLifecycleOwner, Observer { response ->
--
--            when (response) {
--                is Resource.Loading -> {
--                    showBottomLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideBottomLoading()
--                    productsAdapter.differ.submitList(response.data)
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    hideBottomLoading()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--        })
--    }
--
--    private fun hideBottomLoading() {
--        binding.progressbar2.visibility = View.GONE
--    }
--
--    private fun showBottomLoading() {
--        binding.progressbar2.visibility = View.VISIBLE
--    }
--
--    private fun setupProductsRecyclerView() {
--        binding.rvProducts.apply {
--            adapter = productsAdapter
--            layoutManager = GridLayoutManager(context, 2, GridLayoutManager.VERTICAL, false)
--        }
--    }
--
--    private fun observeHeader() {
--        viewModel.mostRequestedTables.observe(viewLifecycleOwner, Observer { response ->
--
--            when (response) {
--                is Resource.Loading -> {
--                    showTopLoading()
--                    return@Observer
--                }
--
--                is Resource.Success -> {
--                    hideTopLoading()
--                    headerAdapter.differ.submitList(response.data)
--                    return@Observer
--                }
--
--                is Resource.Error -> {
--                    hideTopLoading()
--                    Log.e(TAG, response.message.toString())
--                    return@Observer
--                }
--            }
--        })
--    }
--
--    private fun hideTopLoading() {
--        binding.progressbar1.visibility = View.GONE
--    }
--
--    private fun showTopLoading() {
--        binding.progressbar1.visibility = View.VISIBLE
--    }
--
--    private fun setupHeaderRecyclerview() {
--        binding.rvHeader.apply {
--            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
--            adapter = headerAdapter
--            addItemDecoration(HorizantalSpacingItemDecorator(100))
--        }
--    }
--
--}
-\ No newline at end of file
-Index: app/src/main/java/com/example/kleine/fragments/shopping/SearchFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.content.Context\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.inputmethod.InputMethodManager\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport androidx.core.widget.addTextChangedListener\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.Observer\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.SpacingDecorator.VerticalSpacingItemDecorator\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.CategoriesRecyclerAdapter\nimport com.example.kleine.adapters.recyclerview.SearchRecyclerAdapter\nimport com.example.kleine.databinding.FragmentSearchBinding\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport com.google.android.material.snackbar.Snackbar\nimport kotlinx.coroutines.*\n\nclass SearchFragment : Fragment() {\n    private val TAG = \"SearchFragment\"\n    private lateinit var binding: FragmentSearchBinding\n    private lateinit var inputMethodManger: InputMethodManager\n    private lateinit var viewModel: ShoppingViewModel\n    private lateinit var categoriesAdapter: CategoriesRecyclerAdapter\n    private lateinit var searchAdapter: SearchRecyclerAdapter\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        viewModel = (activity as ShoppingActivity).viewModel\n        viewModel.getCategories()\n\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentSearchBinding.inflate(inflater)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        setupCategoryRecyclerView()\n        setupSearchRecyclerView()\n        showKeyboardAutomatically()\n        onHomeClick()\n\n        searchProducts()\n        observeSearch()\n\n        observeCategories()\n\n        onSearchTextClick()\n\n        onCancelTvClick()\n\n        onCategoryClick()\n\n        binding.frameScan.setOnClickListener {\n            val snackBar = requireActivity().findViewById<CoordinatorLayout>(R.id.snackBar_coordinator)\n            Snackbar.make(snackBar,resources.getText(R.string.g_coming_soon), Snackbar.LENGTH_SHORT).show()\n        }\n        binding.fragmeMicrohpone.setOnClickListener {\n            val snackBar = requireActivity().findViewById<CoordinatorLayout>(R.id.snackBar_coordinator)\n            Snackbar.make(snackBar,resources.getText(R.string.g_coming_soon), Snackbar.LENGTH_SHORT).show()\n        }\n\n    }\n\n    private fun onCategoryClick() {\n        categoriesAdapter.onItemClick = { category ->\n            var position = 0\n            when (category.name) {\n                resources.getString(R.string.g_chair) -> position = 1\n                resources.getString(R.string.g_cupboard) -> position = 2\n                resources.getString(R.string.g_table) -> position = 3\n                resources.getString(R.string.g_accessory) -> position = 4\n                resources.getString(R.string.g_furniture) -> position = 5\n            }\n\n            val bundle = Bundle()\n            bundle.putInt(\"position\", position)\n//            findNavController().navigate(R.id.action_searchFragment_to_homeFragment, bundle)\n        }\n    }\n\n    private fun onCancelTvClick() {\n        binding.tvCancel.setOnClickListener {\n            searchAdapter.differ.submitList(emptyList())\n            binding.edSearch.setText(\"\")\n            hideCancelTv()\n        }\n    }\n\n    private fun onSearchTextClick() {\n        searchAdapter.onItemClick = { product ->\n            val bundle = Bundle()\n            bundle.putParcelable(\"product\", product)\n\n            /**\n             * Hide the keyboard\n             */\n\n            val imm =\n                activity?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager?\n            imm!!.hideSoftInputFromWindow(requireView().windowToken, 0)\n\n            findNavController().navigate(\n                R.id.action_searchFragment_to_productPreviewFragment2,\n                bundle\n            )\n\n        }\n    }\n\n    private fun setupSearchRecyclerView() {\n        searchAdapter = SearchRecyclerAdapter()\n        binding.rvSearch.apply {\n            adapter = searchAdapter\n            layoutManager = LinearLayoutManager(context)\n        }\n    }\n\n    private fun setupCategoryRecyclerView() {\n        categoriesAdapter = CategoriesRecyclerAdapter()\n        binding.rvCategories.apply {\n            adapter = categoriesAdapter\n            layoutManager = GridLayoutManager(context, 2, GridLayoutManager.VERTICAL, false)\n            addItemDecoration(VerticalSpacingItemDecorator(40))\n        }\n    }\n\n    private fun observeCategories() {\n        viewModel.categories.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showCategoriesLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideCategoriesLoading()\n                    val categories = response.data\n                    categoriesAdapter.differ.submitList(categories?.toList())\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideCategoriesLoading()\n                    Log.e(TAG, response.message.toString())\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun hideCategoriesLoading() {\n        binding.progressbarCategories.visibility = View.GONE\n\n    }\n\n    private fun showCategoriesLoading() {\n        binding.progressbarCategories.visibility = View.VISIBLE\n\n    }\n\n\n    private fun observeSearch() {\n        viewModel.search.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    Log.d(\"test\", \"Loading\")\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    val products = response.data\n                    searchAdapter.differ.submitList(products)\n                    showChancelTv()\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    Log.e(TAG, response.message.toString())\n                    showChancelTv()\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    var job: Job? = null\n    private fun searchProducts() {\n        binding.edSearch.addTextChangedListener { query ->\n            val queryTrim = query.toString().trim()\n            if (queryTrim.isNotEmpty()) {\n                val searchQuery = query.toString().substring(0, 1).toUpperCase()\n                    .plus(query.toString().substring(1))\n                job?.cancel()\n                job = CoroutineScope(Dispatchers.IO).launch {\n                    delay(500L)\n                    viewModel.searchProducts(searchQuery)\n                }\n            } else {\n                searchAdapter.differ.submitList(emptyList())\n                hideCancelTv()\n            }\n        }\n\n\n    }\n\n    private fun showChancelTv() {\n        binding.tvCancel.visibility = View.VISIBLE\n        binding.imgMic.visibility = View.GONE\n        binding.imgScan.visibility = View.GONE\n        binding.fragmeMicrohpone.visibility = View.GONE\n        binding.frameScan.visibility = View.GONE\n\n    }\n\n    private fun hideCancelTv() {\n        binding.tvCancel.visibility = View.GONE\n        binding.imgMic.visibility = View.VISIBLE\n        binding.imgScan.visibility = View.VISIBLE\n        binding.fragmeMicrohpone.visibility = View.VISIBLE\n        binding.frameScan.visibility = View.VISIBLE\n    }\n\n    private fun onHomeClick() {\n        val btm = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        btm?.menu?.getItem(0)?.setOnMenuItemClickListener {\n            activity?.onBackPressed()\n            true\n        }\n    }\n\n    private fun showKeyboardAutomatically() {\n        inputMethodManger =\n            activity?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\n        inputMethodManger.toggleSoftInput(\n            InputMethodManager.SHOW_FORCED,\n            InputMethodManager.HIDE_IMPLICIT_ONLY\n        )\n\n        binding.edSearch.requestFocus()\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        binding.edSearch.clearFocus()\n    }\n\n    override fun onResume() {\n        super.onResume()\n\n        val bottomNav = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNav?.visibility = View.VISIBLE\n    }\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/SearchFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/SearchFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/SearchFragment.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/SearchFragment.kt	(date 1695303450103)
-@@ -118,10 +118,10 @@
-                 activity?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager?
-             imm!!.hideSoftInputFromWindow(requireView().windowToken, 0)
- 
--            findNavController().navigate(
--                R.id.action_searchFragment_to_productPreviewFragment2,
--                bundle
--            )
-+//            findNavController().navigate(
-+//                R.id.action_searchFragment_to_materialPreviewFragment,
-+//                bundle
-+//            )
- 
-         }
-     }
-Index: app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.annotation.SuppressLint\nimport android.graphics.Paint\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.lifecycle.Observer\nimport androidx.navigation.fragment.navArgs\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.SpacingDecorator.HorizantalSpacingItemDecorator\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.ColorsAndSizesAdapter\nimport com.example.kleine.adapters.viewpager.ViewPager2Images\nimport com.example.kleine.databinding.FragmentProductPreviewBinding\nimport com.example.kleine.model.CartProduct\nimport com.example.kleine.model.Product\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.COLORS\nimport com.example.kleine.util.Constants.Companion.COLORS_TYPE\nimport com.example.kleine.util.Constants.Companion.IMAGES\nimport com.example.kleine.util.Constants.Companion.PRODUCT_FLAG\nimport com.example.kleine.util.Constants.Companion.SIZES\nimport com.example.kleine.util.Constants.Companion.SIZES_TYPE\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport io.github.vejei.viewpagerindicator.indicator.CircleIndicator\n\nclass ProductPreviewFragment : Fragment() {\n\n    val args by navArgs<ProductPreviewFragmentArgs>()\n    val TAG = \"ProductPreviewFragment\"\n\n    private lateinit var binding: FragmentProductPreviewBinding\n    private lateinit var colorsAdapter: ColorsAndSizesAdapter\n    private lateinit var sizesAdapter: ColorsAndSizesAdapter\n    private lateinit var viewPagerAdapter: ViewPager2Images\n    private lateinit var viewModel: ShoppingViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        colorsAdapter = ColorsAndSizesAdapter(COLORS_TYPE)\n        sizesAdapter = ColorsAndSizesAdapter(SIZES_TYPE)\n        viewPagerAdapter = ViewPager2Images()\n        viewModel = (activity as ShoppingActivity).viewModel\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n\n        binding = FragmentProductPreviewBinding.inflate(inflater)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        val bottomNavigation =\n            requireActivity().findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNavigation.visibility = View.GONE\n\n        val product = args.product\n\n        setupViewpager()\n        setupColorsRecyclerview()\n        setupSizesRecyclerview()\n\n\n//        setProductInformation(product)\n\n        onImageCloseClick()\n        onBtnAddToCartClick()\n\n        observeAddToCart()\n\n        onColorClick()\n        onSizeClick()\n    }\n\n    private var selectedSize: String = \"\"\n    private fun onSizeClick() {\n        sizesAdapter.onItemClick = { size ->\n            selectedSize = size\n            binding.tvSizeError.visibility = View.INVISIBLE\n\n        }\n    }\n\n    private var selectedColor: String = \"\"\n    private fun onColorClick() {\n        colorsAdapter.onItemClick = { color ->\n            selectedColor = color\n            binding.tvColorError.visibility = View.INVISIBLE\n        }\n    }\n\n\n    private fun observeAddToCart() {\n        viewModel.addToCart.observe(viewLifecycleOwner, Observer { response ->\n            val btn = binding.btnAddToCart\n            when (response) {\n                is Resource.Loading -> {\n                    startLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    stopLoading()\n                    viewModel.addToCart.value = null\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    Toast.makeText(activity, \"Oops! error occurred\", Toast.LENGTH_SHORT).show()\n                    viewModel.addToCart.value = null\n                    Log.e(TAG, response.message.toString())\n                }\n            }\n        })\n    }\n\n    private fun stopLoading() {\n        binding.apply {\n            btnAddToCart.visibility = View.VISIBLE\n            progressbar.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun startLoading() {\n        binding.apply {\n            btnAddToCart.visibility = View.INVISIBLE\n            progressbar.visibility = View.VISIBLE\n        }\n    }\n\n\n    private fun onBtnAddToCartClick() {\n        binding.btnAddToCart.apply {\n            setOnClickListener {\n\n                if (selectedColor.isEmpty()) {\n                    binding.tvColorError.visibility = View.VISIBLE\n                    return@setOnClickListener\n                }\n\n                if (selectedSize.isEmpty()) {\n                    binding.tvSizeError.visibility = View.VISIBLE\n                    return@setOnClickListener\n                }\n\n                val product = args.product\n                val image = (product.images?.get(IMAGES) as List<String>)[0]\n                val cartProduct = CartProduct(\n                    product.id,\n                    product.description!!,\n                    product.seller!!,\n                    image,\n                    product.productPrice!!,\n                    product.newPrice,\n                    1,\n                    selectedColor,\n                    selectedSize\n                )\n                viewModel.addProductToCart(cartProduct)\n                setBackgroundResource(R.color.g_black)\n            }\n        }\n    }\n\n    private fun onImageCloseClick() {\n        binding.imgClose.setOnClickListener {\n            activity?.onBackPressed()\n        }\n    }\n\n//    @SuppressLint(\"SetTextI18n\")\n//    private fun setProductInformation(product: Product) {\n//        val imagesList = product.images!![IMAGES] as List<String>\n//        val colors = product.colors!![COLORS] as List<String>\n//        val sizes = product.sizes!![SIZES] as List<String>\n//        binding.apply {\n//            viewPagerAdapter.differ.submitList(imagesList)\n//            if (colors.isNotEmpty() && colors[0] != \"\")\n//                colorsAdapter.differ.submitList(colors.toList())\n//            if (sizes.isNotEmpty() && sizes[0] != \"\")\n//                sizesAdapter.differ.submitList(sizes)\n//            tvProductName.text = product.title\n//            tvProductDescription.text = product.description\n//            tvProductPrice.text = \"$${product.price}\"\n//            tvProductOfferPrice.visibility = View.GONE\n//            product.newPrice?.let {\n//                if (product.newPrice.isNotEmpty() && product.newPrice != \"0\") {\n//                    tvProductPrice.paintFlags =\n//                        tvProductPrice.paintFlags or Paint.STRIKE_THRU_TEXT_FLAG\n//                    tvProductOfferPrice.text = \"$${product.newPrice}\"\n//                    tvProductOfferPrice.visibility = View.VISIBLE\n//                }\n//            }\n//            product.sizeUnit?.let {\n//                if (it.isNotEmpty()) {\n//                    binding.tvSizeUnit.visibility = View.VISIBLE\n//                    binding.tvSizeUnit.text = \" ($it)\"\n//                }\n//            }\n//        }\n//    }\n\n    private fun setupSizesRecyclerview() {\n        binding.rvSizes.apply {\n            adapter = sizesAdapter\n            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)\n            addItemDecoration(HorizantalSpacingItemDecorator(45))\n        }\n    }\n\n    private fun setupColorsRecyclerview() {\n        binding.rvColors.apply {\n            adapter = colorsAdapter\n            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)\n            addItemDecoration(HorizantalSpacingItemDecorator(45))\n        }\n    }\n\n    private fun setupViewpager() {\n        binding.viewpager2Images.adapter = viewPagerAdapter\n        binding.circleIndicator.setWithViewPager2(binding.viewpager2Images)\n        binding.circleIndicator.itemCount = (args.product.images?.get(IMAGES) as List<String>).size\n        binding.circleIndicator.setAnimationMode(CircleIndicator.AnimationMode.SLIDE)\n    }\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/ProductPreviewFragment.kt	(date 1695303364794)
-@@ -33,7 +33,7 @@
- 
- class ProductPreviewFragment : Fragment() {
- 
--    val args by navArgs<ProductPreviewFragmentArgs>()
-+    val args by navArgs<MaterialPreviewFragmentArgs>()
-     val TAG = "ProductPreviewFragment"
- 
-     private lateinit var binding: FragmentProductPreviewBinding
-@@ -66,11 +66,10 @@
-             requireActivity().findViewById<BottomNavigationView>(R.id.bottom_navigation)
-         bottomNavigation.visibility = View.GONE
- 
--        val product = args.product
-+        val product = args.material
- 
-         setupViewpager()
--        setupColorsRecyclerview()
--        setupSizesRecyclerview()
-+
- 
- 
- //        setProductInformation(product)
-@@ -144,36 +143,22 @@
-     private fun onBtnAddToCartClick() {
-         binding.btnAddToCart.apply {
-             setOnClickListener {
--
-                 if (selectedColor.isEmpty()) {
-                     binding.tvColorError.visibility = View.VISIBLE
-                     return@setOnClickListener
-                 }
--
-                 if (selectedSize.isEmpty()) {
-                     binding.tvSizeError.visibility = View.VISIBLE
-                     return@setOnClickListener
-                 }
- 
--                val product = args.product
--                val image = (product.images?.get(IMAGES) as List<String>)[0]
--                val cartProduct = CartProduct(
--                    product.id,
--                    product.description!!,
--                    product.seller!!,
--                    image,
--                    product.productPrice!!,
--                    product.newPrice,
--                    1,
--                    selectedColor,
--                    selectedSize
--                )
--                viewModel.addProductToCart(cartProduct)
-+
-                 setBackgroundResource(R.color.g_black)
-             }
-         }
-     }
- 
-+
-     private fun onImageCloseClick() {
-         binding.imgClose.setOnClickListener {
-             activity?.onBackPressed()
-@@ -212,27 +197,16 @@
- //        }
- //    }
- 
--    private fun setupSizesRecyclerview() {
--        binding.rvSizes.apply {
--            adapter = sizesAdapter
--            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
--            addItemDecoration(HorizantalSpacingItemDecorator(45))
--        }
--    }
-+
- 
--    private fun setupColorsRecyclerview() {
--        binding.rvColors.apply {
--            adapter = colorsAdapter
--            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
--            addItemDecoration(HorizantalSpacingItemDecorator(45))
--        }
--    }
-+
- 
-     private fun setupViewpager() {
-         binding.viewpager2Images.adapter = viewPagerAdapter
-         binding.circleIndicator.setWithViewPager2(binding.viewpager2Images)
--        binding.circleIndicator.itemCount = (args.product.images?.get(IMAGES) as List<String>).size
-+        binding.circleIndicator.itemCount = 1 // Only one image
-         binding.circleIndicator.setAnimationMode(CircleIndicator.AnimationMode.SLIDE)
-     }
- 
-+
- }
-\ No newline at end of file
-Index: app/src/main/res/layout/fragment_product.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".activities.ShoppingActivity\">\n\n\n\n\n    <fragment\n        android:id=\"@+id/host_fragment\"\n        android:name=\"androidx.navigation.fragment.NavHostFragment\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        app:defaultNavHost=\"true\"\n        app:layout_constraintBottom_toTopOf=\"@id/bottom_navigation\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.0\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n\n\n        app:layout_constraintVertical_bias=\"1.0\"\n        app:navGraph=\"@navigation/shopping_nav_graph\" />\n\n\n    <com.google.android.material.bottomnavigation.BottomNavigationView\n        android:id=\"@+id/bottom_navigation\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"@dimen/_55sdp\"\n        android:background=\"@drawable/bottom_navigation_background\"\n        app:elevation=\"0dp\"\n        app:itemIconTint=\"@drawable/bottom_nav_item_background\"\n        app:itemPaddingBottom=\"@dimen/_10sdp\"\n        app:itemPaddingTop=\"@dimen/_10sdp\"\n        app:itemRippleColor=\"@color/g_white\"\n        app:labelVisibilityMode=\"unlabeled\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:menu=\"@menu/bottom_menu\" />\n\n\n    <androidx.coordinatorlayout.widget.CoordinatorLayout\n        android:id=\"@+id/snackBar_coordinator\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toTopOf=\"@id/bottom_navigation\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"/>\n\n\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recycleViewProductList\"\n        android:layout_width=\"417dp\"\n        android:layout_height=\"696dp\"\n        app:layoutManager=\"androidx.recyclerview.widget.GridLayoutManager\"\n        app:layout_constraintBottom_toTopOf=\"@+id/snackBar_coordinator\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.0\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"@+id/host_fragment\"\n        app:layout_constraintVertical_bias=\"1.0\"\n        tools:listitem=\"@layout/product_cart\" />\n\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_product.xml b/app/src/main/res/layout/fragment_product.xml
---- a/app/src/main/res/layout/fragment_product.xml	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ b/app/src/main/res/layout/fragment_product.xml	(date 1695284306369)
-@@ -52,18 +52,6 @@
-         app:layout_constraintEnd_toEndOf="parent"/>
- 
- 
--    <androidx.recyclerview.widget.RecyclerView
--        android:id="@+id/recycleViewProductList"
--        android:layout_width="417dp"
--        android:layout_height="696dp"
--        app:layoutManager="androidx.recyclerview.widget.GridLayoutManager"
--        app:layout_constraintBottom_toTopOf="@+id/snackBar_coordinator"
--        app:layout_constraintEnd_toEndOf="parent"
--        app:layout_constraintHorizontal_bias="0.0"
--        app:layout_constraintStart_toStartOf="parent"
--        app:layout_constraintTop_toTopOf="@+id/host_fragment"
--        app:layout_constraintVertical_bias="1.0"
--        tools:listitem="@layout/product_cart" />
- 
- 
- </androidx.constraintlayout.widget.ConstraintLayout>
-Index: app/src/main/res/navigation/shopping_nav_graph.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/shopping_nav_graph\"\n    app:startDestination=\"@id/homeFragment\">\n\n    <fragment\n        android:id=\"@+id/homeFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.HomeFragment\"\n        android:label=\"fragment_home\"\n        tools:layout=\"@layout/fragment_home\">\n        <action\n            android:id=\"@+id/action_homeFragment_to_productPreviewFragment2\"\n            app:destination=\"@id/productPreviewFragment2\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n        <action\n            android:id=\"@+id/action_homeFragment_to_searchFragment\"\n            app:destination=\"@id/searchFragment\"\n            app:popUpTo=\"@id/homeFragment\" />\n        <argument\n            android:name=\"position\"\n            app:argType=\"integer\"\n            android:defaultValue=\"0\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/searchFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.SearchFragment\"\n        android:label=\"fragment_search\"\n        tools:layout=\"@layout/fragment_search\">\n        <action\n            android:id=\"@+id/action_searchFragment_to_productPreviewFragment2\"\n            app:destination=\"@id/productPreviewFragment2\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n        <action\n            android:id=\"@+id/action_searchFragment_to_homeFragment\"\n            app:destination=\"@id/homeFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/profileFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.ProfileFragment\"\n        android:label=\"fragment_profile\"\n        tools:layout=\"@layout/fragment_profile\">\n        <action\n            android:id=\"@+id/action_profileFragment_to_billingFragment\"\n            app:destination=\"@id/billingFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_editUserInformation\"\n            app:destination=\"@id/editUserInformation\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_allOrdersFragment\"\n            app:destination=\"@id/allOrdersFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_languageFragment\"\n            app:destination=\"@id/languageFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_viewPartnershipFragment\"\n            app:destination=\"@id/viewPartnershipFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_helpFragment\"\n            app:destination=\"@id/helpFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_joinPartnerFragment\"\n            app:destination=\"@id/joinPartnerFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_profileFragment_to_adminDashboardFragment\"\n            app:destination=\"@id/adminDashboardFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/cartFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.CartFragment\"\n        android:label=\"fragment_cart\"\n        tools:layout=\"@layout/fragment_cart\">\n        <action\n            android:id=\"@+id/action_cartFragment_to_productPreviewFragment2\"\n            app:destination=\"@id/productPreviewFragment2\"\n            app:popUpToInclusive=\"false\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n        <action\n            android:id=\"@+id/action_cartFragment_to_billingFragment\"\n            app:destination=\"@id/billingFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/productPreviewFragment2\"\n        android:name=\"com.example.kleine.fragments.shopping.ProductPreviewFragment\"\n        android:label=\"fragment_product_preview\"\n        tools:layout=\"@layout/fragment_product_preview\">\n        <argument\n            android:name=\"product\"\n            app:argType=\"com.example.kleine.model.Product\" />\n\n\n    </fragment>\n    <fragment\n        android:id=\"@+id/billingFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.BillingFragment\"\n        android:label=\"fragment_billing\"\n        tools:layout=\"@layout/fragment_billing\">\n        <action\n            android:id=\"@+id/action_billingFragment_to_addressFragment\"\n            app:destination=\"@id/addressFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\" />\n        <argument\n            android:name=\"clickFlag\"\n            app:argType=\"string\" />\n        <argument\n            android:name=\"price\"\n            android:defaultValue=\"null\"\n            app:argType=\"string\"\n            app:nullable=\"true\" />\n        <argument\n            android:name=\"products\"\n            android:defaultValue=\"@null\"\n            app:argType=\"com.example.kleine.model.CartProductsList\"\n            app:nullable=\"true\" />\n        <action\n            android:id=\"@+id/action_billingFragment_to_orderCompletion\"\n            app:destination=\"@id/orderCompletion\"\n            app:popUpTo=\"@id/billingFragment\"\n            app:popUpToInclusive=\"true\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/addressFragment\"\n        android:name=\"com.example.kleine.fragments.shopping.AddressFragment\"\n        android:label=\"fragment_address\"\n        tools:layout=\"@layout/fragment_address\">\n\n        <argument\n            android:name=\"address\"\n            android:defaultValue=\"@null\"\n            app:argType=\"com.example.kleine.model.Address\"\n            app:nullable=\"true\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/orderCompletion\"\n        android:name=\"com.example.kleine.fragments.shopping.OrderCompletion\"\n        android:label=\"fragment_order_completion\"\n        tools:layout=\"@layout/fragment_order_completion\">\n        <argument\n            android:name=\"order_completion_flag\"\n            app:argType=\"string\" />\n        <argument\n            android:name=\"orderNumber\"\n            android:defaultValue=\"null\"\n            app:argType=\"string\"\n            app:nullable=\"true\" />\n        <action\n            android:id=\"@+id/action_orderCompletion_to_orderDetails\"\n            app:destination=\"@id/orderDetails\" />\n        <argument\n            android:name=\"order\"\n            app:argType=\"com.example.kleine.model.Order\"\n            app:nullable=\"true\"\n            android:defaultValue=\"@null\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/editUserInformation\"\n        android:name=\"com.example.kleine.fragments.settings.EditUserInformationFragment\"\n        android:label=\"fragment_edit_user_information\"\n        tools:layout=\"@layout/fragment_edit_user_information\">\n        <argument\n            android:name=\"user\"\n            app:argType=\"com.example.kleine.model.User\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/allOrdersFragment\"\n        android:name=\"com.example.kleine.fragments.settings.AllOrdersFragment\"\n        android:label=\"fragment_all_orders\"\n        tools:layout=\"@layout/fragment_all_orders\" >\n        <action\n            android:id=\"@+id/action_allOrdersFragment_to_orderDetails\"\n            app:destination=\"@id/orderDetails\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/orderDetails\"\n        android:name=\"com.example.kleine.fragments.settings.OrderDetails\"\n        android:label=\"fragment_order_details\"\n        tools:layout=\"@layout/fragment_order_details\" >\n        <argument\n            android:name=\"order\"\n            app:argType=\"com.example.kleine.model.Order\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/languageFragment\"\n        android:name=\"com.example.kleine.fragments.settings.LanguageFragment\"\n        android:label=\"fragment_language\"\n        tools:layout=\"@layout/fragment_language\" />\n    <fragment\n        android:id=\"@+id/viewPartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.ViewPartnershipFragment\"\n        android:label=\"fragment_view_partnership\"\n        tools:layout=\"@layout/fragment_view_partnership\">\n        <action\n            android:id=\"@+id/action_viewPartnershipFragment_to_partnershipViewMaterialFragment\"\n            app:destination=\"@id/partnershipViewMaterialFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n        <action\n            android:id=\"@+id/action_viewPartnershipFragment_to_updatePartnershipFragment\"\n            app:destination=\"@id/updatePartnershipFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/helpFragment\"\n        android:name=\"com.example.kleine.fragments.settings.HelpFragment\"\n        android:label=\"HelpFragment\"\n        tools:layout=\"@layout/fragment_help\"/>\n    <fragment\n        android:id=\"@+id/partnershipViewMaterialFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialFragment\"\n        android:label=\"fragment_partnership_view_material\"\n        tools:layout=\"@layout/fragment_partnership_view_material\" >\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialFragment_to_partnershipViewMaterialDetailFragment\"\n            app:destination=\"@id/partnershipViewMaterialDetailFragment\"\n            app:enterAnim=\"@anim/from_right\"\n            app:exitAnim=\"@anim/to_left\"\n            app:popEnterAnim=\"@anim/from_left\"\n            app:popExitAnim=\"@anim/to_right\">\n            <argument\n                android:name=\"documentId\"\n                app:argType=\"string\"\n                app:nullable=\"false\" />\n        </action>\n    </fragment>\n    <fragment\n        android:id=\"@+id/partnershipViewMaterialDetailFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.PartnershipViewMaterialDetailFragment\"\n        android:label=\"fragment_partnership_view_material_detail\"\n        tools:layout=\"@layout/fragment_partnership_view_material_detail\" >\n        <action\n            android:id=\"@+id/action_partnershipViewMaterialDetailFragment_to_replyCommentFragment\"\n            app:destination=\"@id/replyCommentFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/replyCommentFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.ReplyCommentFragment\"\n        android:label=\"fragment_reply_comment\"\n        tools:layout=\"@layout/fragment_reply_comment\" />\n    <fragment\n        android:id=\"@+id/joinPartnerFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.JoinPartnerFragment\"\n        android:label=\"fragment_join__partner_\"\n        tools:layout=\"@layout/fragment_join__partner_\" />\n    <fragment\n        android:id=\"@+id/adminDashboardFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminDashboardFragment\"\n        android:label=\"fragment_admin_dashboard\"\n        tools:layout=\"@layout/fragment_admin_dashboard\" >\n        <action\n            android:id=\"@+id/action_adminDashboardFragment_to_adminViewPartnershipFragment\"\n            app:destination=\"@id/adminViewPartnershipFragment\"\n            app:enterAnim=\"@anim/nav_default_enter_anim\"\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\n            app:popEnterAnim=\"@anim/nav_default_pop_enter_anim\"\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\"/>\n    </fragment>\n    <fragment\n        android:id=\"@+id/adminViewPartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipFragment\"\n        android:label=\"fragment_admin_view_partnership\"\n        tools:layout=\"@layout/fragment_admin_view_partnership\" >\n        <action\n            android:id=\"@+id/action_adminViewPartnershipFragment_to_adminViewPartnershipRequestFragment\"\n            app:destination=\"@id/adminViewPartnershipRequestFragment\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/adminViewPartnershipRequestFragment\"\n        android:name=\"com.example.kleine.fragments.admin.AdminViewPartnershipRequestFragment\"\n        android:label=\"fragment_admin_view_partnership_request\"\n        tools:layout=\"@layout/fragment_admin_view_partnership_request\" />\n    <fragment\n        android:id=\"@+id/updatePartnershipFragment\"\n        android:name=\"com.example.kleine.fragments.partnership.UpdatePartnershipFragment\"\n        android:label=\"UpdatePartnershipFragment\"\n        tools:layout=\"@layout/fragment_update_partnership\"/>\n</navigation>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/navigation/shopping_nav_graph.xml b/app/src/main/res/navigation/shopping_nav_graph.xml
---- a/app/src/main/res/navigation/shopping_nav_graph.xml	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ b/app/src/main/res/navigation/shopping_nav_graph.xml	(date 1695302472836)
-@@ -11,13 +11,6 @@
-         android:label="fragment_home"
-         tools:layout="@layout/fragment_home">
-         <action
--            android:id="@+id/action_homeFragment_to_productPreviewFragment2"
--            app:destination="@id/productPreviewFragment2"
--            app:enterAnim="@anim/nav_default_enter_anim"
--            app:exitAnim="@anim/nav_default_exit_anim"
--            app:popEnterAnim="@anim/nav_default_pop_enter_anim"
--            app:popExitAnim="@anim/nav_default_pop_exit_anim"/>
--        <action
-             android:id="@+id/action_homeFragment_to_searchFragment"
-             app:destination="@id/searchFragment"
-             app:popUpTo="@id/homeFragment" />
-@@ -26,18 +19,37 @@
-             app:argType="integer"
-             android:defaultValue="0" />
-     </fragment>
--    <fragment
--        android:id="@+id/searchFragment"
--        android:name="com.example.kleine.fragments.shopping.SearchFragment"
--        android:label="fragment_search"
--        tools:layout="@layout/fragment_search">
--        <action
--            android:id="@+id/action_searchFragment_to_productPreviewFragment2"
--            app:destination="@id/productPreviewFragment2"
--            app:enterAnim="@anim/nav_default_enter_anim"
--            app:exitAnim="@anim/nav_default_exit_anim"
--            app:popEnterAnim="@anim/nav_default_pop_enter_anim"
--            app:popExitAnim="@anim/nav_default_pop_exit_anim"/>
-+
-+    <action
-+        android:id="@+id/action_homeFragment_to_materialDetailsFragment"
-+        app:destination="@id/materialDetailsFragment"
-+        app:enterAnim="@anim/nav_default_enter_anim"
-+        app:exitAnim="@anim/nav_default_exit_anim"
-+        app:popEnterAnim="@anim/nav_default_pop_enter_anim"
-+        app:popExitAnim="@anim/nav_default_pop_exit_anim"/>
-+
-+
-+    <fragment
-+        android:id="@+id/materialDetailsFragment"
-+        android:name="com.example.kleine.fragments.shopping.MaterialPreviewFragment"
-+        android:label="Material Details">
-+
-+        <argument
-+            android:name="material"
-+            app:argType="com.example.kleine.model.Material"
-+            android:defaultValue="@null"
-+            app:nullable="true" />
-+
-+
-+    </fragment>
-+
-+
-+    <fragment
-+        android:id="@+id/searchFragment"
-+        android:name="com.example.kleine.fragments.shopping.SearchFragment"
-+        android:label="fragment_search"
-+        tools:layout="@layout/fragment_search">
-+
-         <action
-             android:id="@+id/action_searchFragment_to_homeFragment"
-             app:destination="@id/homeFragment" />
-@@ -109,29 +121,12 @@
-         android:name="com.example.kleine.fragments.shopping.CartFragment"
-         android:label="fragment_cart"
-         tools:layout="@layout/fragment_cart">
--        <action
--            android:id="@+id/action_cartFragment_to_productPreviewFragment2"
--            app:destination="@id/productPreviewFragment2"
--            app:popUpToInclusive="false"
--            app:enterAnim="@anim/nav_default_enter_anim"
--            app:exitAnim="@anim/nav_default_exit_anim"
--            app:popEnterAnim="@anim/nav_default_pop_enter_anim"
--            app:popExitAnim="@anim/nav_default_pop_exit_anim"/>
-+
-         <action
-             android:id="@+id/action_cartFragment_to_billingFragment"
-             app:destination="@id/billingFragment" />
-     </fragment>
--    <fragment
--        android:id="@+id/productPreviewFragment2"
--        android:name="com.example.kleine.fragments.shopping.ProductPreviewFragment"
--        android:label="fragment_product_preview"
--        tools:layout="@layout/fragment_product_preview">
--        <argument
--            android:name="product"
--            app:argType="com.example.kleine.model.Product" />
--
--
--    </fragment>
-+
-     <fragment
-         android:id="@+id/billingFragment"
-         android:name="com.example.kleine.fragments.shopping.BillingFragment"
-@@ -321,6 +316,8 @@
-             android:id="@+id/action_adminViewPartnershipFragment_to_adminViewPartnershipRequestFragment"
-             app:destination="@id/adminViewPartnershipRequestFragment" />
-     </fragment>
-+
-+
-     <fragment
-         android:id="@+id/adminViewPartnershipRequestFragment"
-         android:name="com.example.kleine.fragments.admin.AdminViewPartnershipRequestFragment"
-Index: app/src/main/res/values/strings.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><resources>\n    <string name=\"app_name\">HELP</string>\n    <string name=\"g_app_name\">HELP</string>\n    <string name=\"g_the_right_address\">In Learning, \\nWe Trust</string>\n\n    <!--    <string name=\"g_for_shopping\">For Shopping</string>-->\n    <!--    <string name=\"g_any_day\">Anyday</string>-->\n\n    <string name=\"g_best_quality\">Knowledge opens the door to a world of opportunities, illuminating the path to progress \\n When this wisdom intertwines with cooperative efforts, we collectively illuminate a brighter, more sustainable future</string>\n    <string name=\"g_start\">Start</string>\n    <!-- TODO: Remove or change this placeholder text -->\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\n    <string name=\"all_your_orders\">All your orders in one \\n saved package</string>\n    <string name=\"g_register\">Register</string>\n    <string name=\"g_let_s_register\">Let\\'s Register</string>\n    <string name=\"g_do_you_have_an_account_log_in\">Do you have an account? log in</string>\n    <string name=\"g_first_name\">First Name</string>\n    <string name=\"g_email\">Email</string>\n    <string name=\"g_second_name\">Last Name</string>\n    <string name=\"g_password\">Password</string>\n    <string name=\"g_don_t_have_an_account_register\">Don\\'t have an account? Register</string>\n    <string name=\"g_let_s_login\">Let\\'s Login</string>\n    <string name=\"g_log_in\">Log in</string>\n    <string name=\"g_google\">Google</string>\n    <string name=\"g_facebook\">Facebook</string>\n    <string name=\"first_name_cant_be_empty\">First name can\\'t be empty</string>\n    <string name=\"last_name_cant_be_empty\">Last name can\\'t be empty</string>\n    <string name=\"email_cant_be_empty\">Email can\\'t be empty</string>\n    <string name=\"password_cant_be_empty\">password can\\'t be empty</string>\n    <string name=\"password_at_least_six\">password should have 6</string>\n    <string name=\"valid_email\">check your email</string>\n    <string name=\"signed_up_successfully\">you have created new account, login now</string>\n    <string name=\"g_home\">Novice</string>\n    <string name=\"g_search\">search</string>\n    <string name=\"g_cart\">Cart</string>\n    <string name=\"g_profile\">profile</string>\n    <string name=\"g_add_to_cart\">Add to cart</string>\n    <string name=\"g_search_now\">Search Now</string>\n    <string name=\"g_best_deals\">Best Deals</string>\n    <string name=\"g_chair\">Beginner</string>\n    <string name=\"g_cupboard\">Intermediate</string>\n    <string name=\"g_table\">Proficient</string>\n    <string name=\"g_accessory\">Advanced</string>\n    <string name=\"g_furniture\">Expert</string>\n    <string name=\"g_enlightening\">Master</string>\n    <string name=\"g_best_products\">Trending Courses</string>\n    <string name=\"g_see_product\">See product</string>\n    <string name=\"g_color\">Color</string>\n    <string name=\"g_size\">Size</string>\n    <string name=\"g_add_to_card\">Enroll Courses</string>\n    <string name=\"g_added\">Added</string>\n    <string name=\"g_already_added\">Product is in your cart</string>\n    <string name=\"g_please_select_color\">Please select color</string>\n    <string name=\"g_please_select_size\">Please select size</string>\n    <string name=\"g_my_cart\">My Course</string>\n    <string name=\"g_checkout\">Checkout</string>\n    <string name=\"g_total\">Total:</string>\n    <string name=\"g_your_shopping_cart_is_empty\">Your Course List \\n Is Empty</string>\n    <string name=\"g_delete_item\">Delete item</string>\n    <string name=\"g_are_you_sure_you_want_to_delete_this_item_from_cart\">Are you sure you want to delete this item from cart ?</string>\n    <string name=\"g_no\">No</string>\n    <string name=\"g_yes\">Yes</string>\n    <string name=\"g_categories\">Categories</string>\n    <string name=\"g_cancel\">Cancel</string>\n    <string name=\"g_payment_methods\">Redeem Reward</string>\n    <string name=\"payment_explanation\">Congratulations on completing one of our courses ! Kindly entered your address to redeem the reward ! </string>\n    <string name=\"g_shipping\">Address</string>\n    <string name=\"g_full_name\">Full Name</string>\n    <string name=\"g_city\">City</string>\n    <string name=\"g_phone\">Phone</string>\n    <string name=\"g_state\">State</string>\n    <string name=\"g_save\">Save</string>\n    <string name=\"g_address\">Address</string>\n    <string name=\"g_address_location_ie_home\">Address Location ie. Home</string>\n    <string name=\"g_update\">Update</string>\n    <string name=\"g_place_order\">Save</string>\n    <string name=\"g_delete\">Delete</string>\n    <string name=\"g_select_address_error\">Select or add new address !</string>\n    <string name=\"g_place_order_confirmation\">Are you sure you want to place this order ?</string>\n    <string name=\"g_confirm\">Confirm</string>\n    <string name=\"place_order_error\">Error occurred try again later or contact us</string>\n    <string name=\"g_payment_failed\">Your Order is Failed !</string>\n    <string name=\"g_payment_success\">Your Order is Completed</string>\n    <string name=\"order_error_message\">Try again later, if this error keeps showing up please contact us .</string>\n    <string name=\"order_success_message\">We received your order and we will contact you through a phone call in the next 24H\n    \\n your order number is #</string>\n    <string name=\"g_track_order\">You can track your order by going to your profile and select all orders then select your recent order.</string>\n    <string name=\"g_settings\">Settings</string>\n    <string name=\"g_edit_personal_details\">Edit personal details</string>\n    <string name=\"g_orders\">Courses</string>\n    <string name=\"g_order\">Order</string>\n    <string name=\"g_all_orders\">All Courses</string>\n    <string name=\"g__track_order\">Enrolled Courses</string>\n    <string name=\"g_notifications\">Notifications</string>\n    <string name=\"g_information\">Information</string>\n\n\n    <string name=\"g_admin\">Admin</string>\n    <string name=\"g_preference\">Preferences</string>\n    <string name=\"g_join_partnership\">Join Partnership</string>\n    <string name=\"g_logout\">Logout</string>\n    <string name=\"g_billing\">Billing And Addresses</string>\n    <string name=\"g_version\">Version</string>\n    <string name=\"error_occurred\">Oops error occurred</string>\n    <string name=\"g_edit_profile\">Edit Profile</string>\n    <string name=\"g_change_forgot_password\">Forgot/Change password</string>\n    <string name=\"g_cant_change_email_message\">You cannot change your email address, if you are looking to change it please contact with us</string>\n    <string name=\"select_profile_image\">Select profile image</string>\n    <string name=\"g_no_orders_to_show\">No courses to show</string>\n    <string name=\"g_reset_password\">Reset Password</string>\n    <string name=\"g_reset_password_message\">We will send you password reset link on your Email</string>\n    <string name=\"g_send\">Send</string>\n    <string name=\"g_password_reset\">We sent reset password link to your email</string>\n    <string name=\"g_order_placed\">Order Placed</string>\n    <string name=\"g_shipped\">Shipped</string>\n    <string name=\"g_delivered\">Delivered</string>\n    <string name=\"g_products\">Products</string>\n    <string name=\"g_coming_soon\">This feature is not available yet</string>\n    <string name=\"g_english\">English</string>\n    <string name=\"g_arabic\">عربي</string>\n    <string name=\"g_forgot_password\">Forgot Password</string>\n    <string name=\"g_check_your_email\">Check your Email</string>\n    <string name=\"street\">Street</string>\n    <string name=\"g_order_details\">Order Details</string>\n    <string name=\"product_added\">Product added to your cart</string>\n    <string name=\"switch_account\">Switch Account</string>\n    <string name=\"open_menu\">Open Menu</string>\n    <string name=\"close_menu\">Close Menu</string>\n    <string name=\"my_store\">My Store</string>\n    <string name=\"g_total_sales\">Total Sales</string>\n    <string name=\"today_sales\">Today Sales</string>\n    <string name=\"pending_orders\">Pending Orders</string>\n    <string name=\"help\">Help</string>\n    <string name=\"help_text\">Got a question? We\\'re here to answer!</string>\n\n    <!-- reward -->\n    <string name=\"titleVoucher\">Select Voucher</string>\n    <string name=\"okButton\">OK</string>\n    <string name=\"rewardName\">Reward Name</string>\n    <string name=\"rewardExpired\">Reward Expired Date</string>\n    <string name=\"labelVoucherExpiredDate\">Expired Date: </string>\n    <string name=\"voucherTermsCondition\">Terms and Conditions</string>\n    <string name=\"labelShippingVoucher\">Voucher(s) can be selected: </string>\n    <string name=\"voucherCodeHint\">Enter Voucher Code</string>\n    <string name=\"noVoucherMsg\">No voucher available!</string>\n    <string name=\"g_difficultyLevel\">Level : </string>\n    <string name=\"g_totalChapter\">Chapter : </string>\n    <string name=\"g_product_name_label\">Material Name</string>\n\n    <string name=\"voucherName\">Voucher</string>\n    <string name=\"voucherExpired\">Voucher Expired Date</string>\n\n\n\n    <!-- Card View  -->\n\n    <string name=\"string_productCategory\">Course Category</string>\n    <string name=\"string_productTitle\">Course Title</string>\n    <string name=\"string_productPrice\">Product Price</string>\n    <string name=\"string_productRate\">4.9</string>\n    <string name=\"string_rate\">Rate</string>\n    <string name=\"string_product_image\">Course Image</string>\n    <string name=\"string_fav\">Favourite</string>\n\n\n\n    <string name=\"string_sale_text\">Grab Some Course !! </string>\n    <string name=\"string_curve_image\">Curve Image</string>\n    <string name=\"string_75\">520%</string>\n\n\n    <!-- Difficulty Levels  -->\n    <string-array name=\"difficulty_levels\">\n        <item>Novice</item>\n        <item>Beginners</item>\n        <item>Intermediate</item>\n        <item>Proficient</item>\n        <item>Advanced</item>\n        <item>Expert</item>\n        <item>Master</item>\n    </string-array>\n\n</resources>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
---- a/app/src/main/res/values/strings.xml	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ b/app/src/main/res/values/strings.xml	(date 1695284583746)
-@@ -168,6 +168,11 @@
-     <string name="string_curve_image">Curve Image</string>
-     <string name="string_75">520%</string>
- 
-+    <string name="string_status">Status</string>
-+
-+    <string name="string_rating">Rating</string>
-+
-+
- 
-     <!-- Difficulty Levels  -->
-     <string-array name="difficulty_levels">
-Index: app/src/main/java/com/example/kleine/fragments/shopping/HomeFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.coordinatorlayout.widget.CoordinatorLayout\nimport androidx.navigation.fragment.findNavController\nimport androidx.navigation.fragment.navArgs\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.activities.ShoppingActivity\nimport com.example.kleine.adapters.recyclerview.MaterialAdapter\nimport com.example.kleine.adapters.viewpager.HomeViewpagerAdapter\nimport com.example.kleine.databinding.FragmentHomeBinding\nimport com.example.kleine.fragments.categories.*\nimport com.example.kleine.fragments.categories.HomeProductsFragment\nimport com.example.kleine.viewmodel.shopping.ShoppingViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport com.google.android.material.snackbar.Snackbar\nimport com.google.android.material.tabs.TabLayoutMediator\nimport com.google.firebase.firestore.QuerySnapshot\nimport com.example.kleine.model.Material\nimport com.example.kleine.resource.Resource\n\n\n\nclass HomeFragment : Fragment() {\n    val TAG = \"HomeFragment\"\n    private lateinit var viewModel: ShoppingViewModel\n    private lateinit var binding: FragmentHomeBinding\n\n\n    private lateinit var materialList: List<Material>\n    private lateinit var materialAdapter: MaterialAdapter\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = (activity as ShoppingActivity).viewModel\n    }\n    \n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentHomeBinding.inflate(layoutInflater, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n\n        binding.frameAdd.setOnClickListener {\n//            findNavController().navigate(R.id.action_homeFragment_to_joinPartnerFragment)\n        }\n\n        binding.fragmeMicrohpone.setOnClickListener {\n            val snackBar = requireActivity().findViewById<CoordinatorLayout>(R.id.snackBar_coordinator)\n            Snackbar.make(snackBar,resources.getText(R.string.g_coming_soon),Snackbar.LENGTH_SHORT).show()\n        }\n\n\n\n        // Initialize RecyclerView and Adapter\n        materialAdapter = MaterialAdapter()  // No arguments here\n        binding.productListRecycler.adapter = materialAdapter\n        binding.productListRecycler.layoutManager = LinearLayoutManager(context)\n\n        // Fetch materials from ViewModel and observe LiveData\n        viewModel.getMaterials()  // This will update LiveData in ViewModel\n\n        viewModel.materialsLiveData.observe(viewLifecycleOwner) { resource ->\n            when (resource.status) {\n                Resource.Status.SUCCESS -> {\n                    Log.d(TAG, \"Fetched materials successfully. Item count: ${resource.data?.size}\")\n                    materialAdapter.differ.submitList(resource.data)\n                }\n\n                Resource.Status.ERROR -> {\n                    Log.e(TAG, \"Error fetching materials: ${resource.message}\")\n                }\n\n                Resource.Status.LOADING -> {\n                    Log.d(TAG, \"Loading materials\")\n                }\n            }\n        }\n\n    }\n\n\n\n\n\n    override fun onResume() {\n        super.onResume()\n        val bottomNavigation =\n            requireActivity().findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNavigation.visibility = View.VISIBLE\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n\n    }\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/HomeFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/HomeFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/HomeFragment.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/HomeFragment.kt	(date 1695303594255)
-@@ -15,8 +15,7 @@
- import com.example.kleine.adapters.recyclerview.MaterialAdapter
- import com.example.kleine.adapters.viewpager.HomeViewpagerAdapter
- import com.example.kleine.databinding.FragmentHomeBinding
--import com.example.kleine.fragments.categories.*
--import com.example.kleine.fragments.categories.HomeProductsFragment
-+
- import com.example.kleine.viewmodel.shopping.ShoppingViewModel
- import com.google.android.material.bottomnavigation.BottomNavigationView
- import com.google.android.material.snackbar.Snackbar
-Index: app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt
-new file mode 100644
---- /dev/null	(date 1695311227593)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/MaterialPreviewFragment.kt	(date 1695311227593)
-@@ -0,0 +1,46 @@
-+package com.example.kleine.fragments.shopping
-+
-+import android.os.Bundle
-+import android.view.LayoutInflater
-+import android.view.View
-+import android.view.ViewGroup
-+import androidx.fragment.app.Fragment
-+import com.example.kleine.databinding.FragmentProductPreviewBinding
-+import com.example.kleine.model.Material
-+
-+class MaterialPreviewFragment : Fragment() {
-+    private var _binding: FragmentProductPreviewBinding? = null
-+    private val binding get() = _binding!!
-+    private var material: Material? = null
-+
-+    override fun onCreateView(
-+        inflater: LayoutInflater, container: ViewGroup?,
-+        savedInstanceState: Bundle?
-+    ): View {
-+        _binding = FragmentProductPreviewBinding.inflate(inflater, container, false)
-+        return binding.root
-+    }
-+
-+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-+        super.onViewCreated(view, savedInstanceState)
-+
-+        // Retrieve the passed argument
-+        material = arguments?.getParcelable("material")
-+
-+        // Check if the material is not null
-+        if (material != null) {
-+            // Bind the material data to the views using data binding
-+            binding.productModel = material
-+        } else {
-+            // Handle the case where material is null
-+            // For instance, you can show a message to the user or navigate back
-+            fragmentManager?.popBackStack()
-+
-+        }
-+    }
-+
-+    override fun onDestroyView() {
-+        super.onDestroyView()
-+        _binding = null
-+    }
-+}
-Index: app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.fragments.shopping\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport android.widget.Toast\nimport androidx.appcompat.app.AlertDialog\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProviders\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.kleine.R\nimport com.example.kleine.SpacingDecorator.VerticalSpacingItemDecorator\nimport com.example.kleine.adapters.recyclerview.CartRecyclerAdapter\nimport com.example.kleine.databinding.FragmentCartBinding\nimport com.example.kleine.model.CartProductsList\nimport com.example.kleine.resource.Resource\nimport com.example.kleine.util.Constants.Companion.SELECT_ADDRESS_FLAG\nimport com.example.kleine.viewmodel.shopping.cart.CartViewModel\nimport com.google.android.material.bottomnavigation.BottomNavigationView\n\nprivate const val TAG = \"CartFragment\"\nclass CartFragment : Fragment() {\n    private lateinit var binding: FragmentCartBinding\n    private lateinit var viewModel: CartViewModel\n    private lateinit var cartAdapter: CartRecyclerAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        viewModel = ViewModelProviders.of(this)[CartViewModel::class.java]\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentCartBinding.inflate(inflater)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        onHomeClick()\n\n        setupRecyclerView()\n        observeCart()\n\n        onCloseImgClick()\n\n        onPlusClick()\n        onMinusClick()\n        onItemClick()\n\n        observeProductClickNavigation()\n\n        onCheckoutClick()\n\n    }\n\n    private fun onCheckoutClick() {\n        binding.btnCheckout.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"price\", binding.tvTotalprice.text.toString())\n            bundle.putString(\"clickFlag\", SELECT_ADDRESS_FLAG)\n            bundle.putParcelable(\"products\", cartProducts)\n            findNavController().navigate(R.id.action_cartFragment_to_billingFragment, bundle)\n        }\n    }\n\n    private fun observeProductClickNavigation() {\n        viewModel.product.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        val product = response.data\n                        val bundle = Bundle()\n                        bundle.putParcelable(\"product\", product)\n                        findNavController().navigate(\n                            R.id.action_cartFragment_to_productPreviewFragment2,\n                            bundle\n                        )\n                        viewModel.product.postValue(null)\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun observePlus() {\n        viewModel.plus.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun observeMinus() {\n        viewModel.minus.observe(viewLifecycleOwner, Observer { response ->\n\n            when (response) {\n                is Resource.Success -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                    }\n                    return@Observer\n                }\n\n                is Resource.Loading -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.VISIBLE\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    binding.apply {\n                        progressPlusMinus.visibility = View.INVISIBLE\n                        Log.e(TAG, response.message.toString())\n                    }\n                    return@Observer\n                }\n            }\n        })\n    }\n\n\n    private fun onItemClick() {\n        cartAdapter.onItemClick = { cartProduct ->\n            viewModel.getProductFromCartProduct(cartProduct)\n        }\n    }\n\n\n    private fun onMinusClick() {\n        cartAdapter.onMinusesClick = { cartProduct ->\n            if (cartProduct.quantity > 1) {\n                viewModel.decreaseQuantity(cartProduct)\n                observeMinus()\n            } else {\n                val alertDialog = AlertDialog.Builder(requireContext()).create()\n                alertDialog.setTitle(\"\")\n                val view =\n                    LayoutInflater.from(context).inflate(R.layout.delete_alert_dialog, null, false)\n                alertDialog.setView(view)\n\n                view.findViewById<Button>(R.id.btn_no).setOnClickListener {\n                    alertDialog.dismiss()\n                }\n\n                view.findViewById<Button>(R.id.btn_yes).setOnClickListener {\n                    viewModel.deleteProductFromCart(cartProduct)\n                    alertDialog.dismiss()\n                }\n\n                alertDialog.show()\n            }\n        }\n    }\n\n    private fun onPlusClick() {\n        cartAdapter.onPlusClick = { cartProduct ->\n            viewModel.increaseQuantity(cartProduct)\n            observePlus()\n        }\n    }\n\n    private fun onCloseImgClick() {\n        binding.imgCloseCart.setOnClickListener {\n            findNavController().navigateUp()\n        }\n    }\n\n    private fun setupRecyclerView() {\n        cartAdapter = CartRecyclerAdapter()\n        binding.apply {\n            rvCart.layoutManager = LinearLayoutManager(context)\n            rvCart.adapter = cartAdapter\n            rvCart.addItemDecoration(VerticalSpacingItemDecorator(50))\n        }\n    }\n\n    private var cartProducts: CartProductsList? = null\n    private fun observeCart() {\n        viewModel.cartProducts.observe(viewLifecycleOwner, Observer { response ->\n            when (response) {\n                is Resource.Loading -> {\n                    showLoading()\n                    return@Observer\n                }\n\n                is Resource.Success -> {\n                    hideLoading()\n\n                    //Handle empty cart case\n                    val products = response.data\n                    if (products!!.isNotEmpty()) { // cart is not empty\n                        cartProducts = CartProductsList(products)\n                        cartAdapter.differ.submitList(products)\n                        var totalPrice:Double = 0.0\n                        products.forEach {\n                            if (it.newPrice != null && it.newPrice.isNotEmpty() && it.newPrice != \"0\") {\n                                totalPrice += it.newPrice.toDouble() * it.quantity\n                            } else\n                                totalPrice += it.price.toDouble() * it.quantity\n\n\n                        }\n\n                        binding.tvTotalprice.text = \"$ $totalPrice\"\n\n                    } else { // cart is empty\n                        cartAdapter.differ.submitList(products)\n                        binding.apply {\n                            btnCheckout.visibility = View.INVISIBLE\n                            linear.visibility = View.INVISIBLE\n                            imgEmptyBox.visibility = View.VISIBLE\n                            imgEmptyBoxTexture.visibility = View.VISIBLE\n                            tvEmptyCart.visibility = View.VISIBLE\n                        }\n\n                    }\n                    return@Observer\n                }\n\n                is Resource.Error -> {\n                    hideLoading()\n                    Log.e(TAG, response.message.toString())\n                    Toast.makeText(activity, \"Oops error occurred\", Toast.LENGTH_SHORT).show()\n                    return@Observer\n                }\n            }\n        })\n    }\n\n    private fun hideLoading() {\n        binding.apply {\n            progressBar.visibility = View.GONE\n            linear.visibility = View.VISIBLE\n            btnCheckout.visibility = View.VISIBLE\n            imgEmptyBox.visibility = View.GONE\n            imgEmptyBoxTexture.visibility = View.GONE\n            tvEmptyCart.visibility = View.GONE\n        }\n    }\n\n    private fun showLoading() {\n        binding.apply {\n            progressBar.visibility = View.VISIBLE\n            linear.visibility = View.INVISIBLE\n            btnCheckout.visibility = View.INVISIBLE\n        }\n    }\n\n    private fun onHomeClick() {\n        val btm = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        btm?.menu?.getItem(0)?.setOnMenuItemClickListener {\n            activity?.onBackPressed()\n            true\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n\n        val bottomNavigation = activity?.findViewById<BottomNavigationView>(R.id.bottom_navigation)\n        bottomNavigation?.visibility = View.VISIBLE\n    }\n\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt
---- a/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ b/app/src/main/java/com/example/kleine/fragments/shopping/CartFragment.kt	(date 1695303022590)
-@@ -82,9 +82,9 @@
-                         progressPlusMinus.visibility = View.INVISIBLE
-                         val product = response.data
-                         val bundle = Bundle()
--                        bundle.putParcelable("product", product)
-+                        bundle.putParcelable("material", product)
-                         findNavController().navigate(
--                            R.id.action_cartFragment_to_productPreviewFragment2,
-+                            R.id.action_homeFragment_to_materialDetailsFragment,
-                             bundle
-                         )
-                         viewModel.product.postValue(null)
-Index: app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kleine.adapters.viewpager\n\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.databinding.ViewpagerImageItemBinding\n\nclass ViewPager2Images : RecyclerView.Adapter<ViewPager2Images.ViewPager2ImagesViewHolder>() {\n    inner class ViewPager2ImagesViewHolder(val binding: ViewpagerImageItemBinding) : RecyclerView.ViewHolder(binding.root)\n\n    private val diffCallback = object : DiffUtil.ItemCallback<String>() {\n        override fun areItemsTheSame(oldItem: String, newItem: String): Boolean {\n            return oldItem == newItem\n        }\n\n        override fun areContentsTheSame(oldItem: String, newItem: String): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallback)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewPager2ImagesViewHolder {\n        return ViewPager2ImagesViewHolder(\n            ViewpagerImageItemBinding.inflate(\n                LayoutInflater.from(parent.context),parent,false\n            )\n        )\n    }\n\n    override fun onBindViewHolder(holder: ViewPager2ImagesViewHolder, position: Int) {\n        Glide.with(holder.itemView).load(differ.currentList[position]).into(holder.binding.imgsProduct)\n    }\n\n    override fun getItemCount(): Int {\n        return differ.currentList.size\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt b/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt
---- a/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt	(revision 92515cec441a647908e8034027ccf94c3bea201a)
-+++ b/app/src/main/java/com/example/kleine/adapters/viewpager/ViewPager2Images.kt	(date 1695309391372)
-@@ -1,5 +1,6 @@
- package com.example.kleine.adapters.viewpager
- 
-+import android.util.Log
- import android.view.LayoutInflater
- import android.view.ViewGroup
- import androidx.recyclerview.widget.AsyncListDiffer
-@@ -32,8 +33,11 @@
-     }
- 
-     override fun onBindViewHolder(holder: ViewPager2ImagesViewHolder, position: Int) {
--        Glide.with(holder.itemView).load(differ.currentList[position]).into(holder.binding.imgsProduct)
-+        val imageUrl = differ.currentList[position]
-+        Log.d("ViewPager2Images", "Loading image at position $position: $imageUrl")
-+        Glide.with(holder.itemView).load(imageUrl).into(holder.binding.imgsProduct)
-     }
-+
- 
-     override fun getItemCount(): Int {
-         return differ.currentList.size
Index: app/src/main/java/com/example/kleine/model/Material.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.model\n\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.parcelize.Parcelize\n\n@Parcelize\n@Entity(tableName = \"material\")\ndata class Material(\n//    @PrimaryKey(autoGenerate = true) // ID as auto increment\n    var id: String = \"\",\n    val desc: String = \"\",\n    val name: String = \"\", // Course name\n    val pass: Int = 0, // Number of students who passed this course/subject\n    val rating: Float = 0f, // Rating (1 - 5)\n    val requirement: String = \"\", // Requirement (e.g., Free)\n    val status: String = \"\", // Status (Available/Unavailable)\n    var view: Long = 0,\n    var enroll: Long = 0,\n    var imageUrl: String = \"\", // URL for the course banner\n    val partnershipsID: String = \"\"  // User's document ID\n\n): Parcelable\n\n\n@Parcelize\ndata class MaterialData(\n    var id: String = \"\",\n    var name: String = \"\",\n    var desc: String = \"\",\n    var requirement: String = \"\",\n    var rating: Double = 0.0,\n    var imageUrl: String = \"\",\n    val status: String // Add this line\n\n): Parcelable {\n    constructor() : this(\"\", \"\", \"\", \"\", 0.0, \"\",\"\")\n}\n\n@Parcelize\ndata class MaterialEngageData(\n    val name: String = \"\",\n    val view: Long = 0,\n    val enroll: Long = 0,\n    val graduate: Long = 0,\n    val imageUrl: String = \"\"\n): Parcelable {\n    constructor() : this(\"\", 0,0,0,\"\")\n}\n\n@Parcelize\ndata class CourseDocument(\n    val documentUrl: String=\"\"\n):Parcelable
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/model/Material.kt b/app/src/main/java/com/example/kleine/model/Material.kt
--- a/app/src/main/java/com/example/kleine/model/Material.kt	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/java/com/example/kleine/model/Material.kt	(date 1696088172865)
@@ -14,7 +14,7 @@
     val name: String = "", // Course name
     val pass: Int = 0, // Number of students who passed this course/subject
     val rating: Float = 0f, // Rating (1 - 5)
-    val requirement: String = "", // Requirement (e.g., Free)
+    val category: String = "",
     val status: String = "", // Status (Available/Unavailable)
     var view: Long = 0,
     var enroll: Long = 0,
@@ -29,7 +29,7 @@
     var id: String = "",
     var name: String = "",
     var desc: String = "",
-    var requirement: String = "",
+    val category: String = "",
     var rating: Double = 0.0,
     var imageUrl: String = "",
     val status: String // Add this line
Index: app/src/main/java/com/example/kleine/adapters/recyclerview/SearchRecyclerAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.adapters.recyclerview\n\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.AsyncListDiffer\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.kleine.databinding.RecyclerviewSearchItemBinding\nimport com.example.kleine.model.Category\nimport com.example.kleine.model.Product\n\nclass SearchRecyclerAdapter : RecyclerView.Adapter<SearchRecyclerAdapter.SearchViewHolder>() {\n    var onItemClick: ((Product) -> Unit)? = null\n\n\n    inner class SearchViewHolder(val binding: RecyclerviewSearchItemBinding) :\n        RecyclerView.ViewHolder(binding.root)\n\n    private val diffCallback = object : DiffUtil.ItemCallback<Product>() {\n        override fun areItemsTheSame(oldItem: Product, newItem: Product): Boolean {\n            return oldItem.id == newItem.id && oldItem.description == newItem.description\n        }\n\n        override fun areContentsTheSame(oldItem: Product, newItem: Product): Boolean {\n            return oldItem == newItem\n        }\n    }\n\n    val differ = AsyncListDiffer(this, diffCallback)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): SearchViewHolder {\n        return SearchViewHolder(\n            RecyclerviewSearchItemBinding.inflate(\n                LayoutInflater.from(parent.context),\n                parent,\n                false\n            )\n        )\n    }\n\n    override fun onBindViewHolder(holder: SearchViewHolder, position: Int) {\n        holder.binding.tvSearchedWord.text = differ.currentList[position].description\n        holder.itemView.setOnClickListener {\n            onItemClick?.invoke(differ.currentList[position])\n        }\n    }\n\n    override fun getItemCount(): Int {\n        return differ.currentList.size\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/adapters/recyclerview/SearchRecyclerAdapter.kt b/app/src/main/java/com/example/kleine/adapters/recyclerview/SearchRecyclerAdapter.kt
--- a/app/src/main/java/com/example/kleine/adapters/recyclerview/SearchRecyclerAdapter.kt	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/java/com/example/kleine/adapters/recyclerview/SearchRecyclerAdapter.kt	(date 1696092628645)
@@ -7,25 +7,28 @@
 import androidx.recyclerview.widget.RecyclerView
 import com.example.kleine.databinding.RecyclerviewSearchItemBinding
 import com.example.kleine.model.Category
+import com.example.kleine.model.Material
 import com.example.kleine.model.Product
 
 class SearchRecyclerAdapter : RecyclerView.Adapter<SearchRecyclerAdapter.SearchViewHolder>() {
-    var onItemClick: ((Product) -> Unit)? = null
+    var onItemClick: ((Material) -> Unit)? = null
 
 
     inner class SearchViewHolder(val binding: RecyclerviewSearchItemBinding) :
         RecyclerView.ViewHolder(binding.root)
 
-    private val diffCallback = object : DiffUtil.ItemCallback<Product>() {
-        override fun areItemsTheSame(oldItem: Product, newItem: Product): Boolean {
-            return oldItem.id == newItem.id && oldItem.description == newItem.description
+    private val diffCallback = object : DiffUtil.ItemCallback<Material>() {
+        override fun areItemsTheSame(oldItem: Material, newItem: Material): Boolean {
+            // Update this comparison based on the unique properties of the Material class
+            return oldItem.id == newItem.id && oldItem.desc == newItem.desc
         }
 
-        override fun areContentsTheSame(oldItem: Product, newItem: Product): Boolean {
+        override fun areContentsTheSame(oldItem: Material, newItem: Material): Boolean {
             return oldItem == newItem
         }
     }
 
+
     val differ = AsyncListDiffer(this, diffCallback)
 
     override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): SearchViewHolder {
@@ -39,12 +42,13 @@
     }
 
     override fun onBindViewHolder(holder: SearchViewHolder, position: Int) {
-        holder.binding.tvSearchedWord.text = differ.currentList[position].description
+        holder.binding.tvSearchedWord.text = differ.currentList[position].name
         holder.itemView.setOnClickListener {
             onItemClick?.invoke(differ.currentList[position])
         }
     }
 
+
     override fun getItemCount(): Int {
         return differ.currentList.size
     }
Index: app/src/main/res/layout/edit_material.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"16dp\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:padding=\"16dp\">\n\n        <EditText\n            android:id=\"@+id/editTextName\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Material Name\"\n            android:inputType=\"text\" />\n\n        <EditText\n            android:id=\"@+id/editTextDesc\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Description\"\n            android:inputType=\"textMultiLine\"\n            android:minLines=\"3\" />\n\n        <EditText\n            android:id=\"@+id/editTextRequirement\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Requirement\"\n            android:inputType=\"text\" />\n\n        <RadioGroup\n            android:id=\"@+id/radioGroupStatus\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\">\n\n            <RadioButton\n                android:id=\"@+id/radioButtonAvailable\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Available\" />\n\n            <RadioButton\n                android:id=\"@+id/radioButtonUnavailable\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Non-available\" />\n        </RadioGroup>\n\n        <TextView\n            android:id=\"@+id/textViewMaterialID\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"16dp\"\n            android:text=\"Material ID: \"\n            android:textStyle=\"bold\" />\n\n        <ImageView\n            android:id=\"@+id/imageViewMaterialBanner\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"200dp\"\n            android:layout_marginTop=\"16dp\"\n            android:scaleType=\"centerCrop\" />\n\n        <TextView\n            android:id=\"@+id/textViewDocumentStatus\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_marginTop=\"16dp\"\n            android:text=\"Document not uploaded.\"\n            android:textStyle=\"italic\" />\n\n        <Button\n            android:id=\"@+id/buttonSelectImage\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_marginTop=\"16dp\"\n            android:text=\"Select Image\" />\n\n        <Button\n            android:id=\"@+id/buttonUploadDocument\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_marginTop=\"16dp\"\n            android:text=\"Upload Document\" />\n\n        <Button\n            android:id=\"@+id/buttonUpdate\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_marginTop=\"16dp\"\n            android:text=\"Update\" />\n    </LinearLayout>\n</ScrollView>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/edit_material.xml b/app/src/main/res/layout/edit_material.xml
--- a/app/src/main/res/layout/edit_material.xml	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/res/layout/edit_material.xml	(date 1696088338497)
@@ -25,12 +25,32 @@
             android:inputType="textMultiLine"
             android:minLines="3" />
 
-        <EditText
-            android:id="@+id/editTextRequirement"
-            android:layout_width="match_parent"
+        <RadioGroup
+            android:id="@+id/radioGroupCategory"
+            android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:hint="Requirement"
-            android:inputType="text" />
+            android:orientation="horizontal"
+            android:layout_marginTop="8dp">
+
+            <RadioButton
+                android:id="@+id/radioButtonEasy"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="Easy" />
+
+            <RadioButton
+                android:id="@+id/radioButtonMedium"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="Medium" />
+
+            <RadioButton
+                android:id="@+id/radioButtonAdvanced"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="Advanced" />
+        </RadioGroup>
+
 
         <RadioGroup
             android:id="@+id/radioGroupStatus"
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" project-jdk-name=\"jbr-17\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/.idea/misc.xml	(date 1696087130845)
@@ -1,6 +1,6 @@
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/example/kleine/fragments/partnership/EditMaterialFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.partnership\n\nimport android.app.Activity\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.RadioButton\nimport android.widget.Toast\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.viewModels\nimport androidx.navigation.Navigation.findNavController\nimport androidx.navigation.fragment.findNavController\nimport com.example.kleine.R\nimport com.example.kleine.databinding.EditMaterialBinding\nimport com.example.kleine.model.Material\nimport com.example.kleine.viewmodel.material.MaterialViewModel\nimport com.google.firebase.firestore.FirebaseFirestore\n\nclass EditMaterialFragment : Fragment() {\n\n    private lateinit var binding: EditMaterialBinding\n    private val materialViewModel: MaterialViewModel by viewModels()\n    private var materialId: String? = null\n    private var selectedImageUri: Uri? = null\n    private var selectedDocumentUri: Uri? = null\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = EditMaterialBinding.inflate(inflater, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        // Retrieve materialId from arguments\n        materialId = arguments?.getString(\"materialId\")\n\n        if (materialId == null) {\n            Toast.makeText(context, \"Error: Material ID not provided\", Toast.LENGTH_SHORT).show()\n            return\n        }\n\n        // Fetch material details and set initial values\n        val db = FirebaseFirestore.getInstance()\n        val materialRef = db.collection(\"Materials\").document(materialId!!)\n        materialRef.get().addOnSuccessListener { document ->\n            if (document != null) {\n                val material = document.toObject(Material::class.java)\n                material?.let {\n                    binding.editTextName.setText(it.name)\n                    binding.editTextDesc.setText(it.desc)\n                    binding.editTextRequirement.setText(it.requirement)\n                    binding.textViewMaterialID.text = \"Material ID: ${materialId}\"\n                    val radioButtonId = if (it.status == \"Available\") R.id.radioButtonAvailable else R.id.radioButtonUnavailable\n                    binding.radioGroupStatus.check(radioButtonId)\n                }\n            }\n        }\n\n        // Set onClickListeners for buttons\n        binding.buttonSelectImage.setOnClickListener {\n            val intent = Intent(Intent.ACTION_PICK)\n            intent.type = \"image/*\"\n            startActivityForResult(intent, REQUEST_CODE_IMAGE_PICK)\n        }\n\n        binding.buttonUploadDocument.setOnClickListener {\n            val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\n            intent.addCategory(Intent.CATEGORY_OPENABLE)\n            intent.type = \"*/*\" // Set type to */*\n            // Use Intent.EXTRA_MIME_TYPES to allow both images and PDFs\n            intent.putExtra(Intent.EXTRA_MIME_TYPES, arrayOf(\"image/*\", \"application/pdf\"))\n            startActivityForResult(intent, REQUEST_CODE_DOCUMENT_PICK)\n        }\n        binding.buttonUpdate.setOnClickListener { updateMaterial() }\n    }\n\n    private fun updateMaterial() {\n        val name = binding.editTextName.text.toString()\n        val description = binding.editTextDesc.text.toString()\n        val requirement = binding.editTextRequirement.text.toString()\n        val selectedStatusId = binding.radioGroupStatus.checkedRadioButtonId\n        val selectedRadioButton = view?.findViewById<RadioButton>(selectedStatusId)\n        val status = selectedRadioButton?.text.toString()\n\n        if (name.isBlank() || description.isBlank() || requirement.isBlank() || status.isBlank()) {\n            Toast.makeText(context, \"Please fill all fields\", Toast.LENGTH_SHORT).show()\n            return\n        }\n\n        val updatedMaterial = Material(\n            id = materialId!!,\n            name = name,\n            desc = description,\n            requirement = requirement,\n            status = status\n        )\n\n        val db = FirebaseFirestore.getInstance()\n        val materialRef = db.collection(\"Materials\").document(materialId!!)\n        materialRef.set(updatedMaterial).addOnSuccessListener {\n            Toast.makeText(context, \"Material updated successfully\", Toast.LENGTH_SHORT).show()\n\n            // Obtain NavController and navigate up\n            val navController = findNavController()\n            navController.navigateUp()\n\n        }.addOnFailureListener {\n            Toast.makeText(context, \"Error updating material: $it\", Toast.LENGTH_SHORT).show()\n        }\n    }\n\n\n    // Handle onActivityResult for image and document selection\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (resultCode == Activity.RESULT_OK) {\n            when (requestCode) {\n                REQUEST_CODE_IMAGE_PICK -> {\n                    selectedImageUri = data?.data\n                }\n                REQUEST_CODE_DOCUMENT_PICK -> {\n                    selectedDocumentUri = data?.data // Here, remove the val keyword\n                    val mimeType = context?.contentResolver?.getType(selectedDocumentUri!!)\n                    if (mimeType == \"application/pdf\" || mimeType?.startsWith(\"image/\") == true) {\n                        // Handle the selected PDF or image\n                        binding.textViewDocumentStatus.text = \"Document has been uploaded.\"\n                    } else {\n                        // Show an error message for unsupported file type\n                        Toast.makeText(context, \"Unsupported file type. Please select an image or PDF.\", Toast.LENGTH_SHORT).show()\n                    }\n                }\n            }\n        }\n    }\n\n\n    companion object {\n        private const val REQUEST_CODE_IMAGE_PICK = 1\n        private const val REQUEST_CODE_DOCUMENT_PICK = 2\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/partnership/EditMaterialFragment.kt b/app/src/main/java/com/example/kleine/fragments/partnership/EditMaterialFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/partnership/EditMaterialFragment.kt	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/java/com/example/kleine/fragments/partnership/EditMaterialFragment.kt	(date 1696088401687)
@@ -55,7 +55,13 @@
                 material?.let {
                     binding.editTextName.setText(it.name)
                     binding.editTextDesc.setText(it.desc)
-                    binding.editTextRequirement.setText(it.requirement)
+                    val categoryId = when (it.category) {
+                        "Easy" -> R.id.radioButtonEasy
+                        "Medium" -> R.id.radioButtonMedium
+                        "Advanced" -> R.id.radioButtonAdvanced
+                        else -> -1
+                    }
+                    binding.radioGroupCategory.check(categoryId)
                     binding.textViewMaterialID.text = "Material ID: ${materialId}"
                     val radioButtonId = if (it.status == "Available") R.id.radioButtonAvailable else R.id.radioButtonUnavailable
                     binding.radioGroupStatus.check(radioButtonId)
@@ -84,12 +90,14 @@
     private fun updateMaterial() {
         val name = binding.editTextName.text.toString()
         val description = binding.editTextDesc.text.toString()
-        val requirement = binding.editTextRequirement.text.toString()
+        val selectedCategoryId = binding.radioGroupCategory.checkedRadioButtonId
+        val selectedCategoryButton = view?.findViewById<RadioButton>(selectedCategoryId)
+        val category = selectedCategoryButton?.text.toString() ?: ""
         val selectedStatusId = binding.radioGroupStatus.checkedRadioButtonId
         val selectedRadioButton = view?.findViewById<RadioButton>(selectedStatusId)
         val status = selectedRadioButton?.text.toString()
 
-        if (name.isBlank() || description.isBlank() || requirement.isBlank() || status.isBlank()) {
+        if (name.isBlank() || description.isBlank() || category.isBlank() || status.isBlank()) {
             Toast.makeText(context, "Please fill all fields", Toast.LENGTH_SHORT).show()
             return
         }
@@ -98,7 +106,7 @@
             id = materialId!!,
             name = name,
             desc = description,
-            requirement = requirement,
+            category = category,
             status = status
         )
 
Index: app/src/main/res/layout/material_add.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"16dp\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:padding=\"16dp\">\n\n        <EditText\n            android:id=\"@+id/editTextName\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Course Name\"\n            android:inputType=\"text\" />\n\n        <EditText\n            android:id=\"@+id/editTextDesc\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Description\"\n            android:inputType=\"textMultiLine\"\n            android:minLines=\"3\" />\n\n        <EditText\n            android:id=\"@+id/editTextRequirement\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Requirement\"\n            android:inputType=\"text\" />\n\n        <RadioGroup\n            android:id=\"@+id/radioGroupStatus\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\">\n\n            <RadioButton\n                android:id=\"@+id/radioButtonAvailable\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Available\" />\n\n            <RadioButton\n                android:id=\"@+id/radioButtonUnavailable\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Non-available\" />\n        </RadioGroup>\n\n        <TextView\n            android:id=\"@+id/textViewPartnershipID\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"16dp\"\n            android:text=\"Partnership ID: \"\n            android:textStyle=\"bold\" />\n\n        <ImageView\n            android:id=\"@+id/imageViewCourseBanner\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"200dp\"\n            android:layout_marginTop=\"16dp\"\n            android:scaleType=\"centerCrop\" />\n\n        <TextView\n            android:id=\"@+id/textViewDocumentStatus\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_marginTop=\"16dp\"\n            android:text=\"Document not uploaded.\"\n            android:textStyle=\"italic\" />\n\n        <Button\n            android:id=\"@+id/buttonSelectImage\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_marginTop=\"16dp\"\n            android:text=\"Select Image\" />\n\n        <Button\n            android:id=\"@+id/buttonUploadDocument\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_marginTop=\"16dp\"\n            android:text=\"Upload Document\" />\n\n        <Button\n            android:id=\"@+id/buttonSubmit\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_marginTop=\"16dp\"\n            android:text=\"Submit\" />\n    </LinearLayout>\n</ScrollView>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/material_add.xml b/app/src/main/res/layout/material_add.xml
--- a/app/src/main/res/layout/material_add.xml	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/res/layout/material_add.xml	(date 1696088256175)
@@ -25,12 +25,32 @@
             android:inputType="textMultiLine"
             android:minLines="3" />
 
-        <EditText
-            android:id="@+id/editTextRequirement"
-            android:layout_width="match_parent"
+        <RadioGroup
+            android:id="@+id/radioGroupCategory"
+            android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:hint="Requirement"
-            android:inputType="text" />
+            android:orientation="horizontal"
+            android:layout_marginTop="8dp">
+
+            <RadioButton
+                android:id="@+id/radioButtonEasy"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="Easy" />
+
+            <RadioButton
+                android:id="@+id/radioButtonMedium"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="Medium" />
+
+            <RadioButton
+                android:id="@+id/radioButtonAdvanced"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="Advanced" />
+        </RadioGroup>
+
 
         <RadioGroup
             android:id="@+id/radioGroupStatus"
Index: app/src/main/java/com/example/kleine/fragments/partnership/PartnershipViewMaterialFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.partnership\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.ImageView\nimport android.widget.PopupMenu\nimport android.widget.Toast\nimport androidx.appcompat.app.AlertDialog\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.viewModels\nimport androidx.lifecycle.Observer\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.kleine.R\nimport com.example.kleine.databinding.FragmentPartnershipViewMaterialBinding\nimport com.example.kleine.databinding.RecyclerViewMaterialDataBinding\nimport com.example.kleine.model.MaterialData\nimport com.example.kleine.viewmodel.material.MaterialViewModel\nimport com.google.firebase.firestore.FirebaseFirestore\nimport com.google.firebase.storage.FirebaseStorage\n\nclass PartnershipViewMaterialFragment : Fragment() {\n\n    val TAG = \"PartnershipViewMaterialFragment\"\n    private lateinit var binding: FragmentPartnershipViewMaterialBinding\n    private val materialViewModel: MaterialViewModel by viewModels()\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentPartnershipViewMaterialBinding.inflate(inflater, container, false)\n\n        val materialAdapter = MaterialAdapter(listOf())\n        binding.materialData.adapter = materialAdapter\n        // Observe the material list LiveData from the ViewModel\n        materialViewModel.materialList.observe(viewLifecycleOwner, Observer { materials ->\n            // Update the adapter's materialList when the LiveData changes\n            materialAdapter.materialList = materials\n            materialAdapter.notifyDataSetChanged()\n        })\n        materialViewModel.fetchMaterialsData()\n\n        return binding.root\n    }\n\n    inner class MaterialViewHolder(private val itemBinding: RecyclerViewMaterialDataBinding) : RecyclerView.ViewHolder(itemBinding.root) {\n        fun bind(material: MaterialData) {\n            itemBinding.materialName.text = material.name\n            itemBinding.materialDesc.text = material.desc\n            itemBinding.materialRequirement.text = \"Requirement: ${material.requirement}\"\n            itemBinding.ratingBar.rating = material.rating.toFloat()\n\n            if (material.imageUrl.isNotEmpty()) {\n                val storageReference = FirebaseStorage.getInstance().getReferenceFromUrl(material.imageUrl)\n                storageReference.downloadUrl.addOnSuccessListener { uri ->\n                    Glide.with(itemBinding.root.context)\n                        .load(uri.toString())\n                        .into(itemBinding.image)\n                }\n            }\n\n\n\n            onViewMaterialClick(itemBinding, material.id)\n            onViewQuizClick(itemBinding, material.id)\n            setupPopupMenu(itemBinding.threeDotsImage, material.id,material.status)\n        }\n    }\n\n    inner class MaterialAdapter(var materialList: List<MaterialData>) : RecyclerView.Adapter<MaterialViewHolder>() {\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MaterialViewHolder {\n            val inflater = LayoutInflater.from(parent.context)\n            val itemBinding = RecyclerViewMaterialDataBinding.inflate(inflater, parent, false)\n            return MaterialViewHolder(itemBinding)\n        }\n\n        override fun onBindViewHolder(holder: MaterialViewHolder, position: Int) {\n            holder.bind(materialList[position])\n        }\n\n        override fun getItemCount(): Int {\n            return materialList.size\n        }\n    }\n\n    private fun onViewMaterialClick(itemBinding: RecyclerViewMaterialDataBinding, id: String) {\n        itemBinding.materialViewData.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"documentId\", id)\n            findNavController().navigate(R.id.action_partnershipViewMaterialFragment_to_partnershipViewMaterialDetailFragment, bundle)\n        }\n    }\n\n    private fun onViewQuizClick(itemBinding: RecyclerViewMaterialDataBinding, id: String) {\n        itemBinding.materialViewQuiz.setOnClickListener {\n            val bundle = Bundle()\n            bundle.putString(\"materialDocId\", id)\n            findNavController().navigate(R.id.action_partnershipViewMaterialFragment_to_setsFragment, bundle)\n        }\n    }\n\n    private fun setupPopupMenu(threeDotsImageView: ImageView, materialId: String, status: String) {\n        threeDotsImageView.setOnClickListener {\n            val popupMenu = PopupMenu(requireContext(), it)\n            popupMenu.menuInflater.inflate(R.menu.popup, popupMenu.menu)\n\n            // Based on the status, decide which menu items to show or hide\n            if (status == \"Available\") {\n                popupMenu.menu.findItem(R.id.enable_material).isVisible = false\n            } else if (status == \"Non-available\") {\n                popupMenu.menu.findItem(R.id.disable_material).isVisible = false\n            }\n\n            popupMenu.setOnMenuItemClickListener { item ->\n                when (item.itemId) {\n                    R.id.edit_material -> {\n                        // Create a bundle with the materialId\n                        val bundle = Bundle()\n                        bundle.putString(\"materialId\", materialId)\n\n                        // Navigate to EditMaterialFragment with the bundle as arguments\n                        findNavController().navigate(R.id.action_partnershipViewMaterialFragment_to_editMaterialFragment, bundle)\n                        true\n                    }                    R.id.disable_material -> {\n                        showConfirmationDialog(materialId, \"Disable Material\", \"Non-available\", \"Material disabled successfully\")\n                        true\n                    }\n                    R.id.enable_material -> {\n                        showConfirmationDialog(materialId, \"Enable Material\", \"Available\", \"Material enabled successfully\")\n                        true\n                    }\n                    else -> false\n                }\n            }\n            popupMenu.show()\n        }\n    }\n\n\n\n    private fun showConfirmationDialog(materialId: String, title: String, newStatus: String, successMessage: String) {\n        AlertDialog.Builder(requireContext())\n            .setTitle(title)\n            .setMessage(\"Are you sure you want to $title this material?\")\n            .setPositiveButton(android.R.string.yes) { _, _ ->\n                // Get a reference to the Firestore collection\n                val db = FirebaseFirestore.getInstance()\n                val materialRef = db.collection(\"Materials\").document(materialId)\n\n                // Update the status\n                materialRef.update(\"status\", newStatus)\n                    .addOnSuccessListener {\n                        // Handle success\n                        Toast.makeText(context, successMessage, Toast.LENGTH_SHORT).show()\n                    }\n                    .addOnFailureListener { e ->\n                        // Handle failure\n                        Toast.makeText(context, \"Error updating material: $e\", Toast.LENGTH_SHORT).show()\n                    }\n            }\n            .setNegativeButton(android.R.string.no, null)\n            .show()\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/partnership/PartnershipViewMaterialFragment.kt b/app/src/main/java/com/example/kleine/fragments/partnership/PartnershipViewMaterialFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/partnership/PartnershipViewMaterialFragment.kt	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/java/com/example/kleine/fragments/partnership/PartnershipViewMaterialFragment.kt	(date 1696088564759)
@@ -50,7 +50,7 @@
         fun bind(material: MaterialData) {
             itemBinding.materialName.text = material.name
             itemBinding.materialDesc.text = material.desc
-            itemBinding.materialRequirement.text = "Requirement: ${material.requirement}"
+            itemBinding.materialRequirement.text = "Category: ${material.category}"
             itemBinding.ratingBar.rating = material.rating.toFloat()
 
             if (material.imageUrl.isNotEmpty()) {
Index: app/src/main/java/com/example/kleine/fragments/shopping/AddMaterialFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kleine.fragments.shopping\n\nimport android.app.Activity\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.RadioButton\nimport android.widget.Toast\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.navigation.fragment.findNavController\nimport com.example.kleine.databinding.MaterialAddBinding\nimport com.example.kleine.model.Material\nimport com.example.kleine.viewmodel.material.MaterialViewModel\nimport com.google.firebase.auth.FirebaseAuth\n\n\nclass AddMaterialFragment : Fragment() {\n\n    private lateinit var binding: MaterialAddBinding // Corrected binding class name\n    private lateinit var viewModel: MaterialViewModel\n\n\n    private val REQUEST_CODE_IMAGE_PICK = 1\n    private val REQUEST_CODE_DOCUMENT_PICK = 2\n\n    private var selectedImageUri: Uri? = null\n    private var selectedDocumentUri: Uri? = null\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = MaterialAddBinding.inflate(inflater, container, false)\n        return binding.root\n    }\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        viewModel = ViewModelProvider(this).get(MaterialViewModel::class.java)\n        // Retrieve the user's document ID (replace with your actual method)\n        val userDocumentId = getUserDocumentId()\n        binding.textViewPartnershipID.text = \"Partnership ID: $userDocumentId\"\n\n\n        binding.buttonSelectImage.setOnClickListener {\n            val intent = Intent(Intent.ACTION_PICK)\n            intent.type = \"image/*\"\n            startActivityForResult(intent, REQUEST_CODE_IMAGE_PICK)\n        }\n\n        binding.buttonUploadDocument.setOnClickListener {\n            val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\n            intent.addCategory(Intent.CATEGORY_OPENABLE)\n            intent.type = \"*/*\" // Set type to */*\n            // Use Intent.EXTRA_MIME_TYPES to allow both images and PDFs\n            intent.putExtra(Intent.EXTRA_MIME_TYPES, arrayOf(\"image/*\", \"application/pdf\"))\n            startActivityForResult(intent, REQUEST_CODE_DOCUMENT_PICK)\n        }\n\n        binding.buttonSubmit.setOnClickListener {\n            // Validate and get data from UI elements\n            val name = binding.editTextName.text.toString()\n            val description = binding.editTextDesc.text.toString()\n            val requirement = binding.editTextRequirement.text.toString()\n\n            // Get the selected status from the RadioGroup\n            val selectedStatusId = binding.radioGroupStatus.checkedRadioButtonId\n            if (selectedStatusId == -1) {\n                Toast.makeText(requireContext(), \"Please select a status\", Toast.LENGTH_SHORT).show()\n                return@setOnClickListener\n            }\n            val selectedRadioButton = view.findViewById<RadioButton>(selectedStatusId)\n            val status = selectedRadioButton.text.toString()\n\n            if (name.isNotEmpty() && description.isNotEmpty() && requirement.isNotEmpty()) {\n                val material = Material(\n                    name = name,\n                    desc = description,\n                    requirement = requirement,\n                    status = status,\n                    partnershipsID = userDocumentId // Set the user's document ID here\n                )\n\n                // Call ViewModel to add material and upload selected files\n                viewModel.addMaterial(material, selectedImageUri, selectedDocumentUri)\n\n                // Show a success message using a toast\n                Toast.makeText(requireContext(), \"Material submitted successfully\", Toast.LENGTH_SHORT).show()\n\n                // Navigate up (assuming you are using Navigation Component)\n                findNavController().navigateUp()\n            } else {\n                Toast.makeText(requireContext(), \"Please fill all fields\", Toast.LENGTH_SHORT).show()\n            }\n        }\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (resultCode == Activity.RESULT_OK) {\n            when (requestCode) {\n                REQUEST_CODE_IMAGE_PICK -> {\n                    selectedImageUri = data?.data\n                    binding.imageViewCourseBanner.setImageURI(selectedImageUri)\n                }\n                REQUEST_CODE_DOCUMENT_PICK -> {\n                    selectedDocumentUri = data?.data // Here, remove the val keyword\n                    val mimeType = context?.contentResolver?.getType(selectedDocumentUri!!)\n                    if (mimeType == \"application/pdf\" || mimeType?.startsWith(\"image/\") == true) {\n                        // Handle the selected PDF or image\n                        binding.textViewDocumentStatus.text = \"Document has been uploaded.\"\n                    } else {\n                        // Show an error message for unsupported file type\n                        Toast.makeText(context, \"Unsupported file type. Please select an image or PDF.\", Toast.LENGTH_SHORT).show()\n                    }\n                }\n            }\n        }\n    }\n\n\n\n\n    private fun getUserDocumentId(): String {\n        // Initialize Firebase Authentication\n        val auth = FirebaseAuth.getInstance()\n\n        // Check if a user is currently authenticated\n        val user = auth.currentUser\n\n        // If a user is authenticated, you can retrieve their UID (user ID)\n        return user?.uid ?: \"\"\n    }\n\n\n\n    companion object {\n        private const val REQUEST_CODE_IMAGE_PICK = 1\n        private const val REQUEST_CODE_DOCUMENT_PICK = 2\n    }\n}\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kleine/fragments/shopping/AddMaterialFragment.kt b/app/src/main/java/com/example/kleine/fragments/shopping/AddMaterialFragment.kt
--- a/app/src/main/java/com/example/kleine/fragments/shopping/AddMaterialFragment.kt	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/java/com/example/kleine/fragments/shopping/AddMaterialFragment.kt	(date 1696088233860)
@@ -64,7 +64,15 @@
             // Validate and get data from UI elements
             val name = binding.editTextName.text.toString()
             val description = binding.editTextDesc.text.toString()
-            val requirement = binding.editTextRequirement.text.toString()
+
+            val selectedCategoryId = binding.radioGroupCategory.checkedRadioButtonId
+            if (selectedCategoryId == -1) {
+                Toast.makeText(requireContext(), "Please select a category", Toast.LENGTH_SHORT).show()
+                return@setOnClickListener
+            }
+            val selectedCategoryButton = view.findViewById<RadioButton>(selectedCategoryId)
+            val category = selectedCategoryButton.text.toString()
+
 
             // Get the selected status from the RadioGroup
             val selectedStatusId = binding.radioGroupStatus.checkedRadioButtonId
@@ -75,11 +83,11 @@
             val selectedRadioButton = view.findViewById<RadioButton>(selectedStatusId)
             val status = selectedRadioButton.text.toString()
 
-            if (name.isNotEmpty() && description.isNotEmpty() && requirement.isNotEmpty()) {
+            if (name.isNotEmpty() && description.isNotEmpty() && category.isNotEmpty()) {
                 val material = Material(
                     name = name,
                     desc = description,
-                    requirement = requirement,
+                    category = category,
                     status = status,
                     partnershipsID = userDocumentId // Set the user's document ID here
                 )
Index: app/src/main/res/layout/fragment_product_preview.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n    <data>\n        <variable\n            name=\"productModel\"\n            type=\"com.example.kleine.model.Material\" />\n    </data>\n\n\n<androidx.core.widget.NestedScrollView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"fragments.shopping.MaterialPreviewFragment\"\n    android:fillViewport=\"true\">\n\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:id=\"@+id/productView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <androidx.cardview.widget.CardView\n            android:id=\"@+id/viewpager_card\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_350sdp\"\n            android:layout_marginTop=\"20dp\"\n            app:cardCornerRadius=\"15dp\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:orientation=\"vertical\"\n            android:backgroundTint=\"@color/white\"\n            android:overScrollMode=\"never\"\n            app:cardElevation=\"0dp\"\n            >\n\n\n            <androidx.viewpager2.widget.ViewPager2\n                android:id=\"@+id/viewpager2Images\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"0dp\"\n                android:layout_weight=\"1\"/>\n\n\n\n\n            <ImageView\n                android:id=\"@+id/img_close\"\n                android:layout_width=\"@dimen/_20sdp\"\n                android:layout_height=\"@dimen/_20sdp\"\n                android:layout_marginStart=\"10dp\"\n                android:layout_marginTop=\"10dp\"\n                android:src=\"@drawable/ic_close\"\n                app:tint=\"@color/black\"\n                android:scaleType=\"centerInside\"\n                />\n\n\n\n\n        </androidx.cardview.widget.CardView>\n\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline1\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.04\" />\n\n\n        <androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline2\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.96\" />\n\n\n\n\n\n\n\n        <LinearLayout\n            android:id=\"@+id/linear_product_name\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintTop_toBottomOf=\"@+id/viewpager_card\"\n            android:orientation=\"horizontal\"\n            android:layout_marginTop=\"35dp\">\n\n\n\n            <TextView\n                android:id=\"@+id/tv_product_name\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:fontFamily=\"@font/poppins_light\"\n                android:text=\"@{productModel.name}\"\n                android:textColor=\"@color/black\"\n                android:textSize=\"@dimen/_20ssp\"\n                android:textStyle=\"bold\"\n                app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n                app:layout_constraintTop_toBottomOf=\"@id/guideline3\" />\n\n\n            <!--        <TextView-->\n            <!--            android:id=\"@+id/tv_product_offer_price\"-->\n            <!--            android:layout_width=\"wrap_content\"-->\n            <!--            android:layout_height=\"wrap_content\"-->\n            <!--            android:fontFamily=\"@font/poppins_light\"-->\n            <!--            android:text=\"$300\"-->\n            <!--            android:textColor=\"@color/g_hint\"-->\n            <!--            android:textSize=\"@dimen/_20ssp\"-->\n            <!--            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"-->\n            <!--            app:layout_constraintBottom_toBottomOf=\"@id/tv_product_name\"-->\n            <!--            app:layout_constraintTop_toTopOf=\"@+id/tv_product_name\"-->\n            <!--            android:layout_marginEnd=\"5dp\"/>-->\n\n\n            <!--        <TextView-->\n            <!--            android:id=\"@+id/tv_product_price\"-->\n            <!--            android:layout_width=\"wrap_content\"-->\n            <!--            android:layout_height=\"wrap_content\"-->\n            <!--            android:fontFamily=\"@font/poppins_light\"-->\n            <!--            android:text=\"$300\"-->\n            <!--            android:textColor=\"@color/g_hint\"-->\n            <!--            android:textSize=\"@dimen/_20ssp\"-->\n            <!--            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"-->\n            <!--            app:layout_constraintBottom_toBottomOf=\"@id/tv_product_name\"-->\n            <!--            app:layout_constraintTop_toTopOf=\"@+id/tv_product_name\"/>-->\n\n\n        </LinearLayout>\n\n\n        <LinearLayout\n            android:id=\"@+id/linear_product_description\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_product_name\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\">\n\n\n            <TextView\n                android:id=\"@+id/tv_product_description\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:fontFamily=\"@font/poppins_light\"\n                android:text=\"@{String.valueOf(productModel.desc)}\"\n                android:textColor=\"@color/g_hint\"\n                android:textSize=\"@dimen/_10ssp\"\n                android:textStyle=\"bold\" />\n        </LinearLayout>\n\n\n        <View\n            android:id=\"@+id/line\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_1sdp\"\n            android:layout_marginTop=\"10dp\"\n            android:background=\"@drawable/line\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear_product_description\" />\n\n\n        <LinearLayout\n            android:id=\"@+id/linear\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/line\"\n            android:layout_marginTop=\"20dp\">\n\n\n            <LinearLayout\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:orientation=\"vertical\">\n\n\n                <LinearLayout\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\">\n\n\n                    <TextView\n                        android:id=\"@+id/tv_color\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:fontFamily=\"@font/poppins_light\"\n                        android:text=\"@{productModel.status}\"\n                        android:textColor=\"@color/black\"\n                        android:textSize=\"@dimen/_15ssp\" />\n\n\n\n\n\n\n                </LinearLayout>\n\n\n\n\n\n            </LinearLayout>\n\n\n            <LinearLayout\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:orientation=\"vertical\">\n                <LinearLayout\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:orientation=\"horizontal\">\n                    <TextView\n                        android:id=\"@+id/tv_size\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:fontFamily=\"@font/poppins_light\"\n                        android:text=\"@{productModel.requirement}\"\n                        android:textColor=\"@color/black\"\n                        android:textSize=\"@dimen/_15ssp\" />\n\n\n                    <TextView\n                        android:id=\"@+id/tv_size_unit\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginTop=\"15dp\"\n                        android:textSize=\"@dimen/_10ssp\"\n                        android:visibility=\"invisible\"\n                        />\n\n\n\n                </LinearLayout>\n\n\n\n            </LinearLayout>\n        </LinearLayout>\n\n\n        <ProgressBar\n            android:id=\"@+id/progressbar\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:indeterminateTint=\"@color/g_icon_tint\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear\"\n            android:layout_marginTop=\"45dp\"\n            android:visibility=\"invisible\"\n            />\n\n\n        <androidx.appcompat.widget.AppCompatButton\n            android:id=\"@+id/btnEnroll\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"@dimen/_40sdp\"\n            android:layout_marginBottom=\"20dp\"\n            android:background=\"@drawable/btn_background\"\n            android:fontFamily=\"@font/poppins_thin\"\n            android:text=\"@string/g_add_to_card\"\n            android:textAllCaps=\"false\"\n            android:textColor=\"@color/white\"\n            android:textSize=\"@dimen/_12sdp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"@id/guideline2\"\n            app:layout_constraintHorizontal_bias=\"1.0\"\n            app:layout_constraintStart_toStartOf=\"@id/guideline1\"\n            app:layout_constraintTop_toBottomOf=\"@id/linear\"\n            app:layout_constraintVertical_bias=\"0.494\"\n            app:layout_constraintBottom_toTopOf=\"@+id/allMaterialComment\"\n            android:layout_marginTop=\"45dp\"\n            android:visibility=\"visible\"\n            />\n\n        <include\n            app:layout_constraintTop_toBottomOf=\"@+id/btnEnroll\"\n            android:layout_marginTop=\"20dp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            layout=\"@layout/material_comment\"\n            android:id=\"@+id/allMaterialComment\"/>\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n\n</androidx.core.widget.NestedScrollView>\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_product_preview.xml b/app/src/main/res/layout/fragment_product_preview.xml
--- a/app/src/main/res/layout/fragment_product_preview.xml	(revision d1757b64c3798be216457dcc702dac99c820626f)
+++ b/app/src/main/res/layout/fragment_product_preview.xml	(date 1696090574344)
@@ -35,30 +35,11 @@
             app:cardElevation="0dp"
             >
 
-
-            <androidx.viewpager2.widget.ViewPager2
-                android:id="@+id/viewpager2Images"
-                android:layout_width="match_parent"
-                android:layout_height="0dp"
-                android:layout_weight="1"/>
-
-
-
-
             <ImageView
-                android:id="@+id/img_close"
-                android:layout_width="@dimen/_20sdp"
-                android:layout_height="@dimen/_20sdp"
-                android:layout_marginStart="10dp"
-                android:layout_marginTop="10dp"
-                android:src="@drawable/ic_close"
-                app:tint="@color/black"
-                android:scaleType="centerInside"
-                />
-
-
-
-
+                android:id="@+id/materialImage"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:scaleType="centerCrop" />
         </androidx.cardview.widget.CardView>
 
 
@@ -189,13 +170,11 @@
                 android:layout_weight="1"
                 android:orientation="vertical">
 
-
                 <LinearLayout
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
                     android:orientation="horizontal">
 
-
                     <TextView
                         android:id="@+id/tv_color"
                         android:layout_width="wrap_content"
@@ -205,21 +184,9 @@
                         android:text="@{productModel.status}"
                         android:textColor="@color/black"
                         android:textSize="@dimen/_15ssp" />
-
-
-
-
-
-
                 </LinearLayout>
-
-
-
-
-
             </LinearLayout>
 
-
             <LinearLayout
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
@@ -235,7 +202,7 @@
                         android:layout_height="wrap_content"
                         android:layout_marginTop="15dp"
                         android:fontFamily="@font/poppins_light"
-                        android:text="@{productModel.requirement}"
+                        android:text="@{productModel.category}"
                         android:textColor="@color/black"
                         android:textSize="@dimen/_15ssp" />
 
@@ -295,6 +262,8 @@
             android:visibility="visible"
             />
 
+
+
         <include
             app:layout_constraintTop_toBottomOf="@+id/btnEnroll"
             android:layout_marginTop="20dp"
