// Generated by view binder compiler. Do not edit!
package com.example.fyps.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.fyps.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentProfileBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final LinearLayout allOrders;

  @NonNull
  public final ImageView arrow;

  @NonNull
  public final ConstraintLayout constraintParnet;

  @NonNull
  public final ConstraintLayout constraintProfile;

  @NonNull
  public final TextView dashboard;

  @NonNull
  public final TextView dfgh;

  @NonNull
  public final TextView dfght;

  @NonNull
  public final Guideline guideline1;

  @NonNull
  public final Guideline guideline2;

  @NonNull
  public final LinearLayout historyOrders;

  @NonNull
  public final CircleImageView imgUser;

  @NonNull
  public final TextView itemSetting;

  @NonNull
  public final LinearLayout linearBilling;

  @NonNull
  public final LinearLayout linearDashboard;

  @NonNull
  public final LinearLayout linearHelp;

  @NonNull
  public final LinearLayout linearItemSetting;

  @NonNull
  public final LinearLayout linearJoinPartnership;

  @NonNull
  public final LinearLayout linearNotifications;

  @NonNull
  public final LinearLayout linearOrders;

  @NonNull
  public final LinearLayout linearOut;

  @NonNull
  public final LinearLayout linearPassedQuizzes;

  @NonNull
  public final LinearLayout linearPreference;

  @NonNull
  public final LinearLayout linearReward;

  @NonNull
  public final LinearLayout linearSetting;

  @NonNull
  public final LinearLayout linearViewPartnership;

  @NonNull
  public final TextView logout;

  @NonNull
  public final TextView passedQuizzes;

  @NonNull
  public final ProgressBar progressbarSettings;

  @NonNull
  public final TextView reward;

  @NonNull
  public final TextView setting;

  @NonNull
  public final SwitchCompat switchNotification;

  @NonNull
  public final TextView tvAllOrders;

  @NonNull
  public final TextView tvBilling;

  @NonNull
  public final TextView tvEditPersonalDetails;

  @NonNull
  public final TextView tvHelp;

  @NonNull
  public final TextView tvHistoryOrders;

  @NonNull
  public final TextView tvNotifications;

  @NonNull
  public final TextView tvNotifications2;

  @NonNull
  public final TextView tvOrders;

  @NonNull
  public final TextView tvRegional;

  @NonNull
  public final TextView tvSettings;

  @NonNull
  public final TextView tvUserName;

  @NonNull
  public final TextView tvVersionCode;

  private FragmentProfileBinding(@NonNull NestedScrollView rootView,
      @NonNull LinearLayout allOrders, @NonNull ImageView arrow,
      @NonNull ConstraintLayout constraintParnet, @NonNull ConstraintLayout constraintProfile,
      @NonNull TextView dashboard, @NonNull TextView dfgh, @NonNull TextView dfght,
      @NonNull Guideline guideline1, @NonNull Guideline guideline2,
      @NonNull LinearLayout historyOrders, @NonNull CircleImageView imgUser,
      @NonNull TextView itemSetting, @NonNull LinearLayout linearBilling,
      @NonNull LinearLayout linearDashboard, @NonNull LinearLayout linearHelp,
      @NonNull LinearLayout linearItemSetting, @NonNull LinearLayout linearJoinPartnership,
      @NonNull LinearLayout linearNotifications, @NonNull LinearLayout linearOrders,
      @NonNull LinearLayout linearOut, @NonNull LinearLayout linearPassedQuizzes,
      @NonNull LinearLayout linearPreference, @NonNull LinearLayout linearReward,
      @NonNull LinearLayout linearSetting, @NonNull LinearLayout linearViewPartnership,
      @NonNull TextView logout, @NonNull TextView passedQuizzes,
      @NonNull ProgressBar progressbarSettings, @NonNull TextView reward, @NonNull TextView setting,
      @NonNull SwitchCompat switchNotification, @NonNull TextView tvAllOrders,
      @NonNull TextView tvBilling, @NonNull TextView tvEditPersonalDetails,
      @NonNull TextView tvHelp, @NonNull TextView tvHistoryOrders,
      @NonNull TextView tvNotifications, @NonNull TextView tvNotifications2,
      @NonNull TextView tvOrders, @NonNull TextView tvRegional, @NonNull TextView tvSettings,
      @NonNull TextView tvUserName, @NonNull TextView tvVersionCode) {
    this.rootView = rootView;
    this.allOrders = allOrders;
    this.arrow = arrow;
    this.constraintParnet = constraintParnet;
    this.constraintProfile = constraintProfile;
    this.dashboard = dashboard;
    this.dfgh = dfgh;
    this.dfght = dfght;
    this.guideline1 = guideline1;
    this.guideline2 = guideline2;
    this.historyOrders = historyOrders;
    this.imgUser = imgUser;
    this.itemSetting = itemSetting;
    this.linearBilling = linearBilling;
    this.linearDashboard = linearDashboard;
    this.linearHelp = linearHelp;
    this.linearItemSetting = linearItemSetting;
    this.linearJoinPartnership = linearJoinPartnership;
    this.linearNotifications = linearNotifications;
    this.linearOrders = linearOrders;
    this.linearOut = linearOut;
    this.linearPassedQuizzes = linearPassedQuizzes;
    this.linearPreference = linearPreference;
    this.linearReward = linearReward;
    this.linearSetting = linearSetting;
    this.linearViewPartnership = linearViewPartnership;
    this.logout = logout;
    this.passedQuizzes = passedQuizzes;
    this.progressbarSettings = progressbarSettings;
    this.reward = reward;
    this.setting = setting;
    this.switchNotification = switchNotification;
    this.tvAllOrders = tvAllOrders;
    this.tvBilling = tvBilling;
    this.tvEditPersonalDetails = tvEditPersonalDetails;
    this.tvHelp = tvHelp;
    this.tvHistoryOrders = tvHistoryOrders;
    this.tvNotifications = tvNotifications;
    this.tvNotifications2 = tvNotifications2;
    this.tvOrders = tvOrders;
    this.tvRegional = tvRegional;
    this.tvSettings = tvSettings;
    this.tvUserName = tvUserName;
    this.tvVersionCode = tvVersionCode;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_profile, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentProfileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.all_orders;
      LinearLayout allOrders = ViewBindings.findChildViewById(rootView, id);
      if (allOrders == null) {
        break missingId;
      }

      id = R.id.arrow;
      ImageView arrow = ViewBindings.findChildViewById(rootView, id);
      if (arrow == null) {
        break missingId;
      }

      id = R.id.constraint_parnet;
      ConstraintLayout constraintParnet = ViewBindings.findChildViewById(rootView, id);
      if (constraintParnet == null) {
        break missingId;
      }

      id = R.id.constraint_profile;
      ConstraintLayout constraintProfile = ViewBindings.findChildViewById(rootView, id);
      if (constraintProfile == null) {
        break missingId;
      }

      id = R.id.dashboard;
      TextView dashboard = ViewBindings.findChildViewById(rootView, id);
      if (dashboard == null) {
        break missingId;
      }

      id = R.id.dfgh;
      TextView dfgh = ViewBindings.findChildViewById(rootView, id);
      if (dfgh == null) {
        break missingId;
      }

      id = R.id.dfght;
      TextView dfght = ViewBindings.findChildViewById(rootView, id);
      if (dfght == null) {
        break missingId;
      }

      id = R.id.guideline1;
      Guideline guideline1 = ViewBindings.findChildViewById(rootView, id);
      if (guideline1 == null) {
        break missingId;
      }

      id = R.id.guideline2;
      Guideline guideline2 = ViewBindings.findChildViewById(rootView, id);
      if (guideline2 == null) {
        break missingId;
      }

      id = R.id.history_orders;
      LinearLayout historyOrders = ViewBindings.findChildViewById(rootView, id);
      if (historyOrders == null) {
        break missingId;
      }

      id = R.id.img_user;
      CircleImageView imgUser = ViewBindings.findChildViewById(rootView, id);
      if (imgUser == null) {
        break missingId;
      }

      id = R.id.item_setting;
      TextView itemSetting = ViewBindings.findChildViewById(rootView, id);
      if (itemSetting == null) {
        break missingId;
      }

      id = R.id.linear_billing;
      LinearLayout linearBilling = ViewBindings.findChildViewById(rootView, id);
      if (linearBilling == null) {
        break missingId;
      }

      id = R.id.linear_dashboard;
      LinearLayout linearDashboard = ViewBindings.findChildViewById(rootView, id);
      if (linearDashboard == null) {
        break missingId;
      }

      id = R.id.linear_help;
      LinearLayout linearHelp = ViewBindings.findChildViewById(rootView, id);
      if (linearHelp == null) {
        break missingId;
      }

      id = R.id.linear_item_setting;
      LinearLayout linearItemSetting = ViewBindings.findChildViewById(rootView, id);
      if (linearItemSetting == null) {
        break missingId;
      }

      id = R.id.linear_join_partnership;
      LinearLayout linearJoinPartnership = ViewBindings.findChildViewById(rootView, id);
      if (linearJoinPartnership == null) {
        break missingId;
      }

      id = R.id.linear_notifications;
      LinearLayout linearNotifications = ViewBindings.findChildViewById(rootView, id);
      if (linearNotifications == null) {
        break missingId;
      }

      id = R.id.linear_orders;
      LinearLayout linearOrders = ViewBindings.findChildViewById(rootView, id);
      if (linearOrders == null) {
        break missingId;
      }

      id = R.id.linear_out;
      LinearLayout linearOut = ViewBindings.findChildViewById(rootView, id);
      if (linearOut == null) {
        break missingId;
      }

      id = R.id.linear_passed_quizzes;
      LinearLayout linearPassedQuizzes = ViewBindings.findChildViewById(rootView, id);
      if (linearPassedQuizzes == null) {
        break missingId;
      }

      id = R.id.linear_preference;
      LinearLayout linearPreference = ViewBindings.findChildViewById(rootView, id);
      if (linearPreference == null) {
        break missingId;
      }

      id = R.id.linear_reward;
      LinearLayout linearReward = ViewBindings.findChildViewById(rootView, id);
      if (linearReward == null) {
        break missingId;
      }

      id = R.id.linear_setting;
      LinearLayout linearSetting = ViewBindings.findChildViewById(rootView, id);
      if (linearSetting == null) {
        break missingId;
      }

      id = R.id.linear_view_partnership;
      LinearLayout linearViewPartnership = ViewBindings.findChildViewById(rootView, id);
      if (linearViewPartnership == null) {
        break missingId;
      }

      id = R.id.logout;
      TextView logout = ViewBindings.findChildViewById(rootView, id);
      if (logout == null) {
        break missingId;
      }

      id = R.id.passed_quizzes;
      TextView passedQuizzes = ViewBindings.findChildViewById(rootView, id);
      if (passedQuizzes == null) {
        break missingId;
      }

      id = R.id.progressbar_settings;
      ProgressBar progressbarSettings = ViewBindings.findChildViewById(rootView, id);
      if (progressbarSettings == null) {
        break missingId;
      }

      id = R.id.reward;
      TextView reward = ViewBindings.findChildViewById(rootView, id);
      if (reward == null) {
        break missingId;
      }

      id = R.id.setting;
      TextView setting = ViewBindings.findChildViewById(rootView, id);
      if (setting == null) {
        break missingId;
      }

      id = R.id.switch_notification;
      SwitchCompat switchNotification = ViewBindings.findChildViewById(rootView, id);
      if (switchNotification == null) {
        break missingId;
      }

      id = R.id.tv_all_orders;
      TextView tvAllOrders = ViewBindings.findChildViewById(rootView, id);
      if (tvAllOrders == null) {
        break missingId;
      }

      id = R.id.tv_billing;
      TextView tvBilling = ViewBindings.findChildViewById(rootView, id);
      if (tvBilling == null) {
        break missingId;
      }

      id = R.id.tv_edit_personal_details;
      TextView tvEditPersonalDetails = ViewBindings.findChildViewById(rootView, id);
      if (tvEditPersonalDetails == null) {
        break missingId;
      }

      id = R.id.tv_help;
      TextView tvHelp = ViewBindings.findChildViewById(rootView, id);
      if (tvHelp == null) {
        break missingId;
      }

      id = R.id.tv_history_orders;
      TextView tvHistoryOrders = ViewBindings.findChildViewById(rootView, id);
      if (tvHistoryOrders == null) {
        break missingId;
      }

      id = R.id.tv_notifications;
      TextView tvNotifications = ViewBindings.findChildViewById(rootView, id);
      if (tvNotifications == null) {
        break missingId;
      }

      id = R.id.tv_notifications2;
      TextView tvNotifications2 = ViewBindings.findChildViewById(rootView, id);
      if (tvNotifications2 == null) {
        break missingId;
      }

      id = R.id.tv_orders;
      TextView tvOrders = ViewBindings.findChildViewById(rootView, id);
      if (tvOrders == null) {
        break missingId;
      }

      id = R.id.tv_regional;
      TextView tvRegional = ViewBindings.findChildViewById(rootView, id);
      if (tvRegional == null) {
        break missingId;
      }

      id = R.id.tv_settings;
      TextView tvSettings = ViewBindings.findChildViewById(rootView, id);
      if (tvSettings == null) {
        break missingId;
      }

      id = R.id.tv_user_name;
      TextView tvUserName = ViewBindings.findChildViewById(rootView, id);
      if (tvUserName == null) {
        break missingId;
      }

      id = R.id.tv_version_code;
      TextView tvVersionCode = ViewBindings.findChildViewById(rootView, id);
      if (tvVersionCode == null) {
        break missingId;
      }

      return new FragmentProfileBinding((NestedScrollView) rootView, allOrders, arrow,
          constraintParnet, constraintProfile, dashboard, dfgh, dfght, guideline1, guideline2,
          historyOrders, imgUser, itemSetting, linearBilling, linearDashboard, linearHelp,
          linearItemSetting, linearJoinPartnership, linearNotifications, linearOrders, linearOut,
          linearPassedQuizzes, linearPreference, linearReward, linearSetting, linearViewPartnership,
          logout, passedQuizzes, progressbarSettings, reward, setting, switchNotification,
          tvAllOrders, tvBilling, tvEditPersonalDetails, tvHelp, tvHistoryOrders, tvNotifications,
          tvNotifications2, tvOrders, tvRegional, tvSettings, tvUserName, tvVersionCode);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
